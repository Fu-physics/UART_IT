
UART_IT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006bf8  080002ac  080002ac  000102ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08006ea4  08006ea4  00016ea4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006ef4  08006ef4  00016ef4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006efc  08006efc  00016efc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08006f00  08006f00  00016f00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  08006f04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000000b4  24000010  08006f14  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240000c4  08006f14  000200c4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   00010872  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00001f4a  00000000  00000000  000308b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000ae0  00000000  00000000  00032800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000a38  00000000  00000000  000332e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0002ec38  00000000  00000000  00033d18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000ffb6  00000000  00000000  00062950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013294b  00000000  00000000  00072906  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001a5251  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002c74  00000000  00000000  001a52a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	; (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	; (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	24000010 	.word	0x24000010
 80002c8:	00000000 	.word	0x00000000
 80002cc:	08006e8c 	.word	0x08006e8c

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	; (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	; (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	; (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	24000014 	.word	0x24000014
 80002e8:	08006e8c 	.word	0x08006e8c

080002ec <strlen>:
 80002ec:	4603      	mov	r3, r0
 80002ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002f2:	2a00      	cmp	r2, #0
 80002f4:	d1fb      	bne.n	80002ee <strlen+0x2>
 80002f6:	1a18      	subs	r0, r3, r0
 80002f8:	3801      	subs	r0, #1
 80002fa:	4770      	bx	lr

080002fc <__aeabi_uldivmod>:
 80002fc:	b953      	cbnz	r3, 8000314 <__aeabi_uldivmod+0x18>
 80002fe:	b94a      	cbnz	r2, 8000314 <__aeabi_uldivmod+0x18>
 8000300:	2900      	cmp	r1, #0
 8000302:	bf08      	it	eq
 8000304:	2800      	cmpeq	r0, #0
 8000306:	bf1c      	itt	ne
 8000308:	f04f 31ff 	movne.w	r1, #4294967295
 800030c:	f04f 30ff 	movne.w	r0, #4294967295
 8000310:	f000 b974 	b.w	80005fc <__aeabi_idiv0>
 8000314:	f1ad 0c08 	sub.w	ip, sp, #8
 8000318:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800031c:	f000 f806 	bl	800032c <__udivmoddi4>
 8000320:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000324:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000328:	b004      	add	sp, #16
 800032a:	4770      	bx	lr

0800032c <__udivmoddi4>:
 800032c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000330:	9d08      	ldr	r5, [sp, #32]
 8000332:	4604      	mov	r4, r0
 8000334:	468e      	mov	lr, r1
 8000336:	2b00      	cmp	r3, #0
 8000338:	d14d      	bne.n	80003d6 <__udivmoddi4+0xaa>
 800033a:	428a      	cmp	r2, r1
 800033c:	4694      	mov	ip, r2
 800033e:	d969      	bls.n	8000414 <__udivmoddi4+0xe8>
 8000340:	fab2 f282 	clz	r2, r2
 8000344:	b152      	cbz	r2, 800035c <__udivmoddi4+0x30>
 8000346:	fa01 f302 	lsl.w	r3, r1, r2
 800034a:	f1c2 0120 	rsb	r1, r2, #32
 800034e:	fa20 f101 	lsr.w	r1, r0, r1
 8000352:	fa0c fc02 	lsl.w	ip, ip, r2
 8000356:	ea41 0e03 	orr.w	lr, r1, r3
 800035a:	4094      	lsls	r4, r2
 800035c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000360:	0c21      	lsrs	r1, r4, #16
 8000362:	fbbe f6f8 	udiv	r6, lr, r8
 8000366:	fa1f f78c 	uxth.w	r7, ip
 800036a:	fb08 e316 	mls	r3, r8, r6, lr
 800036e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000372:	fb06 f107 	mul.w	r1, r6, r7
 8000376:	4299      	cmp	r1, r3
 8000378:	d90a      	bls.n	8000390 <__udivmoddi4+0x64>
 800037a:	eb1c 0303 	adds.w	r3, ip, r3
 800037e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000382:	f080 811f 	bcs.w	80005c4 <__udivmoddi4+0x298>
 8000386:	4299      	cmp	r1, r3
 8000388:	f240 811c 	bls.w	80005c4 <__udivmoddi4+0x298>
 800038c:	3e02      	subs	r6, #2
 800038e:	4463      	add	r3, ip
 8000390:	1a5b      	subs	r3, r3, r1
 8000392:	b2a4      	uxth	r4, r4
 8000394:	fbb3 f0f8 	udiv	r0, r3, r8
 8000398:	fb08 3310 	mls	r3, r8, r0, r3
 800039c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003a0:	fb00 f707 	mul.w	r7, r0, r7
 80003a4:	42a7      	cmp	r7, r4
 80003a6:	d90a      	bls.n	80003be <__udivmoddi4+0x92>
 80003a8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b0:	f080 810a 	bcs.w	80005c8 <__udivmoddi4+0x29c>
 80003b4:	42a7      	cmp	r7, r4
 80003b6:	f240 8107 	bls.w	80005c8 <__udivmoddi4+0x29c>
 80003ba:	4464      	add	r4, ip
 80003bc:	3802      	subs	r0, #2
 80003be:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003c2:	1be4      	subs	r4, r4, r7
 80003c4:	2600      	movs	r6, #0
 80003c6:	b11d      	cbz	r5, 80003d0 <__udivmoddi4+0xa4>
 80003c8:	40d4      	lsrs	r4, r2
 80003ca:	2300      	movs	r3, #0
 80003cc:	e9c5 4300 	strd	r4, r3, [r5]
 80003d0:	4631      	mov	r1, r6
 80003d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0xc2>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80ef 	beq.w	80005be <__udivmoddi4+0x292>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x160>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0xd4>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80f9 	bhi.w	80005f2 <__udivmoddi4+0x2c6>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0303 	sbc.w	r3, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	469e      	mov	lr, r3
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0e0      	beq.n	80003d0 <__udivmoddi4+0xa4>
 800040e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000412:	e7dd      	b.n	80003d0 <__udivmoddi4+0xa4>
 8000414:	b902      	cbnz	r2, 8000418 <__udivmoddi4+0xec>
 8000416:	deff      	udf	#255	; 0xff
 8000418:	fab2 f282 	clz	r2, r2
 800041c:	2a00      	cmp	r2, #0
 800041e:	f040 8092 	bne.w	8000546 <__udivmoddi4+0x21a>
 8000422:	eba1 010c 	sub.w	r1, r1, ip
 8000426:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	2601      	movs	r6, #1
 8000430:	0c20      	lsrs	r0, r4, #16
 8000432:	fbb1 f3f7 	udiv	r3, r1, r7
 8000436:	fb07 1113 	mls	r1, r7, r3, r1
 800043a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800043e:	fb0e f003 	mul.w	r0, lr, r3
 8000442:	4288      	cmp	r0, r1
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x12c>
 8000446:	eb1c 0101 	adds.w	r1, ip, r1
 800044a:	f103 38ff 	add.w	r8, r3, #4294967295
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x12a>
 8000450:	4288      	cmp	r0, r1
 8000452:	f200 80cb 	bhi.w	80005ec <__udivmoddi4+0x2c0>
 8000456:	4643      	mov	r3, r8
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000460:	fb07 1110 	mls	r1, r7, r0, r1
 8000464:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000468:	fb0e fe00 	mul.w	lr, lr, r0
 800046c:	45a6      	cmp	lr, r4
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x156>
 8000470:	eb1c 0404 	adds.w	r4, ip, r4
 8000474:	f100 31ff 	add.w	r1, r0, #4294967295
 8000478:	d202      	bcs.n	8000480 <__udivmoddi4+0x154>
 800047a:	45a6      	cmp	lr, r4
 800047c:	f200 80bb 	bhi.w	80005f6 <__udivmoddi4+0x2ca>
 8000480:	4608      	mov	r0, r1
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800048a:	e79c      	b.n	80003c6 <__udivmoddi4+0x9a>
 800048c:	f1c6 0720 	rsb	r7, r6, #32
 8000490:	40b3      	lsls	r3, r6
 8000492:	fa22 fc07 	lsr.w	ip, r2, r7
 8000496:	ea4c 0c03 	orr.w	ip, ip, r3
 800049a:	fa20 f407 	lsr.w	r4, r0, r7
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	431c      	orrs	r4, r3
 80004a4:	40f9      	lsrs	r1, r7
 80004a6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004aa:	fa00 f306 	lsl.w	r3, r0, r6
 80004ae:	fbb1 f8f9 	udiv	r8, r1, r9
 80004b2:	0c20      	lsrs	r0, r4, #16
 80004b4:	fa1f fe8c 	uxth.w	lr, ip
 80004b8:	fb09 1118 	mls	r1, r9, r8, r1
 80004bc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c0:	fb08 f00e 	mul.w	r0, r8, lr
 80004c4:	4288      	cmp	r0, r1
 80004c6:	fa02 f206 	lsl.w	r2, r2, r6
 80004ca:	d90b      	bls.n	80004e4 <__udivmoddi4+0x1b8>
 80004cc:	eb1c 0101 	adds.w	r1, ip, r1
 80004d0:	f108 3aff 	add.w	sl, r8, #4294967295
 80004d4:	f080 8088 	bcs.w	80005e8 <__udivmoddi4+0x2bc>
 80004d8:	4288      	cmp	r0, r1
 80004da:	f240 8085 	bls.w	80005e8 <__udivmoddi4+0x2bc>
 80004de:	f1a8 0802 	sub.w	r8, r8, #2
 80004e2:	4461      	add	r1, ip
 80004e4:	1a09      	subs	r1, r1, r0
 80004e6:	b2a4      	uxth	r4, r4
 80004e8:	fbb1 f0f9 	udiv	r0, r1, r9
 80004ec:	fb09 1110 	mls	r1, r9, r0, r1
 80004f0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004f4:	fb00 fe0e 	mul.w	lr, r0, lr
 80004f8:	458e      	cmp	lr, r1
 80004fa:	d908      	bls.n	800050e <__udivmoddi4+0x1e2>
 80004fc:	eb1c 0101 	adds.w	r1, ip, r1
 8000500:	f100 34ff 	add.w	r4, r0, #4294967295
 8000504:	d26c      	bcs.n	80005e0 <__udivmoddi4+0x2b4>
 8000506:	458e      	cmp	lr, r1
 8000508:	d96a      	bls.n	80005e0 <__udivmoddi4+0x2b4>
 800050a:	3802      	subs	r0, #2
 800050c:	4461      	add	r1, ip
 800050e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000512:	fba0 9402 	umull	r9, r4, r0, r2
 8000516:	eba1 010e 	sub.w	r1, r1, lr
 800051a:	42a1      	cmp	r1, r4
 800051c:	46c8      	mov	r8, r9
 800051e:	46a6      	mov	lr, r4
 8000520:	d356      	bcc.n	80005d0 <__udivmoddi4+0x2a4>
 8000522:	d053      	beq.n	80005cc <__udivmoddi4+0x2a0>
 8000524:	b15d      	cbz	r5, 800053e <__udivmoddi4+0x212>
 8000526:	ebb3 0208 	subs.w	r2, r3, r8
 800052a:	eb61 010e 	sbc.w	r1, r1, lr
 800052e:	fa01 f707 	lsl.w	r7, r1, r7
 8000532:	fa22 f306 	lsr.w	r3, r2, r6
 8000536:	40f1      	lsrs	r1, r6
 8000538:	431f      	orrs	r7, r3
 800053a:	e9c5 7100 	strd	r7, r1, [r5]
 800053e:	2600      	movs	r6, #0
 8000540:	4631      	mov	r1, r6
 8000542:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000546:	f1c2 0320 	rsb	r3, r2, #32
 800054a:	40d8      	lsrs	r0, r3
 800054c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000550:	fa21 f303 	lsr.w	r3, r1, r3
 8000554:	4091      	lsls	r1, r2
 8000556:	4301      	orrs	r1, r0
 8000558:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800055c:	fa1f fe8c 	uxth.w	lr, ip
 8000560:	fbb3 f0f7 	udiv	r0, r3, r7
 8000564:	fb07 3610 	mls	r6, r7, r0, r3
 8000568:	0c0b      	lsrs	r3, r1, #16
 800056a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800056e:	fb00 f60e 	mul.w	r6, r0, lr
 8000572:	429e      	cmp	r6, r3
 8000574:	fa04 f402 	lsl.w	r4, r4, r2
 8000578:	d908      	bls.n	800058c <__udivmoddi4+0x260>
 800057a:	eb1c 0303 	adds.w	r3, ip, r3
 800057e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000582:	d22f      	bcs.n	80005e4 <__udivmoddi4+0x2b8>
 8000584:	429e      	cmp	r6, r3
 8000586:	d92d      	bls.n	80005e4 <__udivmoddi4+0x2b8>
 8000588:	3802      	subs	r0, #2
 800058a:	4463      	add	r3, ip
 800058c:	1b9b      	subs	r3, r3, r6
 800058e:	b289      	uxth	r1, r1
 8000590:	fbb3 f6f7 	udiv	r6, r3, r7
 8000594:	fb07 3316 	mls	r3, r7, r6, r3
 8000598:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800059c:	fb06 f30e 	mul.w	r3, r6, lr
 80005a0:	428b      	cmp	r3, r1
 80005a2:	d908      	bls.n	80005b6 <__udivmoddi4+0x28a>
 80005a4:	eb1c 0101 	adds.w	r1, ip, r1
 80005a8:	f106 38ff 	add.w	r8, r6, #4294967295
 80005ac:	d216      	bcs.n	80005dc <__udivmoddi4+0x2b0>
 80005ae:	428b      	cmp	r3, r1
 80005b0:	d914      	bls.n	80005dc <__udivmoddi4+0x2b0>
 80005b2:	3e02      	subs	r6, #2
 80005b4:	4461      	add	r1, ip
 80005b6:	1ac9      	subs	r1, r1, r3
 80005b8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005bc:	e738      	b.n	8000430 <__udivmoddi4+0x104>
 80005be:	462e      	mov	r6, r5
 80005c0:	4628      	mov	r0, r5
 80005c2:	e705      	b.n	80003d0 <__udivmoddi4+0xa4>
 80005c4:	4606      	mov	r6, r0
 80005c6:	e6e3      	b.n	8000390 <__udivmoddi4+0x64>
 80005c8:	4618      	mov	r0, r3
 80005ca:	e6f8      	b.n	80003be <__udivmoddi4+0x92>
 80005cc:	454b      	cmp	r3, r9
 80005ce:	d2a9      	bcs.n	8000524 <__udivmoddi4+0x1f8>
 80005d0:	ebb9 0802 	subs.w	r8, r9, r2
 80005d4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005d8:	3801      	subs	r0, #1
 80005da:	e7a3      	b.n	8000524 <__udivmoddi4+0x1f8>
 80005dc:	4646      	mov	r6, r8
 80005de:	e7ea      	b.n	80005b6 <__udivmoddi4+0x28a>
 80005e0:	4620      	mov	r0, r4
 80005e2:	e794      	b.n	800050e <__udivmoddi4+0x1e2>
 80005e4:	4640      	mov	r0, r8
 80005e6:	e7d1      	b.n	800058c <__udivmoddi4+0x260>
 80005e8:	46d0      	mov	r8, sl
 80005ea:	e77b      	b.n	80004e4 <__udivmoddi4+0x1b8>
 80005ec:	3b02      	subs	r3, #2
 80005ee:	4461      	add	r1, ip
 80005f0:	e732      	b.n	8000458 <__udivmoddi4+0x12c>
 80005f2:	4630      	mov	r0, r6
 80005f4:	e709      	b.n	800040a <__udivmoddi4+0xde>
 80005f6:	4464      	add	r4, ip
 80005f8:	3802      	subs	r0, #2
 80005fa:	e742      	b.n	8000482 <__udivmoddi4+0x156>

080005fc <__aeabi_idiv0>:
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop

08000600 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000604:	f000 fb9e 	bl	8000d44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000608:	f000 f81a 	bl	8000640 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800060c:	f000 f8e2 	bl	80007d4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000610:	f000 f88c 	bl	800072c <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 8000614:	f000 f8d6 	bl	80007c4 <MX_USB_OTG_HS_USB_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  HAL_UART_Receive_IT(&huart3, data, 1);
 8000618:	2201      	movs	r2, #1
 800061a:	4906      	ldr	r1, [pc, #24]	; (8000634 <main+0x34>)
 800061c:	4806      	ldr	r0, [pc, #24]	; (8000638 <main+0x38>)
 800061e:	f004 f883 	bl	8004728 <HAL_UART_Receive_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  UART_SEND(&huart3, "Hello from STM32H7A3.\n");
 8000622:	4906      	ldr	r1, [pc, #24]	; (800063c <main+0x3c>)
 8000624:	4804      	ldr	r0, [pc, #16]	; (8000638 <main+0x38>)
 8000626:	f000 fa15 	bl	8000a54 <UART_SEND>
	  HAL_Delay(100);
 800062a:	2064      	movs	r0, #100	; 0x64
 800062c:	f000 fc1c 	bl	8000e68 <HAL_Delay>
	  UART_SEND(&huart3, "Hello from STM32H7A3.\n");
 8000630:	e7f7      	b.n	8000622 <main+0x22>
 8000632:	bf00      	nop
 8000634:	240000bc 	.word	0x240000bc
 8000638:	2400002c 	.word	0x2400002c
 800063c:	08006ea4 	.word	0x08006ea4

08000640 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b09c      	sub	sp, #112	; 0x70
 8000644:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000646:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800064a:	224c      	movs	r2, #76	; 0x4c
 800064c:	2100      	movs	r1, #0
 800064e:	4618      	mov	r0, r3
 8000650:	f006 fc14 	bl	8006e7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000654:	1d3b      	adds	r3, r7, #4
 8000656:	2220      	movs	r2, #32
 8000658:	2100      	movs	r1, #0
 800065a:	4618      	mov	r0, r3
 800065c:	f006 fc0e 	bl	8006e7c <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000660:	4b30      	ldr	r3, [pc, #192]	; (8000724 <SystemClock_Config+0xe4>)
 8000662:	f04f 32ff 	mov.w	r2, #4294967295
 8000666:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800066a:	2004      	movs	r0, #4
 800066c:	f001 fc5e 	bl	8001f2c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000670:	2300      	movs	r3, #0
 8000672:	603b      	str	r3, [r7, #0]
 8000674:	4b2c      	ldr	r3, [pc, #176]	; (8000728 <SystemClock_Config+0xe8>)
 8000676:	699b      	ldr	r3, [r3, #24]
 8000678:	4a2b      	ldr	r2, [pc, #172]	; (8000728 <SystemClock_Config+0xe8>)
 800067a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800067e:	6193      	str	r3, [r2, #24]
 8000680:	4b29      	ldr	r3, [pc, #164]	; (8000728 <SystemClock_Config+0xe8>)
 8000682:	699b      	ldr	r3, [r3, #24]
 8000684:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000688:	603b      	str	r3, [r7, #0]
 800068a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800068c:	bf00      	nop
 800068e:	4b26      	ldr	r3, [pc, #152]	; (8000728 <SystemClock_Config+0xe8>)
 8000690:	699b      	ldr	r3, [r3, #24]
 8000692:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000696:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800069a:	d1f8      	bne.n	800068e <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 800069c:	2321      	movs	r3, #33	; 0x21
 800069e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006a0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006a4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80006a6:	2301      	movs	r3, #1
 80006a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006aa:	2302      	movs	r3, #2
 80006ac:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ae:	2302      	movs	r3, #2
 80006b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006b2:	2301      	movs	r3, #1
 80006b4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 80006b6:	2318      	movs	r3, #24
 80006b8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80006ba:	2302      	movs	r3, #2
 80006bc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006be:	2304      	movs	r3, #4
 80006c0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006c2:	2302      	movs	r3, #2
 80006c4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80006c6:	230c      	movs	r3, #12
 80006c8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80006ca:	2300      	movs	r3, #0
 80006cc:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006ce:	2300      	movs	r3, #0
 80006d0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006d6:	4618      	mov	r0, r3
 80006d8:	f001 fc82 	bl	8001fe0 <HAL_RCC_OscConfig>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80006e2:	f000 f9cb 	bl	8000a7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e6:	233f      	movs	r3, #63	; 0x3f
 80006e8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ea:	2303      	movs	r3, #3
 80006ec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80006ee:	2300      	movs	r3, #0
 80006f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80006f2:	2300      	movs	r3, #0
 80006f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80006f6:	2300      	movs	r3, #0
 80006f8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80006fa:	2300      	movs	r3, #0
 80006fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80006fe:	2300      	movs	r3, #0
 8000700:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000702:	2300      	movs	r3, #0
 8000704:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000706:	1d3b      	adds	r3, r7, #4
 8000708:	2102      	movs	r1, #2
 800070a:	4618      	mov	r0, r3
 800070c:	f002 f86c 	bl	80027e8 <HAL_RCC_ClockConfig>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <SystemClock_Config+0xda>
  {
    Error_Handler();
 8000716:	f000 f9b1 	bl	8000a7c <Error_Handler>
  }
}
 800071a:	bf00      	nop
 800071c:	3770      	adds	r7, #112	; 0x70
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	58024400 	.word	0x58024400
 8000728:	58024800 	.word	0x58024800

0800072c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000730:	4b22      	ldr	r3, [pc, #136]	; (80007bc <MX_USART3_UART_Init+0x90>)
 8000732:	4a23      	ldr	r2, [pc, #140]	; (80007c0 <MX_USART3_UART_Init+0x94>)
 8000734:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000736:	4b21      	ldr	r3, [pc, #132]	; (80007bc <MX_USART3_UART_Init+0x90>)
 8000738:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800073c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800073e:	4b1f      	ldr	r3, [pc, #124]	; (80007bc <MX_USART3_UART_Init+0x90>)
 8000740:	2200      	movs	r2, #0
 8000742:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000744:	4b1d      	ldr	r3, [pc, #116]	; (80007bc <MX_USART3_UART_Init+0x90>)
 8000746:	2200      	movs	r2, #0
 8000748:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800074a:	4b1c      	ldr	r3, [pc, #112]	; (80007bc <MX_USART3_UART_Init+0x90>)
 800074c:	2200      	movs	r2, #0
 800074e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000750:	4b1a      	ldr	r3, [pc, #104]	; (80007bc <MX_USART3_UART_Init+0x90>)
 8000752:	220c      	movs	r2, #12
 8000754:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000756:	4b19      	ldr	r3, [pc, #100]	; (80007bc <MX_USART3_UART_Init+0x90>)
 8000758:	2200      	movs	r2, #0
 800075a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800075c:	4b17      	ldr	r3, [pc, #92]	; (80007bc <MX_USART3_UART_Init+0x90>)
 800075e:	2200      	movs	r2, #0
 8000760:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000762:	4b16      	ldr	r3, [pc, #88]	; (80007bc <MX_USART3_UART_Init+0x90>)
 8000764:	2200      	movs	r2, #0
 8000766:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000768:	4b14      	ldr	r3, [pc, #80]	; (80007bc <MX_USART3_UART_Init+0x90>)
 800076a:	2200      	movs	r2, #0
 800076c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800076e:	4b13      	ldr	r3, [pc, #76]	; (80007bc <MX_USART3_UART_Init+0x90>)
 8000770:	2200      	movs	r2, #0
 8000772:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000774:	4811      	ldr	r0, [pc, #68]	; (80007bc <MX_USART3_UART_Init+0x90>)
 8000776:	f003 fef1 	bl	800455c <HAL_UART_Init>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000780:	f000 f97c 	bl	8000a7c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000784:	2100      	movs	r1, #0
 8000786:	480d      	ldr	r0, [pc, #52]	; (80007bc <MX_USART3_UART_Init+0x90>)
 8000788:	f006 fa89 	bl	8006c9e <HAL_UARTEx_SetTxFifoThreshold>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000792:	f000 f973 	bl	8000a7c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000796:	2100      	movs	r1, #0
 8000798:	4808      	ldr	r0, [pc, #32]	; (80007bc <MX_USART3_UART_Init+0x90>)
 800079a:	f006 fabe 	bl	8006d1a <HAL_UARTEx_SetRxFifoThreshold>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80007a4:	f000 f96a 	bl	8000a7c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80007a8:	4804      	ldr	r0, [pc, #16]	; (80007bc <MX_USART3_UART_Init+0x90>)
 80007aa:	f006 fa3f 	bl	8006c2c <HAL_UARTEx_DisableFifoMode>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80007b4:	f000 f962 	bl	8000a7c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80007b8:	bf00      	nop
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	2400002c 	.word	0x2400002c
 80007c0:	40004800 	.word	0x40004800

080007c4 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 80007c8:	bf00      	nop
 80007ca:	46bd      	mov	sp, r7
 80007cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d0:	4770      	bx	lr
	...

080007d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b08e      	sub	sp, #56	; 0x38
 80007d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007de:	2200      	movs	r2, #0
 80007e0:	601a      	str	r2, [r3, #0]
 80007e2:	605a      	str	r2, [r3, #4]
 80007e4:	609a      	str	r2, [r3, #8]
 80007e6:	60da      	str	r2, [r3, #12]
 80007e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ea:	4b80      	ldr	r3, [pc, #512]	; (80009ec <MX_GPIO_Init+0x218>)
 80007ec:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007f0:	4a7e      	ldr	r2, [pc, #504]	; (80009ec <MX_GPIO_Init+0x218>)
 80007f2:	f043 0304 	orr.w	r3, r3, #4
 80007f6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80007fa:	4b7c      	ldr	r3, [pc, #496]	; (80009ec <MX_GPIO_Init+0x218>)
 80007fc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000800:	f003 0304 	and.w	r3, r3, #4
 8000804:	623b      	str	r3, [r7, #32]
 8000806:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000808:	4b78      	ldr	r3, [pc, #480]	; (80009ec <MX_GPIO_Init+0x218>)
 800080a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800080e:	4a77      	ldr	r2, [pc, #476]	; (80009ec <MX_GPIO_Init+0x218>)
 8000810:	f043 0320 	orr.w	r3, r3, #32
 8000814:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000818:	4b74      	ldr	r3, [pc, #464]	; (80009ec <MX_GPIO_Init+0x218>)
 800081a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800081e:	f003 0320 	and.w	r3, r3, #32
 8000822:	61fb      	str	r3, [r7, #28]
 8000824:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000826:	4b71      	ldr	r3, [pc, #452]	; (80009ec <MX_GPIO_Init+0x218>)
 8000828:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800082c:	4a6f      	ldr	r2, [pc, #444]	; (80009ec <MX_GPIO_Init+0x218>)
 800082e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000832:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000836:	4b6d      	ldr	r3, [pc, #436]	; (80009ec <MX_GPIO_Init+0x218>)
 8000838:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800083c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000840:	61bb      	str	r3, [r7, #24]
 8000842:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000844:	4b69      	ldr	r3, [pc, #420]	; (80009ec <MX_GPIO_Init+0x218>)
 8000846:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800084a:	4a68      	ldr	r2, [pc, #416]	; (80009ec <MX_GPIO_Init+0x218>)
 800084c:	f043 0302 	orr.w	r3, r3, #2
 8000850:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000854:	4b65      	ldr	r3, [pc, #404]	; (80009ec <MX_GPIO_Init+0x218>)
 8000856:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800085a:	f003 0302 	and.w	r3, r3, #2
 800085e:	617b      	str	r3, [r7, #20]
 8000860:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000862:	4b62      	ldr	r3, [pc, #392]	; (80009ec <MX_GPIO_Init+0x218>)
 8000864:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000868:	4a60      	ldr	r2, [pc, #384]	; (80009ec <MX_GPIO_Init+0x218>)
 800086a:	f043 0308 	orr.w	r3, r3, #8
 800086e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000872:	4b5e      	ldr	r3, [pc, #376]	; (80009ec <MX_GPIO_Init+0x218>)
 8000874:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000878:	f003 0308 	and.w	r3, r3, #8
 800087c:	613b      	str	r3, [r7, #16]
 800087e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000880:	4b5a      	ldr	r3, [pc, #360]	; (80009ec <MX_GPIO_Init+0x218>)
 8000882:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000886:	4a59      	ldr	r2, [pc, #356]	; (80009ec <MX_GPIO_Init+0x218>)
 8000888:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800088c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000890:	4b56      	ldr	r3, [pc, #344]	; (80009ec <MX_GPIO_Init+0x218>)
 8000892:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000896:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800089a:	60fb      	str	r3, [r7, #12]
 800089c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800089e:	4b53      	ldr	r3, [pc, #332]	; (80009ec <MX_GPIO_Init+0x218>)
 80008a0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008a4:	4a51      	ldr	r2, [pc, #324]	; (80009ec <MX_GPIO_Init+0x218>)
 80008a6:	f043 0301 	orr.w	r3, r3, #1
 80008aa:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80008ae:	4b4f      	ldr	r3, [pc, #316]	; (80009ec <MX_GPIO_Init+0x218>)
 80008b0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008b4:	f003 0301 	and.w	r3, r3, #1
 80008b8:	60bb      	str	r3, [r7, #8]
 80008ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008bc:	4b4b      	ldr	r3, [pc, #300]	; (80009ec <MX_GPIO_Init+0x218>)
 80008be:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008c2:	4a4a      	ldr	r2, [pc, #296]	; (80009ec <MX_GPIO_Init+0x218>)
 80008c4:	f043 0310 	orr.w	r3, r3, #16
 80008c8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80008cc:	4b47      	ldr	r3, [pc, #284]	; (80009ec <MX_GPIO_Init+0x218>)
 80008ce:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008d2:	f003 0310 	and.w	r3, r3, #16
 80008d6:	607b      	str	r3, [r7, #4]
 80008d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80008da:	2200      	movs	r2, #0
 80008dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008e0:	4843      	ldr	r0, [pc, #268]	; (80009f0 <MX_GPIO_Init+0x21c>)
 80008e2:	f001 fb09 	bl	8001ef8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 80008e6:	2200      	movs	r2, #0
 80008e8:	f244 0101 	movw	r1, #16385	; 0x4001
 80008ec:	4841      	ldr	r0, [pc, #260]	; (80009f4 <MX_GPIO_Init+0x220>)
 80008ee:	f001 fb03 	bl	8001ef8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008f2:	2200      	movs	r2, #0
 80008f4:	2102      	movs	r1, #2
 80008f6:	4840      	ldr	r0, [pc, #256]	; (80009f8 <MX_GPIO_Init+0x224>)
 80008f8:	f001 fafe 	bl	8001ef8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000900:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000902:	2300      	movs	r3, #0
 8000904:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000906:	2300      	movs	r3, #0
 8000908:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800090a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800090e:	4619      	mov	r1, r3
 8000910:	483a      	ldr	r0, [pc, #232]	; (80009fc <MX_GPIO_Init+0x228>)
 8000912:	f001 f941 	bl	8001b98 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000916:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800091a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800091c:	2301      	movs	r3, #1
 800091e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000920:	2300      	movs	r3, #0
 8000922:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000924:	2300      	movs	r3, #0
 8000926:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000928:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800092c:	4619      	mov	r1, r3
 800092e:	4830      	ldr	r0, [pc, #192]	; (80009f0 <MX_GPIO_Init+0x21c>)
 8000930:	f001 f932 	bl	8001b98 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000934:	f244 0301 	movw	r3, #16385	; 0x4001
 8000938:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800093a:	2301      	movs	r3, #1
 800093c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093e:	2300      	movs	r3, #0
 8000940:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000942:	2300      	movs	r3, #0
 8000944:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000946:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800094a:	4619      	mov	r1, r3
 800094c:	4829      	ldr	r0, [pc, #164]	; (80009f4 <MX_GPIO_Init+0x220>)
 800094e:	f001 f923 	bl	8001b98 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000952:	2380      	movs	r3, #128	; 0x80
 8000954:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000956:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800095a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095c:	2300      	movs	r3, #0
 800095e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000960:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000964:	4619      	mov	r1, r3
 8000966:	4826      	ldr	r0, [pc, #152]	; (8000a00 <MX_GPIO_Init+0x22c>)
 8000968:	f001 f916 	bl	8001b98 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 800096c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000970:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000972:	2300      	movs	r3, #0
 8000974:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000976:	2300      	movs	r3, #0
 8000978:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800097a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800097e:	4619      	mov	r1, r3
 8000980:	4820      	ldr	r0, [pc, #128]	; (8000a04 <MX_GPIO_Init+0x230>)
 8000982:	f001 f909 	bl	8001b98 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000986:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800098a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098c:	2302      	movs	r3, #2
 800098e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000990:	2300      	movs	r3, #0
 8000992:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000994:	2300      	movs	r3, #0
 8000996:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000998:	230a      	movs	r3, #10
 800099a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 800099c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009a0:	4619      	mov	r1, r3
 80009a2:	4818      	ldr	r0, [pc, #96]	; (8000a04 <MX_GPIO_Init+0x230>)
 80009a4:	f001 f8f8 	bl	8001b98 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 80009a8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80009ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ae:	2302      	movs	r3, #2
 80009b0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b2:	2300      	movs	r3, #0
 80009b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b6:	2300      	movs	r3, #0
 80009b8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009be:	4619      	mov	r1, r3
 80009c0:	4810      	ldr	r0, [pc, #64]	; (8000a04 <MX_GPIO_Init+0x230>)
 80009c2:	f001 f8e9 	bl	8001b98 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80009c6:	2302      	movs	r3, #2
 80009c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ca:	2301      	movs	r3, #1
 80009cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ce:	2300      	movs	r3, #0
 80009d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d2:	2300      	movs	r3, #0
 80009d4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80009d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009da:	4619      	mov	r1, r3
 80009dc:	4806      	ldr	r0, [pc, #24]	; (80009f8 <MX_GPIO_Init+0x224>)
 80009de:	f001 f8db 	bl	8001b98 <HAL_GPIO_Init>

}
 80009e2:	bf00      	nop
 80009e4:	3738      	adds	r7, #56	; 0x38
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	58024400 	.word	0x58024400
 80009f0:	58021400 	.word	0x58021400
 80009f4:	58020400 	.word	0x58020400
 80009f8:	58021000 	.word	0x58021000
 80009fc:	58020800 	.word	0x58020800
 8000a00:	58021800 	.word	0x58021800
 8000a04:	58020000 	.word	0x58020000

08000a08 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
	  if (data[0] == 0b110001)
 8000a10:	4b0d      	ldr	r3, [pc, #52]	; (8000a48 <HAL_UART_RxCpltCallback+0x40>)
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	2b31      	cmp	r3, #49	; 0x31
 8000a16:	d105      	bne.n	8000a24 <HAL_UART_RxCpltCallback+0x1c>
	  {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, SET);
 8000a18:	2201      	movs	r2, #1
 8000a1a:	2101      	movs	r1, #1
 8000a1c:	480b      	ldr	r0, [pc, #44]	; (8000a4c <HAL_UART_RxCpltCallback+0x44>)
 8000a1e:	f001 fa6b 	bl	8001ef8 <HAL_GPIO_WritePin>
 8000a22:	e008      	b.n	8000a36 <HAL_UART_RxCpltCallback+0x2e>
	  }
	  else if(data[0] == 0b110000)
 8000a24:	4b08      	ldr	r3, [pc, #32]	; (8000a48 <HAL_UART_RxCpltCallback+0x40>)
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	2b30      	cmp	r3, #48	; 0x30
 8000a2a:	d104      	bne.n	8000a36 <HAL_UART_RxCpltCallback+0x2e>
	  {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, RESET);
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	2101      	movs	r1, #1
 8000a30:	4806      	ldr	r0, [pc, #24]	; (8000a4c <HAL_UART_RxCpltCallback+0x44>)
 8000a32:	f001 fa61 	bl	8001ef8 <HAL_GPIO_WritePin>
	  }
	  HAL_UART_Receive_IT(&huart3, data, 1);	//restart the rcv
 8000a36:	2201      	movs	r2, #1
 8000a38:	4903      	ldr	r1, [pc, #12]	; (8000a48 <HAL_UART_RxCpltCallback+0x40>)
 8000a3a:	4805      	ldr	r0, [pc, #20]	; (8000a50 <HAL_UART_RxCpltCallback+0x48>)
 8000a3c:	f003 fe74 	bl	8004728 <HAL_UART_Receive_IT>
}
 8000a40:	bf00      	nop
 8000a42:	3708      	adds	r7, #8
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	240000bc 	.word	0x240000bc
 8000a4c:	58020400 	.word	0x58020400
 8000a50:	2400002c 	.word	0x2400002c

08000a54 <UART_SEND>:


void UART_SEND(UART_HandleTypeDef* huart, char buffer[])
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
 8000a5c:	6039      	str	r1, [r7, #0]

	HAL_UART_Transmit(huart, buffer, strlen(buffer), HAL_MAX_DELAY);
 8000a5e:	6838      	ldr	r0, [r7, #0]
 8000a60:	f7ff fc44 	bl	80002ec <strlen>
 8000a64:	4603      	mov	r3, r0
 8000a66:	b29a      	uxth	r2, r3
 8000a68:	f04f 33ff 	mov.w	r3, #4294967295
 8000a6c:	6839      	ldr	r1, [r7, #0]
 8000a6e:	6878      	ldr	r0, [r7, #4]
 8000a70:	f003 fdc4 	bl	80045fc <HAL_UART_Transmit>
}
 8000a74:	bf00      	nop
 8000a76:	3708      	adds	r7, #8
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}

08000a7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a80:	b672      	cpsid	i
}
 8000a82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a84:	e7fe      	b.n	8000a84 <Error_Handler+0x8>
	...

08000a88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a8e:	4b0a      	ldr	r3, [pc, #40]	; (8000ab8 <HAL_MspInit+0x30>)
 8000a90:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000a94:	4a08      	ldr	r2, [pc, #32]	; (8000ab8 <HAL_MspInit+0x30>)
 8000a96:	f043 0302 	orr.w	r3, r3, #2
 8000a9a:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000a9e:	4b06      	ldr	r3, [pc, #24]	; (8000ab8 <HAL_MspInit+0x30>)
 8000aa0:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000aa4:	f003 0302 	and.w	r3, r3, #2
 8000aa8:	607b      	str	r3, [r7, #4]
 8000aaa:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aac:	bf00      	nop
 8000aae:	370c      	adds	r7, #12
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr
 8000ab8:	58024400 	.word	0x58024400

08000abc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b0b8      	sub	sp, #224	; 0xe0
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000ac8:	2200      	movs	r2, #0
 8000aca:	601a      	str	r2, [r3, #0]
 8000acc:	605a      	str	r2, [r3, #4]
 8000ace:	609a      	str	r2, [r3, #8]
 8000ad0:	60da      	str	r2, [r3, #12]
 8000ad2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ad4:	f107 0314 	add.w	r3, r7, #20
 8000ad8:	22b8      	movs	r2, #184	; 0xb8
 8000ada:	2100      	movs	r1, #0
 8000adc:	4618      	mov	r0, r3
 8000ade:	f006 f9cd 	bl	8006e7c <memset>
  if(huart->Instance==USART3)
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	4a29      	ldr	r2, [pc, #164]	; (8000b8c <HAL_UART_MspInit+0xd0>)
 8000ae8:	4293      	cmp	r3, r2
 8000aea:	d14a      	bne.n	8000b82 <HAL_UART_MspInit+0xc6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000aec:	2302      	movs	r3, #2
 8000aee:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000af0:	2300      	movs	r3, #0
 8000af2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000af6:	f107 0314 	add.w	r3, r7, #20
 8000afa:	4618      	mov	r0, r3
 8000afc:	f002 fa00 	bl	8002f00 <HAL_RCCEx_PeriphCLKConfig>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000b06:	f7ff ffb9 	bl	8000a7c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b0a:	4b21      	ldr	r3, [pc, #132]	; (8000b90 <HAL_UART_MspInit+0xd4>)
 8000b0c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000b10:	4a1f      	ldr	r2, [pc, #124]	; (8000b90 <HAL_UART_MspInit+0xd4>)
 8000b12:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b16:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000b1a:	4b1d      	ldr	r3, [pc, #116]	; (8000b90 <HAL_UART_MspInit+0xd4>)
 8000b1c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000b20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b24:	613b      	str	r3, [r7, #16]
 8000b26:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b28:	4b19      	ldr	r3, [pc, #100]	; (8000b90 <HAL_UART_MspInit+0xd4>)
 8000b2a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b2e:	4a18      	ldr	r2, [pc, #96]	; (8000b90 <HAL_UART_MspInit+0xd4>)
 8000b30:	f043 0308 	orr.w	r3, r3, #8
 8000b34:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b38:	4b15      	ldr	r3, [pc, #84]	; (8000b90 <HAL_UART_MspInit+0xd4>)
 8000b3a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b3e:	f003 0308 	and.w	r3, r3, #8
 8000b42:	60fb      	str	r3, [r7, #12]
 8000b44:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000b46:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b4a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4e:	2302      	movs	r3, #2
 8000b50:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b54:	2300      	movs	r3, #0
 8000b56:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b60:	2307      	movs	r3, #7
 8000b62:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b66:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	4809      	ldr	r0, [pc, #36]	; (8000b94 <HAL_UART_MspInit+0xd8>)
 8000b6e:	f001 f813 	bl	8001b98 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000b72:	2200      	movs	r2, #0
 8000b74:	2100      	movs	r1, #0
 8000b76:	2027      	movs	r0, #39	; 0x27
 8000b78:	f000 fa75 	bl	8001066 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000b7c:	2027      	movs	r0, #39	; 0x27
 8000b7e:	f000 fa8c 	bl	800109a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000b82:	bf00      	nop
 8000b84:	37e0      	adds	r7, #224	; 0xe0
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	40004800 	.word	0x40004800
 8000b90:	58024400 	.word	0x58024400
 8000b94:	58020c00 	.word	0x58020c00

08000b98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b9c:	e7fe      	b.n	8000b9c <NMI_Handler+0x4>

08000b9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b9e:	b480      	push	{r7}
 8000ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ba2:	e7fe      	b.n	8000ba2 <HardFault_Handler+0x4>

08000ba4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ba8:	e7fe      	b.n	8000ba8 <MemManage_Handler+0x4>

08000baa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000baa:	b480      	push	{r7}
 8000bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bae:	e7fe      	b.n	8000bae <BusFault_Handler+0x4>

08000bb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bb4:	e7fe      	b.n	8000bb4 <UsageFault_Handler+0x4>

08000bb6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bb6:	b480      	push	{r7}
 8000bb8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bba:	bf00      	nop
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr

08000bc4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bc8:	bf00      	nop
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr

08000bd2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bd2:	b480      	push	{r7}
 8000bd4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bd6:	bf00      	nop
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr

08000be0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000be4:	f000 f920 	bl	8000e28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000be8:	bf00      	nop
 8000bea:	bd80      	pop	{r7, pc}

08000bec <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000bf0:	4802      	ldr	r0, [pc, #8]	; (8000bfc <USART3_IRQHandler+0x10>)
 8000bf2:	f003 fdef 	bl	80047d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000bf6:	bf00      	nop
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	2400002c 	.word	0x2400002c

08000c00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000c04:	4b32      	ldr	r3, [pc, #200]	; (8000cd0 <SystemInit+0xd0>)
 8000c06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c0a:	4a31      	ldr	r2, [pc, #196]	; (8000cd0 <SystemInit+0xd0>)
 8000c0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000c14:	4b2f      	ldr	r3, [pc, #188]	; (8000cd4 <SystemInit+0xd4>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	f003 030f 	and.w	r3, r3, #15
 8000c1c:	2b02      	cmp	r3, #2
 8000c1e:	d807      	bhi.n	8000c30 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000c20:	4b2c      	ldr	r3, [pc, #176]	; (8000cd4 <SystemInit+0xd4>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	f023 030f 	bic.w	r3, r3, #15
 8000c28:	4a2a      	ldr	r2, [pc, #168]	; (8000cd4 <SystemInit+0xd4>)
 8000c2a:	f043 0303 	orr.w	r3, r3, #3
 8000c2e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000c30:	4b29      	ldr	r3, [pc, #164]	; (8000cd8 <SystemInit+0xd8>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a28      	ldr	r2, [pc, #160]	; (8000cd8 <SystemInit+0xd8>)
 8000c36:	f043 0301 	orr.w	r3, r3, #1
 8000c3a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000c3c:	4b26      	ldr	r3, [pc, #152]	; (8000cd8 <SystemInit+0xd8>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000c42:	4b25      	ldr	r3, [pc, #148]	; (8000cd8 <SystemInit+0xd8>)
 8000c44:	681a      	ldr	r2, [r3, #0]
 8000c46:	4924      	ldr	r1, [pc, #144]	; (8000cd8 <SystemInit+0xd8>)
 8000c48:	4b24      	ldr	r3, [pc, #144]	; (8000cdc <SystemInit+0xdc>)
 8000c4a:	4013      	ands	r3, r2
 8000c4c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000c4e:	4b21      	ldr	r3, [pc, #132]	; (8000cd4 <SystemInit+0xd4>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	f003 030c 	and.w	r3, r3, #12
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d007      	beq.n	8000c6a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000c5a:	4b1e      	ldr	r3, [pc, #120]	; (8000cd4 <SystemInit+0xd4>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	f023 030f 	bic.w	r3, r3, #15
 8000c62:	4a1c      	ldr	r2, [pc, #112]	; (8000cd4 <SystemInit+0xd4>)
 8000c64:	f043 0303 	orr.w	r3, r3, #3
 8000c68:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8000c6a:	4b1b      	ldr	r3, [pc, #108]	; (8000cd8 <SystemInit+0xd8>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8000c70:	4b19      	ldr	r3, [pc, #100]	; (8000cd8 <SystemInit+0xd8>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8000c76:	4b18      	ldr	r3, [pc, #96]	; (8000cd8 <SystemInit+0xd8>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000c7c:	4b16      	ldr	r3, [pc, #88]	; (8000cd8 <SystemInit+0xd8>)
 8000c7e:	4a18      	ldr	r2, [pc, #96]	; (8000ce0 <SystemInit+0xe0>)
 8000c80:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000c82:	4b15      	ldr	r3, [pc, #84]	; (8000cd8 <SystemInit+0xd8>)
 8000c84:	4a17      	ldr	r2, [pc, #92]	; (8000ce4 <SystemInit+0xe4>)
 8000c86:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000c88:	4b13      	ldr	r3, [pc, #76]	; (8000cd8 <SystemInit+0xd8>)
 8000c8a:	4a17      	ldr	r2, [pc, #92]	; (8000ce8 <SystemInit+0xe8>)
 8000c8c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000c8e:	4b12      	ldr	r3, [pc, #72]	; (8000cd8 <SystemInit+0xd8>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000c94:	4b10      	ldr	r3, [pc, #64]	; (8000cd8 <SystemInit+0xd8>)
 8000c96:	4a14      	ldr	r2, [pc, #80]	; (8000ce8 <SystemInit+0xe8>)
 8000c98:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000c9a:	4b0f      	ldr	r3, [pc, #60]	; (8000cd8 <SystemInit+0xd8>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000ca0:	4b0d      	ldr	r3, [pc, #52]	; (8000cd8 <SystemInit+0xd8>)
 8000ca2:	4a11      	ldr	r2, [pc, #68]	; (8000ce8 <SystemInit+0xe8>)
 8000ca4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000ca6:	4b0c      	ldr	r3, [pc, #48]	; (8000cd8 <SystemInit+0xd8>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000cac:	4b0a      	ldr	r3, [pc, #40]	; (8000cd8 <SystemInit+0xd8>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a09      	ldr	r2, [pc, #36]	; (8000cd8 <SystemInit+0xd8>)
 8000cb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cb6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000cb8:	4b07      	ldr	r3, [pc, #28]	; (8000cd8 <SystemInit+0xd8>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000cbe:	4b0b      	ldr	r3, [pc, #44]	; (8000cec <SystemInit+0xec>)
 8000cc0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000cc4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000cc6:	bf00      	nop
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr
 8000cd0:	e000ed00 	.word	0xe000ed00
 8000cd4:	52002000 	.word	0x52002000
 8000cd8:	58024400 	.word	0x58024400
 8000cdc:	eaf6ed7f 	.word	0xeaf6ed7f
 8000ce0:	02020200 	.word	0x02020200
 8000ce4:	01ff0000 	.word	0x01ff0000
 8000ce8:	01010280 	.word	0x01010280
 8000cec:	52004000 	.word	0x52004000

08000cf0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000cf0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d28 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000cf4:	f7ff ff84 	bl	8000c00 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cf8:	480c      	ldr	r0, [pc, #48]	; (8000d2c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000cfa:	490d      	ldr	r1, [pc, #52]	; (8000d30 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000cfc:	4a0d      	ldr	r2, [pc, #52]	; (8000d34 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000cfe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d00:	e002      	b.n	8000d08 <LoopCopyDataInit>

08000d02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d06:	3304      	adds	r3, #4

08000d08 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8000d08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d0c:	d3f9      	bcc.n	8000d02 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d0e:	4a0a      	ldr	r2, [pc, #40]	; (8000d38 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d10:	4c0a      	ldr	r4, [pc, #40]	; (8000d3c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d14:	e001      	b.n	8000d1a <LoopFillZerobss>

08000d16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d18:	3204      	adds	r2, #4

08000d1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d1c:	d3fb      	bcc.n	8000d16 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000d1e:	f006 f889 	bl	8006e34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d22:	f7ff fc6d 	bl	8000600 <main>
  bx  lr
 8000d26:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d28:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8000d2c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000d30:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000d34:	08006f04 	.word	0x08006f04
  ldr r2, =_sbss
 8000d38:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000d3c:	240000c4 	.word	0x240000c4

08000d40 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d40:	e7fe      	b.n	8000d40 <ADC_IRQHandler>
	...

08000d44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d4a:	2003      	movs	r0, #3
 8000d4c:	f000 f980 	bl	8001050 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8000d50:	f001 ff00 	bl	8002b54 <HAL_RCC_GetSysClockFreq>
 8000d54:	4602      	mov	r2, r0
 8000d56:	4b15      	ldr	r3, [pc, #84]	; (8000dac <HAL_Init+0x68>)
 8000d58:	699b      	ldr	r3, [r3, #24]
 8000d5a:	0a1b      	lsrs	r3, r3, #8
 8000d5c:	f003 030f 	and.w	r3, r3, #15
 8000d60:	4913      	ldr	r1, [pc, #76]	; (8000db0 <HAL_Init+0x6c>)
 8000d62:	5ccb      	ldrb	r3, [r1, r3]
 8000d64:	f003 031f 	and.w	r3, r3, #31
 8000d68:	fa22 f303 	lsr.w	r3, r2, r3
 8000d6c:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8000d6e:	4b0f      	ldr	r3, [pc, #60]	; (8000dac <HAL_Init+0x68>)
 8000d70:	699b      	ldr	r3, [r3, #24]
 8000d72:	f003 030f 	and.w	r3, r3, #15
 8000d76:	4a0e      	ldr	r2, [pc, #56]	; (8000db0 <HAL_Init+0x6c>)
 8000d78:	5cd3      	ldrb	r3, [r2, r3]
 8000d7a:	f003 031f 	and.w	r3, r3, #31
 8000d7e:	687a      	ldr	r2, [r7, #4]
 8000d80:	fa22 f303 	lsr.w	r3, r2, r3
 8000d84:	4a0b      	ldr	r2, [pc, #44]	; (8000db4 <HAL_Init+0x70>)
 8000d86:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000d88:	4a0b      	ldr	r2, [pc, #44]	; (8000db8 <HAL_Init+0x74>)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d8e:	2000      	movs	r0, #0
 8000d90:	f000 f814 	bl	8000dbc <HAL_InitTick>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	e002      	b.n	8000da4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000d9e:	f7ff fe73 	bl	8000a88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000da2:	2300      	movs	r3, #0
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	3708      	adds	r7, #8
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	58024400 	.word	0x58024400
 8000db0:	08006ebc 	.word	0x08006ebc
 8000db4:	24000004 	.word	0x24000004
 8000db8:	24000000 	.word	0x24000000

08000dbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000dc4:	4b15      	ldr	r3, [pc, #84]	; (8000e1c <HAL_InitTick+0x60>)
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d101      	bne.n	8000dd0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000dcc:	2301      	movs	r3, #1
 8000dce:	e021      	b.n	8000e14 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000dd0:	4b13      	ldr	r3, [pc, #76]	; (8000e20 <HAL_InitTick+0x64>)
 8000dd2:	681a      	ldr	r2, [r3, #0]
 8000dd4:	4b11      	ldr	r3, [pc, #68]	; (8000e1c <HAL_InitTick+0x60>)
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	4619      	mov	r1, r3
 8000dda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dde:	fbb3 f3f1 	udiv	r3, r3, r1
 8000de2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000de6:	4618      	mov	r0, r3
 8000de8:	f000 f965 	bl	80010b6 <HAL_SYSTICK_Config>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000df2:	2301      	movs	r3, #1
 8000df4:	e00e      	b.n	8000e14 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	2b0f      	cmp	r3, #15
 8000dfa:	d80a      	bhi.n	8000e12 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	6879      	ldr	r1, [r7, #4]
 8000e00:	f04f 30ff 	mov.w	r0, #4294967295
 8000e04:	f000 f92f 	bl	8001066 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e08:	4a06      	ldr	r2, [pc, #24]	; (8000e24 <HAL_InitTick+0x68>)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	e000      	b.n	8000e14 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000e12:	2301      	movs	r3, #1
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	3708      	adds	r7, #8
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	2400000c 	.word	0x2400000c
 8000e20:	24000000 	.word	0x24000000
 8000e24:	24000008 	.word	0x24000008

08000e28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e2c:	4b06      	ldr	r3, [pc, #24]	; (8000e48 <HAL_IncTick+0x20>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	461a      	mov	r2, r3
 8000e32:	4b06      	ldr	r3, [pc, #24]	; (8000e4c <HAL_IncTick+0x24>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4413      	add	r3, r2
 8000e38:	4a04      	ldr	r2, [pc, #16]	; (8000e4c <HAL_IncTick+0x24>)
 8000e3a:	6013      	str	r3, [r2, #0]
}
 8000e3c:	bf00      	nop
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	2400000c 	.word	0x2400000c
 8000e4c:	240000c0 	.word	0x240000c0

08000e50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  return uwTick;
 8000e54:	4b03      	ldr	r3, [pc, #12]	; (8000e64 <HAL_GetTick+0x14>)
 8000e56:	681b      	ldr	r3, [r3, #0]
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	240000c0 	.word	0x240000c0

08000e68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b084      	sub	sp, #16
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e70:	f7ff ffee 	bl	8000e50 <HAL_GetTick>
 8000e74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e80:	d005      	beq.n	8000e8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e82:	4b0a      	ldr	r3, [pc, #40]	; (8000eac <HAL_Delay+0x44>)
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	461a      	mov	r2, r3
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	4413      	add	r3, r2
 8000e8c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e8e:	bf00      	nop
 8000e90:	f7ff ffde 	bl	8000e50 <HAL_GetTick>
 8000e94:	4602      	mov	r2, r0
 8000e96:	68bb      	ldr	r3, [r7, #8]
 8000e98:	1ad3      	subs	r3, r2, r3
 8000e9a:	68fa      	ldr	r2, [r7, #12]
 8000e9c:	429a      	cmp	r2, r3
 8000e9e:	d8f7      	bhi.n	8000e90 <HAL_Delay+0x28>
  {
  }
}
 8000ea0:	bf00      	nop
 8000ea2:	bf00      	nop
 8000ea4:	3710      	adds	r7, #16
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	2400000c 	.word	0x2400000c

08000eb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b085      	sub	sp, #20
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	f003 0307 	and.w	r3, r3, #7
 8000ebe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ec0:	4b0b      	ldr	r3, [pc, #44]	; (8000ef0 <__NVIC_SetPriorityGrouping+0x40>)
 8000ec2:	68db      	ldr	r3, [r3, #12]
 8000ec4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ec6:	68ba      	ldr	r2, [r7, #8]
 8000ec8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ecc:	4013      	ands	r3, r2
 8000ece:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ed4:	68bb      	ldr	r3, [r7, #8]
 8000ed6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000ed8:	4b06      	ldr	r3, [pc, #24]	; (8000ef4 <__NVIC_SetPriorityGrouping+0x44>)
 8000eda:	4313      	orrs	r3, r2
 8000edc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ede:	4a04      	ldr	r2, [pc, #16]	; (8000ef0 <__NVIC_SetPriorityGrouping+0x40>)
 8000ee0:	68bb      	ldr	r3, [r7, #8]
 8000ee2:	60d3      	str	r3, [r2, #12]
}
 8000ee4:	bf00      	nop
 8000ee6:	3714      	adds	r7, #20
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr
 8000ef0:	e000ed00 	.word	0xe000ed00
 8000ef4:	05fa0000 	.word	0x05fa0000

08000ef8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000efc:	4b04      	ldr	r3, [pc, #16]	; (8000f10 <__NVIC_GetPriorityGrouping+0x18>)
 8000efe:	68db      	ldr	r3, [r3, #12]
 8000f00:	0a1b      	lsrs	r3, r3, #8
 8000f02:	f003 0307 	and.w	r3, r3, #7
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr
 8000f10:	e000ed00 	.word	0xe000ed00

08000f14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000f1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	db0b      	blt.n	8000f3e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f26:	88fb      	ldrh	r3, [r7, #6]
 8000f28:	f003 021f 	and.w	r2, r3, #31
 8000f2c:	4907      	ldr	r1, [pc, #28]	; (8000f4c <__NVIC_EnableIRQ+0x38>)
 8000f2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f32:	095b      	lsrs	r3, r3, #5
 8000f34:	2001      	movs	r0, #1
 8000f36:	fa00 f202 	lsl.w	r2, r0, r2
 8000f3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f3e:	bf00      	nop
 8000f40:	370c      	adds	r7, #12
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	e000e100 	.word	0xe000e100

08000f50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	4603      	mov	r3, r0
 8000f58:	6039      	str	r1, [r7, #0]
 8000f5a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000f5c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	db0a      	blt.n	8000f7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	b2da      	uxtb	r2, r3
 8000f68:	490c      	ldr	r1, [pc, #48]	; (8000f9c <__NVIC_SetPriority+0x4c>)
 8000f6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f6e:	0112      	lsls	r2, r2, #4
 8000f70:	b2d2      	uxtb	r2, r2
 8000f72:	440b      	add	r3, r1
 8000f74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f78:	e00a      	b.n	8000f90 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	b2da      	uxtb	r2, r3
 8000f7e:	4908      	ldr	r1, [pc, #32]	; (8000fa0 <__NVIC_SetPriority+0x50>)
 8000f80:	88fb      	ldrh	r3, [r7, #6]
 8000f82:	f003 030f 	and.w	r3, r3, #15
 8000f86:	3b04      	subs	r3, #4
 8000f88:	0112      	lsls	r2, r2, #4
 8000f8a:	b2d2      	uxtb	r2, r2
 8000f8c:	440b      	add	r3, r1
 8000f8e:	761a      	strb	r2, [r3, #24]
}
 8000f90:	bf00      	nop
 8000f92:	370c      	adds	r7, #12
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr
 8000f9c:	e000e100 	.word	0xe000e100
 8000fa0:	e000ed00 	.word	0xe000ed00

08000fa4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b089      	sub	sp, #36	; 0x24
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	60f8      	str	r0, [r7, #12]
 8000fac:	60b9      	str	r1, [r7, #8]
 8000fae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	f003 0307 	and.w	r3, r3, #7
 8000fb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fb8:	69fb      	ldr	r3, [r7, #28]
 8000fba:	f1c3 0307 	rsb	r3, r3, #7
 8000fbe:	2b04      	cmp	r3, #4
 8000fc0:	bf28      	it	cs
 8000fc2:	2304      	movcs	r3, #4
 8000fc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	3304      	adds	r3, #4
 8000fca:	2b06      	cmp	r3, #6
 8000fcc:	d902      	bls.n	8000fd4 <NVIC_EncodePriority+0x30>
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	3b03      	subs	r3, #3
 8000fd2:	e000      	b.n	8000fd6 <NVIC_EncodePriority+0x32>
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fd8:	f04f 32ff 	mov.w	r2, #4294967295
 8000fdc:	69bb      	ldr	r3, [r7, #24]
 8000fde:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe2:	43da      	mvns	r2, r3
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	401a      	ands	r2, r3
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fec:	f04f 31ff 	mov.w	r1, #4294967295
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ff6:	43d9      	mvns	r1, r3
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ffc:	4313      	orrs	r3, r2
         );
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	3724      	adds	r7, #36	; 0x24
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
	...

0800100c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	3b01      	subs	r3, #1
 8001018:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800101c:	d301      	bcc.n	8001022 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800101e:	2301      	movs	r3, #1
 8001020:	e00f      	b.n	8001042 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001022:	4a0a      	ldr	r2, [pc, #40]	; (800104c <SysTick_Config+0x40>)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	3b01      	subs	r3, #1
 8001028:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800102a:	210f      	movs	r1, #15
 800102c:	f04f 30ff 	mov.w	r0, #4294967295
 8001030:	f7ff ff8e 	bl	8000f50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001034:	4b05      	ldr	r3, [pc, #20]	; (800104c <SysTick_Config+0x40>)
 8001036:	2200      	movs	r2, #0
 8001038:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800103a:	4b04      	ldr	r3, [pc, #16]	; (800104c <SysTick_Config+0x40>)
 800103c:	2207      	movs	r2, #7
 800103e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001040:	2300      	movs	r3, #0
}
 8001042:	4618      	mov	r0, r3
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	e000e010 	.word	0xe000e010

08001050 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001058:	6878      	ldr	r0, [r7, #4]
 800105a:	f7ff ff29 	bl	8000eb0 <__NVIC_SetPriorityGrouping>
}
 800105e:	bf00      	nop
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}

08001066 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001066:	b580      	push	{r7, lr}
 8001068:	b086      	sub	sp, #24
 800106a:	af00      	add	r7, sp, #0
 800106c:	4603      	mov	r3, r0
 800106e:	60b9      	str	r1, [r7, #8]
 8001070:	607a      	str	r2, [r7, #4]
 8001072:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001074:	f7ff ff40 	bl	8000ef8 <__NVIC_GetPriorityGrouping>
 8001078:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800107a:	687a      	ldr	r2, [r7, #4]
 800107c:	68b9      	ldr	r1, [r7, #8]
 800107e:	6978      	ldr	r0, [r7, #20]
 8001080:	f7ff ff90 	bl	8000fa4 <NVIC_EncodePriority>
 8001084:	4602      	mov	r2, r0
 8001086:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800108a:	4611      	mov	r1, r2
 800108c:	4618      	mov	r0, r3
 800108e:	f7ff ff5f 	bl	8000f50 <__NVIC_SetPriority>
}
 8001092:	bf00      	nop
 8001094:	3718      	adds	r7, #24
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}

0800109a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800109a:	b580      	push	{r7, lr}
 800109c:	b082      	sub	sp, #8
 800109e:	af00      	add	r7, sp, #0
 80010a0:	4603      	mov	r3, r0
 80010a2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010a8:	4618      	mov	r0, r3
 80010aa:	f7ff ff33 	bl	8000f14 <__NVIC_EnableIRQ>
}
 80010ae:	bf00      	nop
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}

080010b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010b6:	b580      	push	{r7, lr}
 80010b8:	b082      	sub	sp, #8
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010be:	6878      	ldr	r0, [r7, #4]
 80010c0:	f7ff ffa4 	bl	800100c <SysTick_Config>
 80010c4:	4603      	mov	r3, r0
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
	...

080010d0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b086      	sub	sp, #24
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80010d8:	f7ff feba 	bl	8000e50 <HAL_GetTick>
 80010dc:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d101      	bne.n	80010e8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80010e4:	2301      	movs	r3, #1
 80010e6:	e2dc      	b.n	80016a2 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	2b02      	cmp	r3, #2
 80010f2:	d008      	beq.n	8001106 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2280      	movs	r2, #128	; 0x80
 80010f8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2200      	movs	r2, #0
 80010fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8001102:	2301      	movs	r3, #1
 8001104:	e2cd      	b.n	80016a2 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4a76      	ldr	r2, [pc, #472]	; (80012e4 <HAL_DMA_Abort+0x214>)
 800110c:	4293      	cmp	r3, r2
 800110e:	d04a      	beq.n	80011a6 <HAL_DMA_Abort+0xd6>
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a74      	ldr	r2, [pc, #464]	; (80012e8 <HAL_DMA_Abort+0x218>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d045      	beq.n	80011a6 <HAL_DMA_Abort+0xd6>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4a73      	ldr	r2, [pc, #460]	; (80012ec <HAL_DMA_Abort+0x21c>)
 8001120:	4293      	cmp	r3, r2
 8001122:	d040      	beq.n	80011a6 <HAL_DMA_Abort+0xd6>
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a71      	ldr	r2, [pc, #452]	; (80012f0 <HAL_DMA_Abort+0x220>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d03b      	beq.n	80011a6 <HAL_DMA_Abort+0xd6>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4a70      	ldr	r2, [pc, #448]	; (80012f4 <HAL_DMA_Abort+0x224>)
 8001134:	4293      	cmp	r3, r2
 8001136:	d036      	beq.n	80011a6 <HAL_DMA_Abort+0xd6>
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a6e      	ldr	r2, [pc, #440]	; (80012f8 <HAL_DMA_Abort+0x228>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d031      	beq.n	80011a6 <HAL_DMA_Abort+0xd6>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4a6d      	ldr	r2, [pc, #436]	; (80012fc <HAL_DMA_Abort+0x22c>)
 8001148:	4293      	cmp	r3, r2
 800114a:	d02c      	beq.n	80011a6 <HAL_DMA_Abort+0xd6>
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a6b      	ldr	r2, [pc, #428]	; (8001300 <HAL_DMA_Abort+0x230>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d027      	beq.n	80011a6 <HAL_DMA_Abort+0xd6>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4a6a      	ldr	r2, [pc, #424]	; (8001304 <HAL_DMA_Abort+0x234>)
 800115c:	4293      	cmp	r3, r2
 800115e:	d022      	beq.n	80011a6 <HAL_DMA_Abort+0xd6>
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a68      	ldr	r2, [pc, #416]	; (8001308 <HAL_DMA_Abort+0x238>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d01d      	beq.n	80011a6 <HAL_DMA_Abort+0xd6>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4a67      	ldr	r2, [pc, #412]	; (800130c <HAL_DMA_Abort+0x23c>)
 8001170:	4293      	cmp	r3, r2
 8001172:	d018      	beq.n	80011a6 <HAL_DMA_Abort+0xd6>
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a65      	ldr	r2, [pc, #404]	; (8001310 <HAL_DMA_Abort+0x240>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d013      	beq.n	80011a6 <HAL_DMA_Abort+0xd6>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4a64      	ldr	r2, [pc, #400]	; (8001314 <HAL_DMA_Abort+0x244>)
 8001184:	4293      	cmp	r3, r2
 8001186:	d00e      	beq.n	80011a6 <HAL_DMA_Abort+0xd6>
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a62      	ldr	r2, [pc, #392]	; (8001318 <HAL_DMA_Abort+0x248>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d009      	beq.n	80011a6 <HAL_DMA_Abort+0xd6>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4a61      	ldr	r2, [pc, #388]	; (800131c <HAL_DMA_Abort+0x24c>)
 8001198:	4293      	cmp	r3, r2
 800119a:	d004      	beq.n	80011a6 <HAL_DMA_Abort+0xd6>
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a5f      	ldr	r2, [pc, #380]	; (8001320 <HAL_DMA_Abort+0x250>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d101      	bne.n	80011aa <HAL_DMA_Abort+0xda>
 80011a6:	2301      	movs	r3, #1
 80011a8:	e000      	b.n	80011ac <HAL_DMA_Abort+0xdc>
 80011aa:	2300      	movs	r3, #0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d013      	beq.n	80011d8 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f022 021e 	bic.w	r2, r2, #30
 80011be:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	695a      	ldr	r2, [r3, #20]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80011ce:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	617b      	str	r3, [r7, #20]
 80011d6:	e00a      	b.n	80011ee <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	681a      	ldr	r2, [r3, #0]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f022 020e 	bic.w	r2, r2, #14
 80011e6:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4a3c      	ldr	r2, [pc, #240]	; (80012e4 <HAL_DMA_Abort+0x214>)
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d072      	beq.n	80012de <HAL_DMA_Abort+0x20e>
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a3a      	ldr	r2, [pc, #232]	; (80012e8 <HAL_DMA_Abort+0x218>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d06d      	beq.n	80012de <HAL_DMA_Abort+0x20e>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4a39      	ldr	r2, [pc, #228]	; (80012ec <HAL_DMA_Abort+0x21c>)
 8001208:	4293      	cmp	r3, r2
 800120a:	d068      	beq.n	80012de <HAL_DMA_Abort+0x20e>
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a37      	ldr	r2, [pc, #220]	; (80012f0 <HAL_DMA_Abort+0x220>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d063      	beq.n	80012de <HAL_DMA_Abort+0x20e>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4a36      	ldr	r2, [pc, #216]	; (80012f4 <HAL_DMA_Abort+0x224>)
 800121c:	4293      	cmp	r3, r2
 800121e:	d05e      	beq.n	80012de <HAL_DMA_Abort+0x20e>
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a34      	ldr	r2, [pc, #208]	; (80012f8 <HAL_DMA_Abort+0x228>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d059      	beq.n	80012de <HAL_DMA_Abort+0x20e>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4a33      	ldr	r2, [pc, #204]	; (80012fc <HAL_DMA_Abort+0x22c>)
 8001230:	4293      	cmp	r3, r2
 8001232:	d054      	beq.n	80012de <HAL_DMA_Abort+0x20e>
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a31      	ldr	r2, [pc, #196]	; (8001300 <HAL_DMA_Abort+0x230>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d04f      	beq.n	80012de <HAL_DMA_Abort+0x20e>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4a30      	ldr	r2, [pc, #192]	; (8001304 <HAL_DMA_Abort+0x234>)
 8001244:	4293      	cmp	r3, r2
 8001246:	d04a      	beq.n	80012de <HAL_DMA_Abort+0x20e>
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a2e      	ldr	r2, [pc, #184]	; (8001308 <HAL_DMA_Abort+0x238>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d045      	beq.n	80012de <HAL_DMA_Abort+0x20e>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4a2d      	ldr	r2, [pc, #180]	; (800130c <HAL_DMA_Abort+0x23c>)
 8001258:	4293      	cmp	r3, r2
 800125a:	d040      	beq.n	80012de <HAL_DMA_Abort+0x20e>
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a2b      	ldr	r2, [pc, #172]	; (8001310 <HAL_DMA_Abort+0x240>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d03b      	beq.n	80012de <HAL_DMA_Abort+0x20e>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4a2a      	ldr	r2, [pc, #168]	; (8001314 <HAL_DMA_Abort+0x244>)
 800126c:	4293      	cmp	r3, r2
 800126e:	d036      	beq.n	80012de <HAL_DMA_Abort+0x20e>
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a28      	ldr	r2, [pc, #160]	; (8001318 <HAL_DMA_Abort+0x248>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d031      	beq.n	80012de <HAL_DMA_Abort+0x20e>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a27      	ldr	r2, [pc, #156]	; (800131c <HAL_DMA_Abort+0x24c>)
 8001280:	4293      	cmp	r3, r2
 8001282:	d02c      	beq.n	80012de <HAL_DMA_Abort+0x20e>
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a25      	ldr	r2, [pc, #148]	; (8001320 <HAL_DMA_Abort+0x250>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d027      	beq.n	80012de <HAL_DMA_Abort+0x20e>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a24      	ldr	r2, [pc, #144]	; (8001324 <HAL_DMA_Abort+0x254>)
 8001294:	4293      	cmp	r3, r2
 8001296:	d022      	beq.n	80012de <HAL_DMA_Abort+0x20e>
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a22      	ldr	r2, [pc, #136]	; (8001328 <HAL_DMA_Abort+0x258>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d01d      	beq.n	80012de <HAL_DMA_Abort+0x20e>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4a21      	ldr	r2, [pc, #132]	; (800132c <HAL_DMA_Abort+0x25c>)
 80012a8:	4293      	cmp	r3, r2
 80012aa:	d018      	beq.n	80012de <HAL_DMA_Abort+0x20e>
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a1f      	ldr	r2, [pc, #124]	; (8001330 <HAL_DMA_Abort+0x260>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d013      	beq.n	80012de <HAL_DMA_Abort+0x20e>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a1e      	ldr	r2, [pc, #120]	; (8001334 <HAL_DMA_Abort+0x264>)
 80012bc:	4293      	cmp	r3, r2
 80012be:	d00e      	beq.n	80012de <HAL_DMA_Abort+0x20e>
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a1c      	ldr	r2, [pc, #112]	; (8001338 <HAL_DMA_Abort+0x268>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d009      	beq.n	80012de <HAL_DMA_Abort+0x20e>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4a1b      	ldr	r2, [pc, #108]	; (800133c <HAL_DMA_Abort+0x26c>)
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d004      	beq.n	80012de <HAL_DMA_Abort+0x20e>
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a19      	ldr	r2, [pc, #100]	; (8001340 <HAL_DMA_Abort+0x270>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d132      	bne.n	8001344 <HAL_DMA_Abort+0x274>
 80012de:	2301      	movs	r3, #1
 80012e0:	e031      	b.n	8001346 <HAL_DMA_Abort+0x276>
 80012e2:	bf00      	nop
 80012e4:	40020010 	.word	0x40020010
 80012e8:	40020028 	.word	0x40020028
 80012ec:	40020040 	.word	0x40020040
 80012f0:	40020058 	.word	0x40020058
 80012f4:	40020070 	.word	0x40020070
 80012f8:	40020088 	.word	0x40020088
 80012fc:	400200a0 	.word	0x400200a0
 8001300:	400200b8 	.word	0x400200b8
 8001304:	40020410 	.word	0x40020410
 8001308:	40020428 	.word	0x40020428
 800130c:	40020440 	.word	0x40020440
 8001310:	40020458 	.word	0x40020458
 8001314:	40020470 	.word	0x40020470
 8001318:	40020488 	.word	0x40020488
 800131c:	400204a0 	.word	0x400204a0
 8001320:	400204b8 	.word	0x400204b8
 8001324:	58025408 	.word	0x58025408
 8001328:	5802541c 	.word	0x5802541c
 800132c:	58025430 	.word	0x58025430
 8001330:	58025444 	.word	0x58025444
 8001334:	58025458 	.word	0x58025458
 8001338:	5802546c 	.word	0x5802546c
 800133c:	58025480 	.word	0x58025480
 8001340:	58025494 	.word	0x58025494
 8001344:	2300      	movs	r3, #0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d007      	beq.n	800135a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001354:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001358:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a6d      	ldr	r2, [pc, #436]	; (8001514 <HAL_DMA_Abort+0x444>)
 8001360:	4293      	cmp	r3, r2
 8001362:	d04a      	beq.n	80013fa <HAL_DMA_Abort+0x32a>
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a6b      	ldr	r2, [pc, #428]	; (8001518 <HAL_DMA_Abort+0x448>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d045      	beq.n	80013fa <HAL_DMA_Abort+0x32a>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4a6a      	ldr	r2, [pc, #424]	; (800151c <HAL_DMA_Abort+0x44c>)
 8001374:	4293      	cmp	r3, r2
 8001376:	d040      	beq.n	80013fa <HAL_DMA_Abort+0x32a>
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a68      	ldr	r2, [pc, #416]	; (8001520 <HAL_DMA_Abort+0x450>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d03b      	beq.n	80013fa <HAL_DMA_Abort+0x32a>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4a67      	ldr	r2, [pc, #412]	; (8001524 <HAL_DMA_Abort+0x454>)
 8001388:	4293      	cmp	r3, r2
 800138a:	d036      	beq.n	80013fa <HAL_DMA_Abort+0x32a>
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a65      	ldr	r2, [pc, #404]	; (8001528 <HAL_DMA_Abort+0x458>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d031      	beq.n	80013fa <HAL_DMA_Abort+0x32a>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4a64      	ldr	r2, [pc, #400]	; (800152c <HAL_DMA_Abort+0x45c>)
 800139c:	4293      	cmp	r3, r2
 800139e:	d02c      	beq.n	80013fa <HAL_DMA_Abort+0x32a>
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a62      	ldr	r2, [pc, #392]	; (8001530 <HAL_DMA_Abort+0x460>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d027      	beq.n	80013fa <HAL_DMA_Abort+0x32a>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a61      	ldr	r2, [pc, #388]	; (8001534 <HAL_DMA_Abort+0x464>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d022      	beq.n	80013fa <HAL_DMA_Abort+0x32a>
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a5f      	ldr	r2, [pc, #380]	; (8001538 <HAL_DMA_Abort+0x468>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d01d      	beq.n	80013fa <HAL_DMA_Abort+0x32a>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a5e      	ldr	r2, [pc, #376]	; (800153c <HAL_DMA_Abort+0x46c>)
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d018      	beq.n	80013fa <HAL_DMA_Abort+0x32a>
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a5c      	ldr	r2, [pc, #368]	; (8001540 <HAL_DMA_Abort+0x470>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d013      	beq.n	80013fa <HAL_DMA_Abort+0x32a>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4a5b      	ldr	r2, [pc, #364]	; (8001544 <HAL_DMA_Abort+0x474>)
 80013d8:	4293      	cmp	r3, r2
 80013da:	d00e      	beq.n	80013fa <HAL_DMA_Abort+0x32a>
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a59      	ldr	r2, [pc, #356]	; (8001548 <HAL_DMA_Abort+0x478>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d009      	beq.n	80013fa <HAL_DMA_Abort+0x32a>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a58      	ldr	r2, [pc, #352]	; (800154c <HAL_DMA_Abort+0x47c>)
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d004      	beq.n	80013fa <HAL_DMA_Abort+0x32a>
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a56      	ldr	r2, [pc, #344]	; (8001550 <HAL_DMA_Abort+0x480>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d108      	bne.n	800140c <HAL_DMA_Abort+0x33c>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f022 0201 	bic.w	r2, r2, #1
 8001408:	601a      	str	r2, [r3, #0]
 800140a:	e007      	b.n	800141c <HAL_DMA_Abort+0x34c>
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f022 0201 	bic.w	r2, r2, #1
 800141a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800141c:	e013      	b.n	8001446 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800141e:	f7ff fd17 	bl	8000e50 <HAL_GetTick>
 8001422:	4602      	mov	r2, r0
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	1ad3      	subs	r3, r2, r3
 8001428:	2b05      	cmp	r3, #5
 800142a:	d90c      	bls.n	8001446 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2220      	movs	r2, #32
 8001430:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2203      	movs	r2, #3
 8001436:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2200      	movs	r2, #0
 800143e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	e12d      	b.n	80016a2 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f003 0301 	and.w	r3, r3, #1
 800144e:	2b00      	cmp	r3, #0
 8001450:	d1e5      	bne.n	800141e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a2f      	ldr	r2, [pc, #188]	; (8001514 <HAL_DMA_Abort+0x444>)
 8001458:	4293      	cmp	r3, r2
 800145a:	d04a      	beq.n	80014f2 <HAL_DMA_Abort+0x422>
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a2d      	ldr	r2, [pc, #180]	; (8001518 <HAL_DMA_Abort+0x448>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d045      	beq.n	80014f2 <HAL_DMA_Abort+0x422>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a2c      	ldr	r2, [pc, #176]	; (800151c <HAL_DMA_Abort+0x44c>)
 800146c:	4293      	cmp	r3, r2
 800146e:	d040      	beq.n	80014f2 <HAL_DMA_Abort+0x422>
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a2a      	ldr	r2, [pc, #168]	; (8001520 <HAL_DMA_Abort+0x450>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d03b      	beq.n	80014f2 <HAL_DMA_Abort+0x422>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a29      	ldr	r2, [pc, #164]	; (8001524 <HAL_DMA_Abort+0x454>)
 8001480:	4293      	cmp	r3, r2
 8001482:	d036      	beq.n	80014f2 <HAL_DMA_Abort+0x422>
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a27      	ldr	r2, [pc, #156]	; (8001528 <HAL_DMA_Abort+0x458>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d031      	beq.n	80014f2 <HAL_DMA_Abort+0x422>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a26      	ldr	r2, [pc, #152]	; (800152c <HAL_DMA_Abort+0x45c>)
 8001494:	4293      	cmp	r3, r2
 8001496:	d02c      	beq.n	80014f2 <HAL_DMA_Abort+0x422>
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a24      	ldr	r2, [pc, #144]	; (8001530 <HAL_DMA_Abort+0x460>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d027      	beq.n	80014f2 <HAL_DMA_Abort+0x422>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a23      	ldr	r2, [pc, #140]	; (8001534 <HAL_DMA_Abort+0x464>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d022      	beq.n	80014f2 <HAL_DMA_Abort+0x422>
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a21      	ldr	r2, [pc, #132]	; (8001538 <HAL_DMA_Abort+0x468>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d01d      	beq.n	80014f2 <HAL_DMA_Abort+0x422>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a20      	ldr	r2, [pc, #128]	; (800153c <HAL_DMA_Abort+0x46c>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d018      	beq.n	80014f2 <HAL_DMA_Abort+0x422>
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a1e      	ldr	r2, [pc, #120]	; (8001540 <HAL_DMA_Abort+0x470>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d013      	beq.n	80014f2 <HAL_DMA_Abort+0x422>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a1d      	ldr	r2, [pc, #116]	; (8001544 <HAL_DMA_Abort+0x474>)
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d00e      	beq.n	80014f2 <HAL_DMA_Abort+0x422>
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a1b      	ldr	r2, [pc, #108]	; (8001548 <HAL_DMA_Abort+0x478>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d009      	beq.n	80014f2 <HAL_DMA_Abort+0x422>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a1a      	ldr	r2, [pc, #104]	; (800154c <HAL_DMA_Abort+0x47c>)
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d004      	beq.n	80014f2 <HAL_DMA_Abort+0x422>
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a18      	ldr	r2, [pc, #96]	; (8001550 <HAL_DMA_Abort+0x480>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d101      	bne.n	80014f6 <HAL_DMA_Abort+0x426>
 80014f2:	2301      	movs	r3, #1
 80014f4:	e000      	b.n	80014f8 <HAL_DMA_Abort+0x428>
 80014f6:	2300      	movs	r3, #0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d02b      	beq.n	8001554 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001500:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001506:	f003 031f 	and.w	r3, r3, #31
 800150a:	223f      	movs	r2, #63	; 0x3f
 800150c:	409a      	lsls	r2, r3
 800150e:	68bb      	ldr	r3, [r7, #8]
 8001510:	609a      	str	r2, [r3, #8]
 8001512:	e02a      	b.n	800156a <HAL_DMA_Abort+0x49a>
 8001514:	40020010 	.word	0x40020010
 8001518:	40020028 	.word	0x40020028
 800151c:	40020040 	.word	0x40020040
 8001520:	40020058 	.word	0x40020058
 8001524:	40020070 	.word	0x40020070
 8001528:	40020088 	.word	0x40020088
 800152c:	400200a0 	.word	0x400200a0
 8001530:	400200b8 	.word	0x400200b8
 8001534:	40020410 	.word	0x40020410
 8001538:	40020428 	.word	0x40020428
 800153c:	40020440 	.word	0x40020440
 8001540:	40020458 	.word	0x40020458
 8001544:	40020470 	.word	0x40020470
 8001548:	40020488 	.word	0x40020488
 800154c:	400204a0 	.word	0x400204a0
 8001550:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001558:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800155e:	f003 031f 	and.w	r3, r3, #31
 8001562:	2201      	movs	r2, #1
 8001564:	409a      	lsls	r2, r3
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a4f      	ldr	r2, [pc, #316]	; (80016ac <HAL_DMA_Abort+0x5dc>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d072      	beq.n	800165a <HAL_DMA_Abort+0x58a>
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a4d      	ldr	r2, [pc, #308]	; (80016b0 <HAL_DMA_Abort+0x5e0>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d06d      	beq.n	800165a <HAL_DMA_Abort+0x58a>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a4c      	ldr	r2, [pc, #304]	; (80016b4 <HAL_DMA_Abort+0x5e4>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d068      	beq.n	800165a <HAL_DMA_Abort+0x58a>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a4a      	ldr	r2, [pc, #296]	; (80016b8 <HAL_DMA_Abort+0x5e8>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d063      	beq.n	800165a <HAL_DMA_Abort+0x58a>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a49      	ldr	r2, [pc, #292]	; (80016bc <HAL_DMA_Abort+0x5ec>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d05e      	beq.n	800165a <HAL_DMA_Abort+0x58a>
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a47      	ldr	r2, [pc, #284]	; (80016c0 <HAL_DMA_Abort+0x5f0>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d059      	beq.n	800165a <HAL_DMA_Abort+0x58a>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a46      	ldr	r2, [pc, #280]	; (80016c4 <HAL_DMA_Abort+0x5f4>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d054      	beq.n	800165a <HAL_DMA_Abort+0x58a>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a44      	ldr	r2, [pc, #272]	; (80016c8 <HAL_DMA_Abort+0x5f8>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d04f      	beq.n	800165a <HAL_DMA_Abort+0x58a>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a43      	ldr	r2, [pc, #268]	; (80016cc <HAL_DMA_Abort+0x5fc>)
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d04a      	beq.n	800165a <HAL_DMA_Abort+0x58a>
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a41      	ldr	r2, [pc, #260]	; (80016d0 <HAL_DMA_Abort+0x600>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d045      	beq.n	800165a <HAL_DMA_Abort+0x58a>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a40      	ldr	r2, [pc, #256]	; (80016d4 <HAL_DMA_Abort+0x604>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d040      	beq.n	800165a <HAL_DMA_Abort+0x58a>
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a3e      	ldr	r2, [pc, #248]	; (80016d8 <HAL_DMA_Abort+0x608>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d03b      	beq.n	800165a <HAL_DMA_Abort+0x58a>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a3d      	ldr	r2, [pc, #244]	; (80016dc <HAL_DMA_Abort+0x60c>)
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d036      	beq.n	800165a <HAL_DMA_Abort+0x58a>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a3b      	ldr	r2, [pc, #236]	; (80016e0 <HAL_DMA_Abort+0x610>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d031      	beq.n	800165a <HAL_DMA_Abort+0x58a>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a3a      	ldr	r2, [pc, #232]	; (80016e4 <HAL_DMA_Abort+0x614>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d02c      	beq.n	800165a <HAL_DMA_Abort+0x58a>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a38      	ldr	r2, [pc, #224]	; (80016e8 <HAL_DMA_Abort+0x618>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d027      	beq.n	800165a <HAL_DMA_Abort+0x58a>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4a37      	ldr	r2, [pc, #220]	; (80016ec <HAL_DMA_Abort+0x61c>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d022      	beq.n	800165a <HAL_DMA_Abort+0x58a>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a35      	ldr	r2, [pc, #212]	; (80016f0 <HAL_DMA_Abort+0x620>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d01d      	beq.n	800165a <HAL_DMA_Abort+0x58a>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a34      	ldr	r2, [pc, #208]	; (80016f4 <HAL_DMA_Abort+0x624>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d018      	beq.n	800165a <HAL_DMA_Abort+0x58a>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a32      	ldr	r2, [pc, #200]	; (80016f8 <HAL_DMA_Abort+0x628>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d013      	beq.n	800165a <HAL_DMA_Abort+0x58a>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a31      	ldr	r2, [pc, #196]	; (80016fc <HAL_DMA_Abort+0x62c>)
 8001638:	4293      	cmp	r3, r2
 800163a:	d00e      	beq.n	800165a <HAL_DMA_Abort+0x58a>
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a2f      	ldr	r2, [pc, #188]	; (8001700 <HAL_DMA_Abort+0x630>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d009      	beq.n	800165a <HAL_DMA_Abort+0x58a>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a2e      	ldr	r2, [pc, #184]	; (8001704 <HAL_DMA_Abort+0x634>)
 800164c:	4293      	cmp	r3, r2
 800164e:	d004      	beq.n	800165a <HAL_DMA_Abort+0x58a>
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a2c      	ldr	r2, [pc, #176]	; (8001708 <HAL_DMA_Abort+0x638>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d101      	bne.n	800165e <HAL_DMA_Abort+0x58e>
 800165a:	2301      	movs	r3, #1
 800165c:	e000      	b.n	8001660 <HAL_DMA_Abort+0x590>
 800165e:	2300      	movs	r3, #0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d015      	beq.n	8001690 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001668:	687a      	ldr	r2, [r7, #4]
 800166a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800166c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001672:	2b00      	cmp	r3, #0
 8001674:	d00c      	beq.n	8001690 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001680:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001684:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800168a:	687a      	ldr	r2, [r7, #4]
 800168c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800168e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2201      	movs	r2, #1
 8001694:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2200      	movs	r2, #0
 800169c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80016a0:	2300      	movs	r3, #0
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	3718      	adds	r7, #24
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	40020010 	.word	0x40020010
 80016b0:	40020028 	.word	0x40020028
 80016b4:	40020040 	.word	0x40020040
 80016b8:	40020058 	.word	0x40020058
 80016bc:	40020070 	.word	0x40020070
 80016c0:	40020088 	.word	0x40020088
 80016c4:	400200a0 	.word	0x400200a0
 80016c8:	400200b8 	.word	0x400200b8
 80016cc:	40020410 	.word	0x40020410
 80016d0:	40020428 	.word	0x40020428
 80016d4:	40020440 	.word	0x40020440
 80016d8:	40020458 	.word	0x40020458
 80016dc:	40020470 	.word	0x40020470
 80016e0:	40020488 	.word	0x40020488
 80016e4:	400204a0 	.word	0x400204a0
 80016e8:	400204b8 	.word	0x400204b8
 80016ec:	58025408 	.word	0x58025408
 80016f0:	5802541c 	.word	0x5802541c
 80016f4:	58025430 	.word	0x58025430
 80016f8:	58025444 	.word	0x58025444
 80016fc:	58025458 	.word	0x58025458
 8001700:	5802546c 	.word	0x5802546c
 8001704:	58025480 	.word	0x58025480
 8001708:	58025494 	.word	0x58025494

0800170c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d101      	bne.n	800171e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	e237      	b.n	8001b8e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001724:	b2db      	uxtb	r3, r3
 8001726:	2b02      	cmp	r3, #2
 8001728:	d004      	beq.n	8001734 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2280      	movs	r2, #128	; 0x80
 800172e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001730:	2301      	movs	r3, #1
 8001732:	e22c      	b.n	8001b8e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a5c      	ldr	r2, [pc, #368]	; (80018ac <HAL_DMA_Abort_IT+0x1a0>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d04a      	beq.n	80017d4 <HAL_DMA_Abort_IT+0xc8>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a5b      	ldr	r2, [pc, #364]	; (80018b0 <HAL_DMA_Abort_IT+0x1a4>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d045      	beq.n	80017d4 <HAL_DMA_Abort_IT+0xc8>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a59      	ldr	r2, [pc, #356]	; (80018b4 <HAL_DMA_Abort_IT+0x1a8>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d040      	beq.n	80017d4 <HAL_DMA_Abort_IT+0xc8>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a58      	ldr	r2, [pc, #352]	; (80018b8 <HAL_DMA_Abort_IT+0x1ac>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d03b      	beq.n	80017d4 <HAL_DMA_Abort_IT+0xc8>
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a56      	ldr	r2, [pc, #344]	; (80018bc <HAL_DMA_Abort_IT+0x1b0>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d036      	beq.n	80017d4 <HAL_DMA_Abort_IT+0xc8>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a55      	ldr	r2, [pc, #340]	; (80018c0 <HAL_DMA_Abort_IT+0x1b4>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d031      	beq.n	80017d4 <HAL_DMA_Abort_IT+0xc8>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a53      	ldr	r2, [pc, #332]	; (80018c4 <HAL_DMA_Abort_IT+0x1b8>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d02c      	beq.n	80017d4 <HAL_DMA_Abort_IT+0xc8>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a52      	ldr	r2, [pc, #328]	; (80018c8 <HAL_DMA_Abort_IT+0x1bc>)
 8001780:	4293      	cmp	r3, r2
 8001782:	d027      	beq.n	80017d4 <HAL_DMA_Abort_IT+0xc8>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a50      	ldr	r2, [pc, #320]	; (80018cc <HAL_DMA_Abort_IT+0x1c0>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d022      	beq.n	80017d4 <HAL_DMA_Abort_IT+0xc8>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a4f      	ldr	r2, [pc, #316]	; (80018d0 <HAL_DMA_Abort_IT+0x1c4>)
 8001794:	4293      	cmp	r3, r2
 8001796:	d01d      	beq.n	80017d4 <HAL_DMA_Abort_IT+0xc8>
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a4d      	ldr	r2, [pc, #308]	; (80018d4 <HAL_DMA_Abort_IT+0x1c8>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d018      	beq.n	80017d4 <HAL_DMA_Abort_IT+0xc8>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a4c      	ldr	r2, [pc, #304]	; (80018d8 <HAL_DMA_Abort_IT+0x1cc>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d013      	beq.n	80017d4 <HAL_DMA_Abort_IT+0xc8>
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a4a      	ldr	r2, [pc, #296]	; (80018dc <HAL_DMA_Abort_IT+0x1d0>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d00e      	beq.n	80017d4 <HAL_DMA_Abort_IT+0xc8>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a49      	ldr	r2, [pc, #292]	; (80018e0 <HAL_DMA_Abort_IT+0x1d4>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d009      	beq.n	80017d4 <HAL_DMA_Abort_IT+0xc8>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a47      	ldr	r2, [pc, #284]	; (80018e4 <HAL_DMA_Abort_IT+0x1d8>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d004      	beq.n	80017d4 <HAL_DMA_Abort_IT+0xc8>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a46      	ldr	r2, [pc, #280]	; (80018e8 <HAL_DMA_Abort_IT+0x1dc>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d101      	bne.n	80017d8 <HAL_DMA_Abort_IT+0xcc>
 80017d4:	2301      	movs	r3, #1
 80017d6:	e000      	b.n	80017da <HAL_DMA_Abort_IT+0xce>
 80017d8:	2300      	movs	r3, #0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	f000 8086 	beq.w	80018ec <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2204      	movs	r2, #4
 80017e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a2f      	ldr	r2, [pc, #188]	; (80018ac <HAL_DMA_Abort_IT+0x1a0>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d04a      	beq.n	8001888 <HAL_DMA_Abort_IT+0x17c>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a2e      	ldr	r2, [pc, #184]	; (80018b0 <HAL_DMA_Abort_IT+0x1a4>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d045      	beq.n	8001888 <HAL_DMA_Abort_IT+0x17c>
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a2c      	ldr	r2, [pc, #176]	; (80018b4 <HAL_DMA_Abort_IT+0x1a8>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d040      	beq.n	8001888 <HAL_DMA_Abort_IT+0x17c>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a2b      	ldr	r2, [pc, #172]	; (80018b8 <HAL_DMA_Abort_IT+0x1ac>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d03b      	beq.n	8001888 <HAL_DMA_Abort_IT+0x17c>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a29      	ldr	r2, [pc, #164]	; (80018bc <HAL_DMA_Abort_IT+0x1b0>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d036      	beq.n	8001888 <HAL_DMA_Abort_IT+0x17c>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a28      	ldr	r2, [pc, #160]	; (80018c0 <HAL_DMA_Abort_IT+0x1b4>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d031      	beq.n	8001888 <HAL_DMA_Abort_IT+0x17c>
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a26      	ldr	r2, [pc, #152]	; (80018c4 <HAL_DMA_Abort_IT+0x1b8>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d02c      	beq.n	8001888 <HAL_DMA_Abort_IT+0x17c>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a25      	ldr	r2, [pc, #148]	; (80018c8 <HAL_DMA_Abort_IT+0x1bc>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d027      	beq.n	8001888 <HAL_DMA_Abort_IT+0x17c>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a23      	ldr	r2, [pc, #140]	; (80018cc <HAL_DMA_Abort_IT+0x1c0>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d022      	beq.n	8001888 <HAL_DMA_Abort_IT+0x17c>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a22      	ldr	r2, [pc, #136]	; (80018d0 <HAL_DMA_Abort_IT+0x1c4>)
 8001848:	4293      	cmp	r3, r2
 800184a:	d01d      	beq.n	8001888 <HAL_DMA_Abort_IT+0x17c>
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a20      	ldr	r2, [pc, #128]	; (80018d4 <HAL_DMA_Abort_IT+0x1c8>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d018      	beq.n	8001888 <HAL_DMA_Abort_IT+0x17c>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a1f      	ldr	r2, [pc, #124]	; (80018d8 <HAL_DMA_Abort_IT+0x1cc>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d013      	beq.n	8001888 <HAL_DMA_Abort_IT+0x17c>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a1d      	ldr	r2, [pc, #116]	; (80018dc <HAL_DMA_Abort_IT+0x1d0>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d00e      	beq.n	8001888 <HAL_DMA_Abort_IT+0x17c>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a1c      	ldr	r2, [pc, #112]	; (80018e0 <HAL_DMA_Abort_IT+0x1d4>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d009      	beq.n	8001888 <HAL_DMA_Abort_IT+0x17c>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a1a      	ldr	r2, [pc, #104]	; (80018e4 <HAL_DMA_Abort_IT+0x1d8>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d004      	beq.n	8001888 <HAL_DMA_Abort_IT+0x17c>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a19      	ldr	r2, [pc, #100]	; (80018e8 <HAL_DMA_Abort_IT+0x1dc>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d108      	bne.n	800189a <HAL_DMA_Abort_IT+0x18e>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f022 0201 	bic.w	r2, r2, #1
 8001896:	601a      	str	r2, [r3, #0]
 8001898:	e178      	b.n	8001b8c <HAL_DMA_Abort_IT+0x480>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f022 0201 	bic.w	r2, r2, #1
 80018a8:	601a      	str	r2, [r3, #0]
 80018aa:	e16f      	b.n	8001b8c <HAL_DMA_Abort_IT+0x480>
 80018ac:	40020010 	.word	0x40020010
 80018b0:	40020028 	.word	0x40020028
 80018b4:	40020040 	.word	0x40020040
 80018b8:	40020058 	.word	0x40020058
 80018bc:	40020070 	.word	0x40020070
 80018c0:	40020088 	.word	0x40020088
 80018c4:	400200a0 	.word	0x400200a0
 80018c8:	400200b8 	.word	0x400200b8
 80018cc:	40020410 	.word	0x40020410
 80018d0:	40020428 	.word	0x40020428
 80018d4:	40020440 	.word	0x40020440
 80018d8:	40020458 	.word	0x40020458
 80018dc:	40020470 	.word	0x40020470
 80018e0:	40020488 	.word	0x40020488
 80018e4:	400204a0 	.word	0x400204a0
 80018e8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f022 020e 	bic.w	r2, r2, #14
 80018fa:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a6c      	ldr	r2, [pc, #432]	; (8001ab4 <HAL_DMA_Abort_IT+0x3a8>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d04a      	beq.n	800199c <HAL_DMA_Abort_IT+0x290>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a6b      	ldr	r2, [pc, #428]	; (8001ab8 <HAL_DMA_Abort_IT+0x3ac>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d045      	beq.n	800199c <HAL_DMA_Abort_IT+0x290>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a69      	ldr	r2, [pc, #420]	; (8001abc <HAL_DMA_Abort_IT+0x3b0>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d040      	beq.n	800199c <HAL_DMA_Abort_IT+0x290>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a68      	ldr	r2, [pc, #416]	; (8001ac0 <HAL_DMA_Abort_IT+0x3b4>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d03b      	beq.n	800199c <HAL_DMA_Abort_IT+0x290>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a66      	ldr	r2, [pc, #408]	; (8001ac4 <HAL_DMA_Abort_IT+0x3b8>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d036      	beq.n	800199c <HAL_DMA_Abort_IT+0x290>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a65      	ldr	r2, [pc, #404]	; (8001ac8 <HAL_DMA_Abort_IT+0x3bc>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d031      	beq.n	800199c <HAL_DMA_Abort_IT+0x290>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a63      	ldr	r2, [pc, #396]	; (8001acc <HAL_DMA_Abort_IT+0x3c0>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d02c      	beq.n	800199c <HAL_DMA_Abort_IT+0x290>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a62      	ldr	r2, [pc, #392]	; (8001ad0 <HAL_DMA_Abort_IT+0x3c4>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d027      	beq.n	800199c <HAL_DMA_Abort_IT+0x290>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a60      	ldr	r2, [pc, #384]	; (8001ad4 <HAL_DMA_Abort_IT+0x3c8>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d022      	beq.n	800199c <HAL_DMA_Abort_IT+0x290>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a5f      	ldr	r2, [pc, #380]	; (8001ad8 <HAL_DMA_Abort_IT+0x3cc>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d01d      	beq.n	800199c <HAL_DMA_Abort_IT+0x290>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a5d      	ldr	r2, [pc, #372]	; (8001adc <HAL_DMA_Abort_IT+0x3d0>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d018      	beq.n	800199c <HAL_DMA_Abort_IT+0x290>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a5c      	ldr	r2, [pc, #368]	; (8001ae0 <HAL_DMA_Abort_IT+0x3d4>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d013      	beq.n	800199c <HAL_DMA_Abort_IT+0x290>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a5a      	ldr	r2, [pc, #360]	; (8001ae4 <HAL_DMA_Abort_IT+0x3d8>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d00e      	beq.n	800199c <HAL_DMA_Abort_IT+0x290>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a59      	ldr	r2, [pc, #356]	; (8001ae8 <HAL_DMA_Abort_IT+0x3dc>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d009      	beq.n	800199c <HAL_DMA_Abort_IT+0x290>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a57      	ldr	r2, [pc, #348]	; (8001aec <HAL_DMA_Abort_IT+0x3e0>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d004      	beq.n	800199c <HAL_DMA_Abort_IT+0x290>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a56      	ldr	r2, [pc, #344]	; (8001af0 <HAL_DMA_Abort_IT+0x3e4>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d108      	bne.n	80019ae <HAL_DMA_Abort_IT+0x2a2>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f022 0201 	bic.w	r2, r2, #1
 80019aa:	601a      	str	r2, [r3, #0]
 80019ac:	e007      	b.n	80019be <HAL_DMA_Abort_IT+0x2b2>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f022 0201 	bic.w	r2, r2, #1
 80019bc:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a3c      	ldr	r2, [pc, #240]	; (8001ab4 <HAL_DMA_Abort_IT+0x3a8>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d072      	beq.n	8001aae <HAL_DMA_Abort_IT+0x3a2>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a3a      	ldr	r2, [pc, #232]	; (8001ab8 <HAL_DMA_Abort_IT+0x3ac>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d06d      	beq.n	8001aae <HAL_DMA_Abort_IT+0x3a2>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a39      	ldr	r2, [pc, #228]	; (8001abc <HAL_DMA_Abort_IT+0x3b0>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d068      	beq.n	8001aae <HAL_DMA_Abort_IT+0x3a2>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a37      	ldr	r2, [pc, #220]	; (8001ac0 <HAL_DMA_Abort_IT+0x3b4>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d063      	beq.n	8001aae <HAL_DMA_Abort_IT+0x3a2>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a36      	ldr	r2, [pc, #216]	; (8001ac4 <HAL_DMA_Abort_IT+0x3b8>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d05e      	beq.n	8001aae <HAL_DMA_Abort_IT+0x3a2>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a34      	ldr	r2, [pc, #208]	; (8001ac8 <HAL_DMA_Abort_IT+0x3bc>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d059      	beq.n	8001aae <HAL_DMA_Abort_IT+0x3a2>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a33      	ldr	r2, [pc, #204]	; (8001acc <HAL_DMA_Abort_IT+0x3c0>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d054      	beq.n	8001aae <HAL_DMA_Abort_IT+0x3a2>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a31      	ldr	r2, [pc, #196]	; (8001ad0 <HAL_DMA_Abort_IT+0x3c4>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d04f      	beq.n	8001aae <HAL_DMA_Abort_IT+0x3a2>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a30      	ldr	r2, [pc, #192]	; (8001ad4 <HAL_DMA_Abort_IT+0x3c8>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d04a      	beq.n	8001aae <HAL_DMA_Abort_IT+0x3a2>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a2e      	ldr	r2, [pc, #184]	; (8001ad8 <HAL_DMA_Abort_IT+0x3cc>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d045      	beq.n	8001aae <HAL_DMA_Abort_IT+0x3a2>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a2d      	ldr	r2, [pc, #180]	; (8001adc <HAL_DMA_Abort_IT+0x3d0>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d040      	beq.n	8001aae <HAL_DMA_Abort_IT+0x3a2>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a2b      	ldr	r2, [pc, #172]	; (8001ae0 <HAL_DMA_Abort_IT+0x3d4>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d03b      	beq.n	8001aae <HAL_DMA_Abort_IT+0x3a2>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a2a      	ldr	r2, [pc, #168]	; (8001ae4 <HAL_DMA_Abort_IT+0x3d8>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d036      	beq.n	8001aae <HAL_DMA_Abort_IT+0x3a2>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a28      	ldr	r2, [pc, #160]	; (8001ae8 <HAL_DMA_Abort_IT+0x3dc>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d031      	beq.n	8001aae <HAL_DMA_Abort_IT+0x3a2>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a27      	ldr	r2, [pc, #156]	; (8001aec <HAL_DMA_Abort_IT+0x3e0>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d02c      	beq.n	8001aae <HAL_DMA_Abort_IT+0x3a2>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a25      	ldr	r2, [pc, #148]	; (8001af0 <HAL_DMA_Abort_IT+0x3e4>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d027      	beq.n	8001aae <HAL_DMA_Abort_IT+0x3a2>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a24      	ldr	r2, [pc, #144]	; (8001af4 <HAL_DMA_Abort_IT+0x3e8>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d022      	beq.n	8001aae <HAL_DMA_Abort_IT+0x3a2>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a22      	ldr	r2, [pc, #136]	; (8001af8 <HAL_DMA_Abort_IT+0x3ec>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d01d      	beq.n	8001aae <HAL_DMA_Abort_IT+0x3a2>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a21      	ldr	r2, [pc, #132]	; (8001afc <HAL_DMA_Abort_IT+0x3f0>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d018      	beq.n	8001aae <HAL_DMA_Abort_IT+0x3a2>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a1f      	ldr	r2, [pc, #124]	; (8001b00 <HAL_DMA_Abort_IT+0x3f4>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d013      	beq.n	8001aae <HAL_DMA_Abort_IT+0x3a2>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a1e      	ldr	r2, [pc, #120]	; (8001b04 <HAL_DMA_Abort_IT+0x3f8>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d00e      	beq.n	8001aae <HAL_DMA_Abort_IT+0x3a2>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a1c      	ldr	r2, [pc, #112]	; (8001b08 <HAL_DMA_Abort_IT+0x3fc>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d009      	beq.n	8001aae <HAL_DMA_Abort_IT+0x3a2>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a1b      	ldr	r2, [pc, #108]	; (8001b0c <HAL_DMA_Abort_IT+0x400>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d004      	beq.n	8001aae <HAL_DMA_Abort_IT+0x3a2>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a19      	ldr	r2, [pc, #100]	; (8001b10 <HAL_DMA_Abort_IT+0x404>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d132      	bne.n	8001b14 <HAL_DMA_Abort_IT+0x408>
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e031      	b.n	8001b16 <HAL_DMA_Abort_IT+0x40a>
 8001ab2:	bf00      	nop
 8001ab4:	40020010 	.word	0x40020010
 8001ab8:	40020028 	.word	0x40020028
 8001abc:	40020040 	.word	0x40020040
 8001ac0:	40020058 	.word	0x40020058
 8001ac4:	40020070 	.word	0x40020070
 8001ac8:	40020088 	.word	0x40020088
 8001acc:	400200a0 	.word	0x400200a0
 8001ad0:	400200b8 	.word	0x400200b8
 8001ad4:	40020410 	.word	0x40020410
 8001ad8:	40020428 	.word	0x40020428
 8001adc:	40020440 	.word	0x40020440
 8001ae0:	40020458 	.word	0x40020458
 8001ae4:	40020470 	.word	0x40020470
 8001ae8:	40020488 	.word	0x40020488
 8001aec:	400204a0 	.word	0x400204a0
 8001af0:	400204b8 	.word	0x400204b8
 8001af4:	58025408 	.word	0x58025408
 8001af8:	5802541c 	.word	0x5802541c
 8001afc:	58025430 	.word	0x58025430
 8001b00:	58025444 	.word	0x58025444
 8001b04:	58025458 	.word	0x58025458
 8001b08:	5802546c 	.word	0x5802546c
 8001b0c:	58025480 	.word	0x58025480
 8001b10:	58025494 	.word	0x58025494
 8001b14:	2300      	movs	r3, #0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d028      	beq.n	8001b6c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b24:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b28:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b2e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b34:	f003 031f 	and.w	r3, r3, #31
 8001b38:	2201      	movs	r2, #1
 8001b3a:	409a      	lsls	r2, r3
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001b44:	687a      	ldr	r2, [r7, #4]
 8001b46:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001b48:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d00c      	beq.n	8001b6c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001b5c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b60:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b66:	687a      	ldr	r2, [r7, #4]
 8001b68:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001b6a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2201      	movs	r2, #1
 8001b70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2200      	movs	r2, #0
 8001b78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d003      	beq.n	8001b8c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b88:	6878      	ldr	r0, [r7, #4]
 8001b8a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8001b8c:	2300      	movs	r3, #0
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	3710      	adds	r7, #16
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop

08001b98 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b089      	sub	sp, #36	; 0x24
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001ba6:	4b89      	ldr	r3, [pc, #548]	; (8001dcc <HAL_GPIO_Init+0x234>)
 8001ba8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001baa:	e194      	b.n	8001ed6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	2101      	movs	r1, #1
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	fa01 f303 	lsl.w	r3, r1, r3
 8001bb8:	4013      	ands	r3, r2
 8001bba:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	f000 8186 	beq.w	8001ed0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f003 0303 	and.w	r3, r3, #3
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d005      	beq.n	8001bdc <HAL_GPIO_Init+0x44>
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	f003 0303 	and.w	r3, r3, #3
 8001bd8:	2b02      	cmp	r3, #2
 8001bda:	d130      	bne.n	8001c3e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	005b      	lsls	r3, r3, #1
 8001be6:	2203      	movs	r2, #3
 8001be8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bec:	43db      	mvns	r3, r3
 8001bee:	69ba      	ldr	r2, [r7, #24]
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	68da      	ldr	r2, [r3, #12]
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	005b      	lsls	r3, r3, #1
 8001bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001c00:	69ba      	ldr	r2, [r7, #24]
 8001c02:	4313      	orrs	r3, r2
 8001c04:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	69ba      	ldr	r2, [r7, #24]
 8001c0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c12:	2201      	movs	r2, #1
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1a:	43db      	mvns	r3, r3
 8001c1c:	69ba      	ldr	r2, [r7, #24]
 8001c1e:	4013      	ands	r3, r2
 8001c20:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	091b      	lsrs	r3, r3, #4
 8001c28:	f003 0201 	and.w	r2, r3, #1
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c32:	69ba      	ldr	r2, [r7, #24]
 8001c34:	4313      	orrs	r3, r2
 8001c36:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	69ba      	ldr	r2, [r7, #24]
 8001c3c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	f003 0303 	and.w	r3, r3, #3
 8001c46:	2b03      	cmp	r3, #3
 8001c48:	d017      	beq.n	8001c7a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	68db      	ldr	r3, [r3, #12]
 8001c4e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c50:	69fb      	ldr	r3, [r7, #28]
 8001c52:	005b      	lsls	r3, r3, #1
 8001c54:	2203      	movs	r2, #3
 8001c56:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5a:	43db      	mvns	r3, r3
 8001c5c:	69ba      	ldr	r2, [r7, #24]
 8001c5e:	4013      	ands	r3, r2
 8001c60:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	689a      	ldr	r2, [r3, #8]
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	005b      	lsls	r3, r3, #1
 8001c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6e:	69ba      	ldr	r2, [r7, #24]
 8001c70:	4313      	orrs	r3, r2
 8001c72:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	69ba      	ldr	r2, [r7, #24]
 8001c78:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	f003 0303 	and.w	r3, r3, #3
 8001c82:	2b02      	cmp	r3, #2
 8001c84:	d123      	bne.n	8001cce <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	08da      	lsrs	r2, r3, #3
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	3208      	adds	r2, #8
 8001c8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001c94:	69fb      	ldr	r3, [r7, #28]
 8001c96:	f003 0307 	and.w	r3, r3, #7
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	220f      	movs	r2, #15
 8001c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca2:	43db      	mvns	r3, r3
 8001ca4:	69ba      	ldr	r2, [r7, #24]
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	691a      	ldr	r2, [r3, #16]
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	f003 0307 	and.w	r3, r3, #7
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cba:	69ba      	ldr	r2, [r7, #24]
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	08da      	lsrs	r2, r3, #3
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	3208      	adds	r2, #8
 8001cc8:	69b9      	ldr	r1, [r7, #24]
 8001cca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001cd4:	69fb      	ldr	r3, [r7, #28]
 8001cd6:	005b      	lsls	r3, r3, #1
 8001cd8:	2203      	movs	r2, #3
 8001cda:	fa02 f303 	lsl.w	r3, r2, r3
 8001cde:	43db      	mvns	r3, r3
 8001ce0:	69ba      	ldr	r2, [r7, #24]
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	f003 0203 	and.w	r2, r3, #3
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	005b      	lsls	r3, r3, #1
 8001cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf6:	69ba      	ldr	r2, [r7, #24]
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	69ba      	ldr	r2, [r7, #24]
 8001d00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	f000 80e0 	beq.w	8001ed0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d10:	4b2f      	ldr	r3, [pc, #188]	; (8001dd0 <HAL_GPIO_Init+0x238>)
 8001d12:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001d16:	4a2e      	ldr	r2, [pc, #184]	; (8001dd0 <HAL_GPIO_Init+0x238>)
 8001d18:	f043 0302 	orr.w	r3, r3, #2
 8001d1c:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8001d20:	4b2b      	ldr	r3, [pc, #172]	; (8001dd0 <HAL_GPIO_Init+0x238>)
 8001d22:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001d26:	f003 0302 	and.w	r3, r3, #2
 8001d2a:	60fb      	str	r3, [r7, #12]
 8001d2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d2e:	4a29      	ldr	r2, [pc, #164]	; (8001dd4 <HAL_GPIO_Init+0x23c>)
 8001d30:	69fb      	ldr	r3, [r7, #28]
 8001d32:	089b      	lsrs	r3, r3, #2
 8001d34:	3302      	adds	r3, #2
 8001d36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001d3c:	69fb      	ldr	r3, [r7, #28]
 8001d3e:	f003 0303 	and.w	r3, r3, #3
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	220f      	movs	r2, #15
 8001d46:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4a:	43db      	mvns	r3, r3
 8001d4c:	69ba      	ldr	r2, [r7, #24]
 8001d4e:	4013      	ands	r3, r2
 8001d50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4a20      	ldr	r2, [pc, #128]	; (8001dd8 <HAL_GPIO_Init+0x240>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d052      	beq.n	8001e00 <HAL_GPIO_Init+0x268>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4a1f      	ldr	r2, [pc, #124]	; (8001ddc <HAL_GPIO_Init+0x244>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d031      	beq.n	8001dc6 <HAL_GPIO_Init+0x22e>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	4a1e      	ldr	r2, [pc, #120]	; (8001de0 <HAL_GPIO_Init+0x248>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d02b      	beq.n	8001dc2 <HAL_GPIO_Init+0x22a>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4a1d      	ldr	r2, [pc, #116]	; (8001de4 <HAL_GPIO_Init+0x24c>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d025      	beq.n	8001dbe <HAL_GPIO_Init+0x226>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4a1c      	ldr	r2, [pc, #112]	; (8001de8 <HAL_GPIO_Init+0x250>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d01f      	beq.n	8001dba <HAL_GPIO_Init+0x222>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	4a1b      	ldr	r2, [pc, #108]	; (8001dec <HAL_GPIO_Init+0x254>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d019      	beq.n	8001db6 <HAL_GPIO_Init+0x21e>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4a1a      	ldr	r2, [pc, #104]	; (8001df0 <HAL_GPIO_Init+0x258>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d013      	beq.n	8001db2 <HAL_GPIO_Init+0x21a>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4a19      	ldr	r2, [pc, #100]	; (8001df4 <HAL_GPIO_Init+0x25c>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d00d      	beq.n	8001dae <HAL_GPIO_Init+0x216>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4a18      	ldr	r2, [pc, #96]	; (8001df8 <HAL_GPIO_Init+0x260>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d007      	beq.n	8001daa <HAL_GPIO_Init+0x212>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4a17      	ldr	r2, [pc, #92]	; (8001dfc <HAL_GPIO_Init+0x264>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d101      	bne.n	8001da6 <HAL_GPIO_Init+0x20e>
 8001da2:	2309      	movs	r3, #9
 8001da4:	e02d      	b.n	8001e02 <HAL_GPIO_Init+0x26a>
 8001da6:	230a      	movs	r3, #10
 8001da8:	e02b      	b.n	8001e02 <HAL_GPIO_Init+0x26a>
 8001daa:	2308      	movs	r3, #8
 8001dac:	e029      	b.n	8001e02 <HAL_GPIO_Init+0x26a>
 8001dae:	2307      	movs	r3, #7
 8001db0:	e027      	b.n	8001e02 <HAL_GPIO_Init+0x26a>
 8001db2:	2306      	movs	r3, #6
 8001db4:	e025      	b.n	8001e02 <HAL_GPIO_Init+0x26a>
 8001db6:	2305      	movs	r3, #5
 8001db8:	e023      	b.n	8001e02 <HAL_GPIO_Init+0x26a>
 8001dba:	2304      	movs	r3, #4
 8001dbc:	e021      	b.n	8001e02 <HAL_GPIO_Init+0x26a>
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	e01f      	b.n	8001e02 <HAL_GPIO_Init+0x26a>
 8001dc2:	2302      	movs	r3, #2
 8001dc4:	e01d      	b.n	8001e02 <HAL_GPIO_Init+0x26a>
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e01b      	b.n	8001e02 <HAL_GPIO_Init+0x26a>
 8001dca:	bf00      	nop
 8001dcc:	58000080 	.word	0x58000080
 8001dd0:	58024400 	.word	0x58024400
 8001dd4:	58000400 	.word	0x58000400
 8001dd8:	58020000 	.word	0x58020000
 8001ddc:	58020400 	.word	0x58020400
 8001de0:	58020800 	.word	0x58020800
 8001de4:	58020c00 	.word	0x58020c00
 8001de8:	58021000 	.word	0x58021000
 8001dec:	58021400 	.word	0x58021400
 8001df0:	58021800 	.word	0x58021800
 8001df4:	58021c00 	.word	0x58021c00
 8001df8:	58022000 	.word	0x58022000
 8001dfc:	58022400 	.word	0x58022400
 8001e00:	2300      	movs	r3, #0
 8001e02:	69fa      	ldr	r2, [r7, #28]
 8001e04:	f002 0203 	and.w	r2, r2, #3
 8001e08:	0092      	lsls	r2, r2, #2
 8001e0a:	4093      	lsls	r3, r2
 8001e0c:	69ba      	ldr	r2, [r7, #24]
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e12:	4938      	ldr	r1, [pc, #224]	; (8001ef4 <HAL_GPIO_Init+0x35c>)
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	089b      	lsrs	r3, r3, #2
 8001e18:	3302      	adds	r3, #2
 8001e1a:	69ba      	ldr	r2, [r7, #24]
 8001e1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	43db      	mvns	r3, r3
 8001e2c:	69ba      	ldr	r2, [r7, #24]
 8001e2e:	4013      	ands	r3, r2
 8001e30:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d003      	beq.n	8001e46 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001e3e:	69ba      	ldr	r2, [r7, #24]
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	4313      	orrs	r3, r2
 8001e44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001e46:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e4a:	69bb      	ldr	r3, [r7, #24]
 8001e4c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001e4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	43db      	mvns	r3, r3
 8001e5a:	69ba      	ldr	r2, [r7, #24]
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d003      	beq.n	8001e74 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001e6c:	69ba      	ldr	r2, [r7, #24]
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	4313      	orrs	r3, r2
 8001e72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001e74:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e78:	69bb      	ldr	r3, [r7, #24]
 8001e7a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	43db      	mvns	r3, r3
 8001e86:	69ba      	ldr	r2, [r7, #24]
 8001e88:	4013      	ands	r3, r2
 8001e8a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d003      	beq.n	8001ea0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001e98:	69ba      	ldr	r2, [r7, #24]
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	69ba      	ldr	r2, [r7, #24]
 8001ea4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	43db      	mvns	r3, r3
 8001eb0:	69ba      	ldr	r2, [r7, #24]
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d003      	beq.n	8001eca <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001ec2:	69ba      	ldr	r2, [r7, #24]
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	69ba      	ldr	r2, [r7, #24]
 8001ece:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001ed0:	69fb      	ldr	r3, [r7, #28]
 8001ed2:	3301      	adds	r3, #1
 8001ed4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	fa22 f303 	lsr.w	r3, r2, r3
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	f47f ae63 	bne.w	8001bac <HAL_GPIO_Init+0x14>
  }
}
 8001ee6:	bf00      	nop
 8001ee8:	bf00      	nop
 8001eea:	3724      	adds	r7, #36	; 0x24
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr
 8001ef4:	58000400 	.word	0x58000400

08001ef8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
 8001f00:	460b      	mov	r3, r1
 8001f02:	807b      	strh	r3, [r7, #2]
 8001f04:	4613      	mov	r3, r2
 8001f06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f08:	787b      	ldrb	r3, [r7, #1]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d003      	beq.n	8001f16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f0e:	887a      	ldrh	r2, [r7, #2]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001f14:	e003      	b.n	8001f1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001f16:	887b      	ldrh	r3, [r7, #2]
 8001f18:	041a      	lsls	r2, r3, #16
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	619a      	str	r2, [r3, #24]
}
 8001f1e:	bf00      	nop
 8001f20:	370c      	adds	r7, #12
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
	...

08001f2c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b084      	sub	sp, #16
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001f34:	4b29      	ldr	r3, [pc, #164]	; (8001fdc <HAL_PWREx_ConfigSupply+0xb0>)
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	f003 0307 	and.w	r3, r3, #7
 8001f3c:	2b06      	cmp	r3, #6
 8001f3e:	d00a      	beq.n	8001f56 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001f40:	4b26      	ldr	r3, [pc, #152]	; (8001fdc <HAL_PWREx_ConfigSupply+0xb0>)
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f48:	687a      	ldr	r2, [r7, #4]
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	d001      	beq.n	8001f52 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e040      	b.n	8001fd4 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001f52:	2300      	movs	r3, #0
 8001f54:	e03e      	b.n	8001fd4 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001f56:	4b21      	ldr	r3, [pc, #132]	; (8001fdc <HAL_PWREx_ConfigSupply+0xb0>)
 8001f58:	68db      	ldr	r3, [r3, #12]
 8001f5a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8001f5e:	491f      	ldr	r1, [pc, #124]	; (8001fdc <HAL_PWREx_ConfigSupply+0xb0>)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	4313      	orrs	r3, r2
 8001f64:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001f66:	f7fe ff73 	bl	8000e50 <HAL_GetTick>
 8001f6a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001f6c:	e009      	b.n	8001f82 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001f6e:	f7fe ff6f 	bl	8000e50 <HAL_GetTick>
 8001f72:	4602      	mov	r2, r0
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001f7c:	d901      	bls.n	8001f82 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e028      	b.n	8001fd4 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001f82:	4b16      	ldr	r3, [pc, #88]	; (8001fdc <HAL_PWREx_ConfigSupply+0xb0>)
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f8e:	d1ee      	bne.n	8001f6e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2b1e      	cmp	r3, #30
 8001f94:	d008      	beq.n	8001fa8 <HAL_PWREx_ConfigSupply+0x7c>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2b2e      	cmp	r3, #46	; 0x2e
 8001f9a:	d005      	beq.n	8001fa8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2b1d      	cmp	r3, #29
 8001fa0:	d002      	beq.n	8001fa8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2b2d      	cmp	r3, #45	; 0x2d
 8001fa6:	d114      	bne.n	8001fd2 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001fa8:	f7fe ff52 	bl	8000e50 <HAL_GetTick>
 8001fac:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001fae:	e009      	b.n	8001fc4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001fb0:	f7fe ff4e 	bl	8000e50 <HAL_GetTick>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001fbe:	d901      	bls.n	8001fc4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e007      	b.n	8001fd4 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001fc4:	4b05      	ldr	r3, [pc, #20]	; (8001fdc <HAL_PWREx_ConfigSupply+0xb0>)
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fd0:	d1ee      	bne.n	8001fb0 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001fd2:	2300      	movs	r3, #0
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3710      	adds	r7, #16
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	58024800 	.word	0x58024800

08001fe0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b08c      	sub	sp, #48	; 0x30
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d101      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e3f4      	b.n	80027dc <HAL_RCC_OscConfig+0x7fc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 0301 	and.w	r3, r3, #1
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	f000 80b3 	beq.w	8002166 <HAL_RCC_OscConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002000:	4b95      	ldr	r3, [pc, #596]	; (8002258 <HAL_RCC_OscConfig+0x278>)
 8002002:	691b      	ldr	r3, [r3, #16]
 8002004:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002008:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800200a:	4b93      	ldr	r3, [pc, #588]	; (8002258 <HAL_RCC_OscConfig+0x278>)
 800200c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800200e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002012:	2b10      	cmp	r3, #16
 8002014:	d007      	beq.n	8002026 <HAL_RCC_OscConfig+0x46>
 8002016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002018:	2b18      	cmp	r3, #24
 800201a:	d112      	bne.n	8002042 <HAL_RCC_OscConfig+0x62>
 800201c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800201e:	f003 0303 	and.w	r3, r3, #3
 8002022:	2b02      	cmp	r3, #2
 8002024:	d10d      	bne.n	8002042 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002026:	4b8c      	ldr	r3, [pc, #560]	; (8002258 <HAL_RCC_OscConfig+0x278>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800202e:	2b00      	cmp	r3, #0
 8002030:	f000 8098 	beq.w	8002164 <HAL_RCC_OscConfig+0x184>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	2b00      	cmp	r3, #0
 800203a:	f040 8093 	bne.w	8002164 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e3cc      	b.n	80027dc <HAL_RCC_OscConfig+0x7fc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800204a:	d106      	bne.n	800205a <HAL_RCC_OscConfig+0x7a>
 800204c:	4b82      	ldr	r3, [pc, #520]	; (8002258 <HAL_RCC_OscConfig+0x278>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a81      	ldr	r2, [pc, #516]	; (8002258 <HAL_RCC_OscConfig+0x278>)
 8002052:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002056:	6013      	str	r3, [r2, #0]
 8002058:	e058      	b.n	800210c <HAL_RCC_OscConfig+0x12c>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d112      	bne.n	8002088 <HAL_RCC_OscConfig+0xa8>
 8002062:	4b7d      	ldr	r3, [pc, #500]	; (8002258 <HAL_RCC_OscConfig+0x278>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a7c      	ldr	r2, [pc, #496]	; (8002258 <HAL_RCC_OscConfig+0x278>)
 8002068:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800206c:	6013      	str	r3, [r2, #0]
 800206e:	4b7a      	ldr	r3, [pc, #488]	; (8002258 <HAL_RCC_OscConfig+0x278>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a79      	ldr	r2, [pc, #484]	; (8002258 <HAL_RCC_OscConfig+0x278>)
 8002074:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002078:	6013      	str	r3, [r2, #0]
 800207a:	4b77      	ldr	r3, [pc, #476]	; (8002258 <HAL_RCC_OscConfig+0x278>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a76      	ldr	r2, [pc, #472]	; (8002258 <HAL_RCC_OscConfig+0x278>)
 8002080:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002084:	6013      	str	r3, [r2, #0]
 8002086:	e041      	b.n	800210c <HAL_RCC_OscConfig+0x12c>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002090:	d112      	bne.n	80020b8 <HAL_RCC_OscConfig+0xd8>
 8002092:	4b71      	ldr	r3, [pc, #452]	; (8002258 <HAL_RCC_OscConfig+0x278>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a70      	ldr	r2, [pc, #448]	; (8002258 <HAL_RCC_OscConfig+0x278>)
 8002098:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800209c:	6013      	str	r3, [r2, #0]
 800209e:	4b6e      	ldr	r3, [pc, #440]	; (8002258 <HAL_RCC_OscConfig+0x278>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a6d      	ldr	r2, [pc, #436]	; (8002258 <HAL_RCC_OscConfig+0x278>)
 80020a4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80020a8:	6013      	str	r3, [r2, #0]
 80020aa:	4b6b      	ldr	r3, [pc, #428]	; (8002258 <HAL_RCC_OscConfig+0x278>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a6a      	ldr	r2, [pc, #424]	; (8002258 <HAL_RCC_OscConfig+0x278>)
 80020b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020b4:	6013      	str	r3, [r2, #0]
 80020b6:	e029      	b.n	800210c <HAL_RCC_OscConfig+0x12c>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 80020c0:	d112      	bne.n	80020e8 <HAL_RCC_OscConfig+0x108>
 80020c2:	4b65      	ldr	r3, [pc, #404]	; (8002258 <HAL_RCC_OscConfig+0x278>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a64      	ldr	r2, [pc, #400]	; (8002258 <HAL_RCC_OscConfig+0x278>)
 80020c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020cc:	6013      	str	r3, [r2, #0]
 80020ce:	4b62      	ldr	r3, [pc, #392]	; (8002258 <HAL_RCC_OscConfig+0x278>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a61      	ldr	r2, [pc, #388]	; (8002258 <HAL_RCC_OscConfig+0x278>)
 80020d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80020d8:	6013      	str	r3, [r2, #0]
 80020da:	4b5f      	ldr	r3, [pc, #380]	; (8002258 <HAL_RCC_OscConfig+0x278>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a5e      	ldr	r2, [pc, #376]	; (8002258 <HAL_RCC_OscConfig+0x278>)
 80020e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020e4:	6013      	str	r3, [r2, #0]
 80020e6:	e011      	b.n	800210c <HAL_RCC_OscConfig+0x12c>
 80020e8:	4b5b      	ldr	r3, [pc, #364]	; (8002258 <HAL_RCC_OscConfig+0x278>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a5a      	ldr	r2, [pc, #360]	; (8002258 <HAL_RCC_OscConfig+0x278>)
 80020ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020f2:	6013      	str	r3, [r2, #0]
 80020f4:	4b58      	ldr	r3, [pc, #352]	; (8002258 <HAL_RCC_OscConfig+0x278>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a57      	ldr	r2, [pc, #348]	; (8002258 <HAL_RCC_OscConfig+0x278>)
 80020fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020fe:	6013      	str	r3, [r2, #0]
 8002100:	4b55      	ldr	r3, [pc, #340]	; (8002258 <HAL_RCC_OscConfig+0x278>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a54      	ldr	r2, [pc, #336]	; (8002258 <HAL_RCC_OscConfig+0x278>)
 8002106:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800210a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d013      	beq.n	800213c <HAL_RCC_OscConfig+0x15c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002114:	f7fe fe9c 	bl	8000e50 <HAL_GetTick>
 8002118:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800211a:	e008      	b.n	800212e <HAL_RCC_OscConfig+0x14e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800211c:	f7fe fe98 	bl	8000e50 <HAL_GetTick>
 8002120:	4602      	mov	r2, r0
 8002122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	2b64      	cmp	r3, #100	; 0x64
 8002128:	d901      	bls.n	800212e <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 800212a:	2303      	movs	r3, #3
 800212c:	e356      	b.n	80027dc <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800212e:	4b4a      	ldr	r3, [pc, #296]	; (8002258 <HAL_RCC_OscConfig+0x278>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d0f0      	beq.n	800211c <HAL_RCC_OscConfig+0x13c>
 800213a:	e014      	b.n	8002166 <HAL_RCC_OscConfig+0x186>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800213c:	f7fe fe88 	bl	8000e50 <HAL_GetTick>
 8002140:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002142:	e008      	b.n	8002156 <HAL_RCC_OscConfig+0x176>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002144:	f7fe fe84 	bl	8000e50 <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	2b64      	cmp	r3, #100	; 0x64
 8002150:	d901      	bls.n	8002156 <HAL_RCC_OscConfig+0x176>
          {
            return HAL_TIMEOUT;
 8002152:	2303      	movs	r3, #3
 8002154:	e342      	b.n	80027dc <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002156:	4b40      	ldr	r3, [pc, #256]	; (8002258 <HAL_RCC_OscConfig+0x278>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800215e:	2b00      	cmp	r3, #0
 8002160:	d1f0      	bne.n	8002144 <HAL_RCC_OscConfig+0x164>
 8002162:	e000      	b.n	8002166 <HAL_RCC_OscConfig+0x186>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002164:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 0302 	and.w	r3, r3, #2
 800216e:	2b00      	cmp	r3, #0
 8002170:	f000 808d 	beq.w	800228e <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002174:	4b38      	ldr	r3, [pc, #224]	; (8002258 <HAL_RCC_OscConfig+0x278>)
 8002176:	691b      	ldr	r3, [r3, #16]
 8002178:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800217c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800217e:	4b36      	ldr	r3, [pc, #216]	; (8002258 <HAL_RCC_OscConfig+0x278>)
 8002180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002182:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002184:	6a3b      	ldr	r3, [r7, #32]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d007      	beq.n	800219a <HAL_RCC_OscConfig+0x1ba>
 800218a:	6a3b      	ldr	r3, [r7, #32]
 800218c:	2b18      	cmp	r3, #24
 800218e:	d137      	bne.n	8002200 <HAL_RCC_OscConfig+0x220>
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	f003 0303 	and.w	r3, r3, #3
 8002196:	2b00      	cmp	r3, #0
 8002198:	d132      	bne.n	8002200 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800219a:	4b2f      	ldr	r3, [pc, #188]	; (8002258 <HAL_RCC_OscConfig+0x278>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 0304 	and.w	r3, r3, #4
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d005      	beq.n	80021b2 <HAL_RCC_OscConfig+0x1d2>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	68db      	ldr	r3, [r3, #12]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d101      	bne.n	80021b2 <HAL_RCC_OscConfig+0x1d2>
      {
        return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e314      	b.n	80027dc <HAL_RCC_OscConfig+0x7fc>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80021b2:	4b29      	ldr	r3, [pc, #164]	; (8002258 <HAL_RCC_OscConfig+0x278>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f023 0219 	bic.w	r2, r3, #25
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	68db      	ldr	r3, [r3, #12]
 80021be:	4926      	ldr	r1, [pc, #152]	; (8002258 <HAL_RCC_OscConfig+0x278>)
 80021c0:	4313      	orrs	r3, r2
 80021c2:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80021c4:	f7fe fe44 	bl	8000e50 <HAL_GetTick>
 80021c8:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80021ca:	e008      	b.n	80021de <HAL_RCC_OscConfig+0x1fe>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021cc:	f7fe fe40 	bl	8000e50 <HAL_GetTick>
 80021d0:	4602      	mov	r2, r0
 80021d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	2b02      	cmp	r3, #2
 80021d8:	d901      	bls.n	80021de <HAL_RCC_OscConfig+0x1fe>
            {
              return HAL_TIMEOUT;
 80021da:	2303      	movs	r3, #3
 80021dc:	e2fe      	b.n	80027dc <HAL_RCC_OscConfig+0x7fc>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80021de:	4b1e      	ldr	r3, [pc, #120]	; (8002258 <HAL_RCC_OscConfig+0x278>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0304 	and.w	r3, r3, #4
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d0f0      	beq.n	80021cc <HAL_RCC_OscConfig+0x1ec>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021ea:	4b1b      	ldr	r3, [pc, #108]	; (8002258 <HAL_RCC_OscConfig+0x278>)
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	691b      	ldr	r3, [r3, #16]
 80021f6:	061b      	lsls	r3, r3, #24
 80021f8:	4917      	ldr	r1, [pc, #92]	; (8002258 <HAL_RCC_OscConfig+0x278>)
 80021fa:	4313      	orrs	r3, r2
 80021fc:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021fe:	e046      	b.n	800228e <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d029      	beq.n	800225c <HAL_RCC_OscConfig+0x27c>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002208:	4b13      	ldr	r3, [pc, #76]	; (8002258 <HAL_RCC_OscConfig+0x278>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f023 0219 	bic.w	r2, r3, #25
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	4910      	ldr	r1, [pc, #64]	; (8002258 <HAL_RCC_OscConfig+0x278>)
 8002216:	4313      	orrs	r3, r2
 8002218:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800221a:	f7fe fe19 	bl	8000e50 <HAL_GetTick>
 800221e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002220:	e008      	b.n	8002234 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002222:	f7fe fe15 	bl	8000e50 <HAL_GetTick>
 8002226:	4602      	mov	r2, r0
 8002228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222a:	1ad3      	subs	r3, r2, r3
 800222c:	2b02      	cmp	r3, #2
 800222e:	d901      	bls.n	8002234 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 8002230:	2303      	movs	r3, #3
 8002232:	e2d3      	b.n	80027dc <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002234:	4b08      	ldr	r3, [pc, #32]	; (8002258 <HAL_RCC_OscConfig+0x278>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 0304 	and.w	r3, r3, #4
 800223c:	2b00      	cmp	r3, #0
 800223e:	d0f0      	beq.n	8002222 <HAL_RCC_OscConfig+0x242>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002240:	4b05      	ldr	r3, [pc, #20]	; (8002258 <HAL_RCC_OscConfig+0x278>)
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	691b      	ldr	r3, [r3, #16]
 800224c:	061b      	lsls	r3, r3, #24
 800224e:	4902      	ldr	r1, [pc, #8]	; (8002258 <HAL_RCC_OscConfig+0x278>)
 8002250:	4313      	orrs	r3, r2
 8002252:	604b      	str	r3, [r1, #4]
 8002254:	e01b      	b.n	800228e <HAL_RCC_OscConfig+0x2ae>
 8002256:	bf00      	nop
 8002258:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800225c:	4b97      	ldr	r3, [pc, #604]	; (80024bc <HAL_RCC_OscConfig+0x4dc>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a96      	ldr	r2, [pc, #600]	; (80024bc <HAL_RCC_OscConfig+0x4dc>)
 8002262:	f023 0301 	bic.w	r3, r3, #1
 8002266:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002268:	f7fe fdf2 	bl	8000e50 <HAL_GetTick>
 800226c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800226e:	e008      	b.n	8002282 <HAL_RCC_OscConfig+0x2a2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002270:	f7fe fdee 	bl	8000e50 <HAL_GetTick>
 8002274:	4602      	mov	r2, r0
 8002276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	2b02      	cmp	r3, #2
 800227c:	d901      	bls.n	8002282 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 800227e:	2303      	movs	r3, #3
 8002280:	e2ac      	b.n	80027dc <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002282:	4b8e      	ldr	r3, [pc, #568]	; (80024bc <HAL_RCC_OscConfig+0x4dc>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 0304 	and.w	r3, r3, #4
 800228a:	2b00      	cmp	r3, #0
 800228c:	d1f0      	bne.n	8002270 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 0310 	and.w	r3, r3, #16
 8002296:	2b00      	cmp	r3, #0
 8002298:	d06a      	beq.n	8002370 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800229a:	4b88      	ldr	r3, [pc, #544]	; (80024bc <HAL_RCC_OscConfig+0x4dc>)
 800229c:	691b      	ldr	r3, [r3, #16]
 800229e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80022a2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80022a4:	4b85      	ldr	r3, [pc, #532]	; (80024bc <HAL_RCC_OscConfig+0x4dc>)
 80022a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022a8:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80022aa:	69bb      	ldr	r3, [r7, #24]
 80022ac:	2b08      	cmp	r3, #8
 80022ae:	d007      	beq.n	80022c0 <HAL_RCC_OscConfig+0x2e0>
 80022b0:	69bb      	ldr	r3, [r7, #24]
 80022b2:	2b18      	cmp	r3, #24
 80022b4:	d11b      	bne.n	80022ee <HAL_RCC_OscConfig+0x30e>
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	f003 0303 	and.w	r3, r3, #3
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d116      	bne.n	80022ee <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80022c0:	4b7e      	ldr	r3, [pc, #504]	; (80024bc <HAL_RCC_OscConfig+0x4dc>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d005      	beq.n	80022d8 <HAL_RCC_OscConfig+0x2f8>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	69db      	ldr	r3, [r3, #28]
 80022d0:	2b80      	cmp	r3, #128	; 0x80
 80022d2:	d001      	beq.n	80022d8 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	e281      	b.n	80027dc <HAL_RCC_OscConfig+0x7fc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80022d8:	4b78      	ldr	r3, [pc, #480]	; (80024bc <HAL_RCC_OscConfig+0x4dc>)
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6a1b      	ldr	r3, [r3, #32]
 80022e4:	061b      	lsls	r3, r3, #24
 80022e6:	4975      	ldr	r1, [pc, #468]	; (80024bc <HAL_RCC_OscConfig+0x4dc>)
 80022e8:	4313      	orrs	r3, r2
 80022ea:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80022ec:	e040      	b.n	8002370 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	69db      	ldr	r3, [r3, #28]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d023      	beq.n	800233e <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80022f6:	4b71      	ldr	r3, [pc, #452]	; (80024bc <HAL_RCC_OscConfig+0x4dc>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a70      	ldr	r2, [pc, #448]	; (80024bc <HAL_RCC_OscConfig+0x4dc>)
 80022fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002300:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002302:	f7fe fda5 	bl	8000e50 <HAL_GetTick>
 8002306:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002308:	e008      	b.n	800231c <HAL_RCC_OscConfig+0x33c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800230a:	f7fe fda1 	bl	8000e50 <HAL_GetTick>
 800230e:	4602      	mov	r2, r0
 8002310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002312:	1ad3      	subs	r3, r2, r3
 8002314:	2b02      	cmp	r3, #2
 8002316:	d901      	bls.n	800231c <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8002318:	2303      	movs	r3, #3
 800231a:	e25f      	b.n	80027dc <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800231c:	4b67      	ldr	r3, [pc, #412]	; (80024bc <HAL_RCC_OscConfig+0x4dc>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002324:	2b00      	cmp	r3, #0
 8002326:	d0f0      	beq.n	800230a <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002328:	4b64      	ldr	r3, [pc, #400]	; (80024bc <HAL_RCC_OscConfig+0x4dc>)
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6a1b      	ldr	r3, [r3, #32]
 8002334:	061b      	lsls	r3, r3, #24
 8002336:	4961      	ldr	r1, [pc, #388]	; (80024bc <HAL_RCC_OscConfig+0x4dc>)
 8002338:	4313      	orrs	r3, r2
 800233a:	60cb      	str	r3, [r1, #12]
 800233c:	e018      	b.n	8002370 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800233e:	4b5f      	ldr	r3, [pc, #380]	; (80024bc <HAL_RCC_OscConfig+0x4dc>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a5e      	ldr	r2, [pc, #376]	; (80024bc <HAL_RCC_OscConfig+0x4dc>)
 8002344:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002348:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800234a:	f7fe fd81 	bl	8000e50 <HAL_GetTick>
 800234e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002350:	e008      	b.n	8002364 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002352:	f7fe fd7d 	bl	8000e50 <HAL_GetTick>
 8002356:	4602      	mov	r2, r0
 8002358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235a:	1ad3      	subs	r3, r2, r3
 800235c:	2b02      	cmp	r3, #2
 800235e:	d901      	bls.n	8002364 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8002360:	2303      	movs	r3, #3
 8002362:	e23b      	b.n	80027dc <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002364:	4b55      	ldr	r3, [pc, #340]	; (80024bc <HAL_RCC_OscConfig+0x4dc>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800236c:	2b00      	cmp	r3, #0
 800236e:	d1f0      	bne.n	8002352 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0308 	and.w	r3, r3, #8
 8002378:	2b00      	cmp	r3, #0
 800237a:	d036      	beq.n	80023ea <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	695b      	ldr	r3, [r3, #20]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d019      	beq.n	80023b8 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002384:	4b4d      	ldr	r3, [pc, #308]	; (80024bc <HAL_RCC_OscConfig+0x4dc>)
 8002386:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002388:	4a4c      	ldr	r2, [pc, #304]	; (80024bc <HAL_RCC_OscConfig+0x4dc>)
 800238a:	f043 0301 	orr.w	r3, r3, #1
 800238e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002390:	f7fe fd5e 	bl	8000e50 <HAL_GetTick>
 8002394:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002396:	e008      	b.n	80023aa <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002398:	f7fe fd5a 	bl	8000e50 <HAL_GetTick>
 800239c:	4602      	mov	r2, r0
 800239e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d901      	bls.n	80023aa <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80023a6:	2303      	movs	r3, #3
 80023a8:	e218      	b.n	80027dc <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80023aa:	4b44      	ldr	r3, [pc, #272]	; (80024bc <HAL_RCC_OscConfig+0x4dc>)
 80023ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023ae:	f003 0302 	and.w	r3, r3, #2
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d0f0      	beq.n	8002398 <HAL_RCC_OscConfig+0x3b8>
 80023b6:	e018      	b.n	80023ea <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023b8:	4b40      	ldr	r3, [pc, #256]	; (80024bc <HAL_RCC_OscConfig+0x4dc>)
 80023ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023bc:	4a3f      	ldr	r2, [pc, #252]	; (80024bc <HAL_RCC_OscConfig+0x4dc>)
 80023be:	f023 0301 	bic.w	r3, r3, #1
 80023c2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023c4:	f7fe fd44 	bl	8000e50 <HAL_GetTick>
 80023c8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80023ca:	e008      	b.n	80023de <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023cc:	f7fe fd40 	bl	8000e50 <HAL_GetTick>
 80023d0:	4602      	mov	r2, r0
 80023d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	d901      	bls.n	80023de <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80023da:	2303      	movs	r3, #3
 80023dc:	e1fe      	b.n	80027dc <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80023de:	4b37      	ldr	r3, [pc, #220]	; (80024bc <HAL_RCC_OscConfig+0x4dc>)
 80023e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023e2:	f003 0302 	and.w	r3, r3, #2
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d1f0      	bne.n	80023cc <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0320 	and.w	r3, r3, #32
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d036      	beq.n	8002464 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	699b      	ldr	r3, [r3, #24]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d019      	beq.n	8002432 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80023fe:	4b2f      	ldr	r3, [pc, #188]	; (80024bc <HAL_RCC_OscConfig+0x4dc>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a2e      	ldr	r2, [pc, #184]	; (80024bc <HAL_RCC_OscConfig+0x4dc>)
 8002404:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002408:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800240a:	f7fe fd21 	bl	8000e50 <HAL_GetTick>
 800240e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002410:	e008      	b.n	8002424 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002412:	f7fe fd1d 	bl	8000e50 <HAL_GetTick>
 8002416:	4602      	mov	r2, r0
 8002418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	2b02      	cmp	r3, #2
 800241e:	d901      	bls.n	8002424 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002420:	2303      	movs	r3, #3
 8002422:	e1db      	b.n	80027dc <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002424:	4b25      	ldr	r3, [pc, #148]	; (80024bc <HAL_RCC_OscConfig+0x4dc>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800242c:	2b00      	cmp	r3, #0
 800242e:	d0f0      	beq.n	8002412 <HAL_RCC_OscConfig+0x432>
 8002430:	e018      	b.n	8002464 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002432:	4b22      	ldr	r3, [pc, #136]	; (80024bc <HAL_RCC_OscConfig+0x4dc>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a21      	ldr	r2, [pc, #132]	; (80024bc <HAL_RCC_OscConfig+0x4dc>)
 8002438:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800243c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800243e:	f7fe fd07 	bl	8000e50 <HAL_GetTick>
 8002442:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002444:	e008      	b.n	8002458 <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002446:	f7fe fd03 	bl	8000e50 <HAL_GetTick>
 800244a:	4602      	mov	r2, r0
 800244c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244e:	1ad3      	subs	r3, r2, r3
 8002450:	2b02      	cmp	r3, #2
 8002452:	d901      	bls.n	8002458 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8002454:	2303      	movs	r3, #3
 8002456:	e1c1      	b.n	80027dc <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002458:	4b18      	ldr	r3, [pc, #96]	; (80024bc <HAL_RCC_OscConfig+0x4dc>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002460:	2b00      	cmp	r3, #0
 8002462:	d1f0      	bne.n	8002446 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 0304 	and.w	r3, r3, #4
 800246c:	2b00      	cmp	r3, #0
 800246e:	f000 80af 	beq.w	80025d0 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002472:	4b13      	ldr	r3, [pc, #76]	; (80024c0 <HAL_RCC_OscConfig+0x4e0>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a12      	ldr	r2, [pc, #72]	; (80024c0 <HAL_RCC_OscConfig+0x4e0>)
 8002478:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800247c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800247e:	f7fe fce7 	bl	8000e50 <HAL_GetTick>
 8002482:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002484:	e008      	b.n	8002498 <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002486:	f7fe fce3 	bl	8000e50 <HAL_GetTick>
 800248a:	4602      	mov	r2, r0
 800248c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248e:	1ad3      	subs	r3, r2, r3
 8002490:	2b64      	cmp	r3, #100	; 0x64
 8002492:	d901      	bls.n	8002498 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8002494:	2303      	movs	r3, #3
 8002496:	e1a1      	b.n	80027dc <HAL_RCC_OscConfig+0x7fc>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002498:	4b09      	ldr	r3, [pc, #36]	; (80024c0 <HAL_RCC_OscConfig+0x4e0>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d0f0      	beq.n	8002486 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d10b      	bne.n	80024c4 <HAL_RCC_OscConfig+0x4e4>
 80024ac:	4b03      	ldr	r3, [pc, #12]	; (80024bc <HAL_RCC_OscConfig+0x4dc>)
 80024ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024b0:	4a02      	ldr	r2, [pc, #8]	; (80024bc <HAL_RCC_OscConfig+0x4dc>)
 80024b2:	f043 0301 	orr.w	r3, r3, #1
 80024b6:	6713      	str	r3, [r2, #112]	; 0x70
 80024b8:	e05b      	b.n	8002572 <HAL_RCC_OscConfig+0x592>
 80024ba:	bf00      	nop
 80024bc:	58024400 	.word	0x58024400
 80024c0:	58024800 	.word	0x58024800
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d112      	bne.n	80024f2 <HAL_RCC_OscConfig+0x512>
 80024cc:	4b9d      	ldr	r3, [pc, #628]	; (8002744 <HAL_RCC_OscConfig+0x764>)
 80024ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024d0:	4a9c      	ldr	r2, [pc, #624]	; (8002744 <HAL_RCC_OscConfig+0x764>)
 80024d2:	f023 0301 	bic.w	r3, r3, #1
 80024d6:	6713      	str	r3, [r2, #112]	; 0x70
 80024d8:	4b9a      	ldr	r3, [pc, #616]	; (8002744 <HAL_RCC_OscConfig+0x764>)
 80024da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024dc:	4a99      	ldr	r2, [pc, #612]	; (8002744 <HAL_RCC_OscConfig+0x764>)
 80024de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80024e2:	6713      	str	r3, [r2, #112]	; 0x70
 80024e4:	4b97      	ldr	r3, [pc, #604]	; (8002744 <HAL_RCC_OscConfig+0x764>)
 80024e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024e8:	4a96      	ldr	r2, [pc, #600]	; (8002744 <HAL_RCC_OscConfig+0x764>)
 80024ea:	f023 0304 	bic.w	r3, r3, #4
 80024ee:	6713      	str	r3, [r2, #112]	; 0x70
 80024f0:	e03f      	b.n	8002572 <HAL_RCC_OscConfig+0x592>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	2b05      	cmp	r3, #5
 80024f8:	d112      	bne.n	8002520 <HAL_RCC_OscConfig+0x540>
 80024fa:	4b92      	ldr	r3, [pc, #584]	; (8002744 <HAL_RCC_OscConfig+0x764>)
 80024fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024fe:	4a91      	ldr	r2, [pc, #580]	; (8002744 <HAL_RCC_OscConfig+0x764>)
 8002500:	f043 0304 	orr.w	r3, r3, #4
 8002504:	6713      	str	r3, [r2, #112]	; 0x70
 8002506:	4b8f      	ldr	r3, [pc, #572]	; (8002744 <HAL_RCC_OscConfig+0x764>)
 8002508:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800250a:	4a8e      	ldr	r2, [pc, #568]	; (8002744 <HAL_RCC_OscConfig+0x764>)
 800250c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002510:	6713      	str	r3, [r2, #112]	; 0x70
 8002512:	4b8c      	ldr	r3, [pc, #560]	; (8002744 <HAL_RCC_OscConfig+0x764>)
 8002514:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002516:	4a8b      	ldr	r2, [pc, #556]	; (8002744 <HAL_RCC_OscConfig+0x764>)
 8002518:	f043 0301 	orr.w	r3, r3, #1
 800251c:	6713      	str	r3, [r2, #112]	; 0x70
 800251e:	e028      	b.n	8002572 <HAL_RCC_OscConfig+0x592>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	2b85      	cmp	r3, #133	; 0x85
 8002526:	d112      	bne.n	800254e <HAL_RCC_OscConfig+0x56e>
 8002528:	4b86      	ldr	r3, [pc, #536]	; (8002744 <HAL_RCC_OscConfig+0x764>)
 800252a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800252c:	4a85      	ldr	r2, [pc, #532]	; (8002744 <HAL_RCC_OscConfig+0x764>)
 800252e:	f043 0304 	orr.w	r3, r3, #4
 8002532:	6713      	str	r3, [r2, #112]	; 0x70
 8002534:	4b83      	ldr	r3, [pc, #524]	; (8002744 <HAL_RCC_OscConfig+0x764>)
 8002536:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002538:	4a82      	ldr	r2, [pc, #520]	; (8002744 <HAL_RCC_OscConfig+0x764>)
 800253a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800253e:	6713      	str	r3, [r2, #112]	; 0x70
 8002540:	4b80      	ldr	r3, [pc, #512]	; (8002744 <HAL_RCC_OscConfig+0x764>)
 8002542:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002544:	4a7f      	ldr	r2, [pc, #508]	; (8002744 <HAL_RCC_OscConfig+0x764>)
 8002546:	f043 0301 	orr.w	r3, r3, #1
 800254a:	6713      	str	r3, [r2, #112]	; 0x70
 800254c:	e011      	b.n	8002572 <HAL_RCC_OscConfig+0x592>
 800254e:	4b7d      	ldr	r3, [pc, #500]	; (8002744 <HAL_RCC_OscConfig+0x764>)
 8002550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002552:	4a7c      	ldr	r2, [pc, #496]	; (8002744 <HAL_RCC_OscConfig+0x764>)
 8002554:	f023 0301 	bic.w	r3, r3, #1
 8002558:	6713      	str	r3, [r2, #112]	; 0x70
 800255a:	4b7a      	ldr	r3, [pc, #488]	; (8002744 <HAL_RCC_OscConfig+0x764>)
 800255c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800255e:	4a79      	ldr	r2, [pc, #484]	; (8002744 <HAL_RCC_OscConfig+0x764>)
 8002560:	f023 0304 	bic.w	r3, r3, #4
 8002564:	6713      	str	r3, [r2, #112]	; 0x70
 8002566:	4b77      	ldr	r3, [pc, #476]	; (8002744 <HAL_RCC_OscConfig+0x764>)
 8002568:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800256a:	4a76      	ldr	r2, [pc, #472]	; (8002744 <HAL_RCC_OscConfig+0x764>)
 800256c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002570:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d015      	beq.n	80025a6 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800257a:	f7fe fc69 	bl	8000e50 <HAL_GetTick>
 800257e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002580:	e00a      	b.n	8002598 <HAL_RCC_OscConfig+0x5b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002582:	f7fe fc65 	bl	8000e50 <HAL_GetTick>
 8002586:	4602      	mov	r2, r0
 8002588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800258a:	1ad3      	subs	r3, r2, r3
 800258c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002590:	4293      	cmp	r3, r2
 8002592:	d901      	bls.n	8002598 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8002594:	2303      	movs	r3, #3
 8002596:	e121      	b.n	80027dc <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002598:	4b6a      	ldr	r3, [pc, #424]	; (8002744 <HAL_RCC_OscConfig+0x764>)
 800259a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800259c:	f003 0302 	and.w	r3, r3, #2
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d0ee      	beq.n	8002582 <HAL_RCC_OscConfig+0x5a2>
 80025a4:	e014      	b.n	80025d0 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025a6:	f7fe fc53 	bl	8000e50 <HAL_GetTick>
 80025aa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80025ac:	e00a      	b.n	80025c4 <HAL_RCC_OscConfig+0x5e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025ae:	f7fe fc4f 	bl	8000e50 <HAL_GetTick>
 80025b2:	4602      	mov	r2, r0
 80025b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b6:	1ad3      	subs	r3, r2, r3
 80025b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80025bc:	4293      	cmp	r3, r2
 80025be:	d901      	bls.n	80025c4 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 80025c0:	2303      	movs	r3, #3
 80025c2:	e10b      	b.n	80027dc <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80025c4:	4b5f      	ldr	r3, [pc, #380]	; (8002744 <HAL_RCC_OscConfig+0x764>)
 80025c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025c8:	f003 0302 	and.w	r3, r3, #2
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d1ee      	bne.n	80025ae <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	f000 8100 	beq.w	80027da <HAL_RCC_OscConfig+0x7fa>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80025da:	4b5a      	ldr	r3, [pc, #360]	; (8002744 <HAL_RCC_OscConfig+0x764>)
 80025dc:	691b      	ldr	r3, [r3, #16]
 80025de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80025e2:	2b18      	cmp	r3, #24
 80025e4:	f000 80bb 	beq.w	800275e <HAL_RCC_OscConfig+0x77e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ec:	2b02      	cmp	r3, #2
 80025ee:	f040 8095 	bne.w	800271c <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025f2:	4b54      	ldr	r3, [pc, #336]	; (8002744 <HAL_RCC_OscConfig+0x764>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a53      	ldr	r2, [pc, #332]	; (8002744 <HAL_RCC_OscConfig+0x764>)
 80025f8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80025fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025fe:	f7fe fc27 	bl	8000e50 <HAL_GetTick>
 8002602:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002604:	e008      	b.n	8002618 <HAL_RCC_OscConfig+0x638>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002606:	f7fe fc23 	bl	8000e50 <HAL_GetTick>
 800260a:	4602      	mov	r2, r0
 800260c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260e:	1ad3      	subs	r3, r2, r3
 8002610:	2b02      	cmp	r3, #2
 8002612:	d901      	bls.n	8002618 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8002614:	2303      	movs	r3, #3
 8002616:	e0e1      	b.n	80027dc <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002618:	4b4a      	ldr	r3, [pc, #296]	; (8002744 <HAL_RCC_OscConfig+0x764>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002620:	2b00      	cmp	r3, #0
 8002622:	d1f0      	bne.n	8002606 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002624:	4b47      	ldr	r3, [pc, #284]	; (8002744 <HAL_RCC_OscConfig+0x764>)
 8002626:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002628:	4b47      	ldr	r3, [pc, #284]	; (8002748 <HAL_RCC_OscConfig+0x768>)
 800262a:	4013      	ands	r3, r2
 800262c:	687a      	ldr	r2, [r7, #4]
 800262e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002630:	687a      	ldr	r2, [r7, #4]
 8002632:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002634:	0112      	lsls	r2, r2, #4
 8002636:	430a      	orrs	r2, r1
 8002638:	4942      	ldr	r1, [pc, #264]	; (8002744 <HAL_RCC_OscConfig+0x764>)
 800263a:	4313      	orrs	r3, r2
 800263c:	628b      	str	r3, [r1, #40]	; 0x28
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002642:	3b01      	subs	r3, #1
 8002644:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800264c:	3b01      	subs	r3, #1
 800264e:	025b      	lsls	r3, r3, #9
 8002650:	b29b      	uxth	r3, r3
 8002652:	431a      	orrs	r2, r3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002658:	3b01      	subs	r3, #1
 800265a:	041b      	lsls	r3, r3, #16
 800265c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002660:	431a      	orrs	r2, r3
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002666:	3b01      	subs	r3, #1
 8002668:	061b      	lsls	r3, r3, #24
 800266a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800266e:	4935      	ldr	r1, [pc, #212]	; (8002744 <HAL_RCC_OscConfig+0x764>)
 8002670:	4313      	orrs	r3, r2
 8002672:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002674:	4b33      	ldr	r3, [pc, #204]	; (8002744 <HAL_RCC_OscConfig+0x764>)
 8002676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002678:	4a32      	ldr	r2, [pc, #200]	; (8002744 <HAL_RCC_OscConfig+0x764>)
 800267a:	f023 0301 	bic.w	r3, r3, #1
 800267e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002680:	4b30      	ldr	r3, [pc, #192]	; (8002744 <HAL_RCC_OscConfig+0x764>)
 8002682:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002684:	4b31      	ldr	r3, [pc, #196]	; (800274c <HAL_RCC_OscConfig+0x76c>)
 8002686:	4013      	ands	r3, r2
 8002688:	687a      	ldr	r2, [r7, #4]
 800268a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800268c:	00d2      	lsls	r2, r2, #3
 800268e:	492d      	ldr	r1, [pc, #180]	; (8002744 <HAL_RCC_OscConfig+0x764>)
 8002690:	4313      	orrs	r3, r2
 8002692:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002694:	4b2b      	ldr	r3, [pc, #172]	; (8002744 <HAL_RCC_OscConfig+0x764>)
 8002696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002698:	f023 020c 	bic.w	r2, r3, #12
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a0:	4928      	ldr	r1, [pc, #160]	; (8002744 <HAL_RCC_OscConfig+0x764>)
 80026a2:	4313      	orrs	r3, r2
 80026a4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80026a6:	4b27      	ldr	r3, [pc, #156]	; (8002744 <HAL_RCC_OscConfig+0x764>)
 80026a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026aa:	f023 0202 	bic.w	r2, r3, #2
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b2:	4924      	ldr	r1, [pc, #144]	; (8002744 <HAL_RCC_OscConfig+0x764>)
 80026b4:	4313      	orrs	r3, r2
 80026b6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80026b8:	4b22      	ldr	r3, [pc, #136]	; (8002744 <HAL_RCC_OscConfig+0x764>)
 80026ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026bc:	4a21      	ldr	r2, [pc, #132]	; (8002744 <HAL_RCC_OscConfig+0x764>)
 80026be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026c2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80026c4:	4b1f      	ldr	r3, [pc, #124]	; (8002744 <HAL_RCC_OscConfig+0x764>)
 80026c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c8:	4a1e      	ldr	r2, [pc, #120]	; (8002744 <HAL_RCC_OscConfig+0x764>)
 80026ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026ce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80026d0:	4b1c      	ldr	r3, [pc, #112]	; (8002744 <HAL_RCC_OscConfig+0x764>)
 80026d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026d4:	4a1b      	ldr	r2, [pc, #108]	; (8002744 <HAL_RCC_OscConfig+0x764>)
 80026d6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026da:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80026dc:	4b19      	ldr	r3, [pc, #100]	; (8002744 <HAL_RCC_OscConfig+0x764>)
 80026de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026e0:	4a18      	ldr	r2, [pc, #96]	; (8002744 <HAL_RCC_OscConfig+0x764>)
 80026e2:	f043 0301 	orr.w	r3, r3, #1
 80026e6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026e8:	4b16      	ldr	r3, [pc, #88]	; (8002744 <HAL_RCC_OscConfig+0x764>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a15      	ldr	r2, [pc, #84]	; (8002744 <HAL_RCC_OscConfig+0x764>)
 80026ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026f4:	f7fe fbac 	bl	8000e50 <HAL_GetTick>
 80026f8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80026fa:	e008      	b.n	800270e <HAL_RCC_OscConfig+0x72e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026fc:	f7fe fba8 	bl	8000e50 <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	2b02      	cmp	r3, #2
 8002708:	d901      	bls.n	800270e <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e066      	b.n	80027dc <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800270e:	4b0d      	ldr	r3, [pc, #52]	; (8002744 <HAL_RCC_OscConfig+0x764>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d0f0      	beq.n	80026fc <HAL_RCC_OscConfig+0x71c>
 800271a:	e05e      	b.n	80027da <HAL_RCC_OscConfig+0x7fa>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800271c:	4b09      	ldr	r3, [pc, #36]	; (8002744 <HAL_RCC_OscConfig+0x764>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a08      	ldr	r2, [pc, #32]	; (8002744 <HAL_RCC_OscConfig+0x764>)
 8002722:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002726:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002728:	f7fe fb92 	bl	8000e50 <HAL_GetTick>
 800272c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800272e:	e00f      	b.n	8002750 <HAL_RCC_OscConfig+0x770>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002730:	f7fe fb8e 	bl	8000e50 <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	2b02      	cmp	r3, #2
 800273c:	d908      	bls.n	8002750 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	e04c      	b.n	80027dc <HAL_RCC_OscConfig+0x7fc>
 8002742:	bf00      	nop
 8002744:	58024400 	.word	0x58024400
 8002748:	fffffc0c 	.word	0xfffffc0c
 800274c:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002750:	4b24      	ldr	r3, [pc, #144]	; (80027e4 <HAL_RCC_OscConfig+0x804>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002758:	2b00      	cmp	r3, #0
 800275a:	d1e9      	bne.n	8002730 <HAL_RCC_OscConfig+0x750>
 800275c:	e03d      	b.n	80027da <HAL_RCC_OscConfig+0x7fa>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800275e:	4b21      	ldr	r3, [pc, #132]	; (80027e4 <HAL_RCC_OscConfig+0x804>)
 8002760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002762:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002764:	4b1f      	ldr	r3, [pc, #124]	; (80027e4 <HAL_RCC_OscConfig+0x804>)
 8002766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002768:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800276e:	2b01      	cmp	r3, #1
 8002770:	d031      	beq.n	80027d6 <HAL_RCC_OscConfig+0x7f6>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	f003 0203 	and.w	r2, r3, #3
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800277c:	429a      	cmp	r2, r3
 800277e:	d12a      	bne.n	80027d6 <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	091b      	lsrs	r3, r3, #4
 8002784:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800278c:	429a      	cmp	r2, r3
 800278e:	d122      	bne.n	80027d6 <HAL_RCC_OscConfig+0x7f6>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279a:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800279c:	429a      	cmp	r2, r3
 800279e:	d11a      	bne.n	80027d6 <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	0a5b      	lsrs	r3, r3, #9
 80027a4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027ac:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80027ae:	429a      	cmp	r2, r3
 80027b0:	d111      	bne.n	80027d6 <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	0c1b      	lsrs	r3, r3, #16
 80027b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027be:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d108      	bne.n	80027d6 <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	0e1b      	lsrs	r3, r3, #24
 80027c8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027d0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80027d2:	429a      	cmp	r2, r3
 80027d4:	d001      	beq.n	80027da <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e000      	b.n	80027dc <HAL_RCC_OscConfig+0x7fc>
      }
    }
  }
  return HAL_OK;
 80027da:	2300      	movs	r3, #0
}
 80027dc:	4618      	mov	r0, r3
 80027de:	3730      	adds	r7, #48	; 0x30
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	58024400 	.word	0x58024400

080027e8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b086      	sub	sp, #24
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d101      	bne.n	80027fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	e19c      	b.n	8002b36 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027fc:	4b8a      	ldr	r3, [pc, #552]	; (8002a28 <HAL_RCC_ClockConfig+0x240>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 030f 	and.w	r3, r3, #15
 8002804:	683a      	ldr	r2, [r7, #0]
 8002806:	429a      	cmp	r2, r3
 8002808:	d910      	bls.n	800282c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800280a:	4b87      	ldr	r3, [pc, #540]	; (8002a28 <HAL_RCC_ClockConfig+0x240>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f023 020f 	bic.w	r2, r3, #15
 8002812:	4985      	ldr	r1, [pc, #532]	; (8002a28 <HAL_RCC_ClockConfig+0x240>)
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	4313      	orrs	r3, r2
 8002818:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800281a:	4b83      	ldr	r3, [pc, #524]	; (8002a28 <HAL_RCC_ClockConfig+0x240>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 030f 	and.w	r3, r3, #15
 8002822:	683a      	ldr	r2, [r7, #0]
 8002824:	429a      	cmp	r2, r3
 8002826:	d001      	beq.n	800282c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e184      	b.n	8002b36 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 0304 	and.w	r3, r3, #4
 8002834:	2b00      	cmp	r3, #0
 8002836:	d010      	beq.n	800285a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	691a      	ldr	r2, [r3, #16]
 800283c:	4b7b      	ldr	r3, [pc, #492]	; (8002a2c <HAL_RCC_ClockConfig+0x244>)
 800283e:	699b      	ldr	r3, [r3, #24]
 8002840:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002844:	429a      	cmp	r2, r3
 8002846:	d908      	bls.n	800285a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002848:	4b78      	ldr	r3, [pc, #480]	; (8002a2c <HAL_RCC_ClockConfig+0x244>)
 800284a:	699b      	ldr	r3, [r3, #24]
 800284c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	691b      	ldr	r3, [r3, #16]
 8002854:	4975      	ldr	r1, [pc, #468]	; (8002a2c <HAL_RCC_ClockConfig+0x244>)
 8002856:	4313      	orrs	r3, r2
 8002858:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 0308 	and.w	r3, r3, #8
 8002862:	2b00      	cmp	r3, #0
 8002864:	d010      	beq.n	8002888 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	695a      	ldr	r2, [r3, #20]
 800286a:	4b70      	ldr	r3, [pc, #448]	; (8002a2c <HAL_RCC_ClockConfig+0x244>)
 800286c:	69db      	ldr	r3, [r3, #28]
 800286e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002872:	429a      	cmp	r2, r3
 8002874:	d908      	bls.n	8002888 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002876:	4b6d      	ldr	r3, [pc, #436]	; (8002a2c <HAL_RCC_ClockConfig+0x244>)
 8002878:	69db      	ldr	r3, [r3, #28]
 800287a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	695b      	ldr	r3, [r3, #20]
 8002882:	496a      	ldr	r1, [pc, #424]	; (8002a2c <HAL_RCC_ClockConfig+0x244>)
 8002884:	4313      	orrs	r3, r2
 8002886:	61cb      	str	r3, [r1, #28]
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 0310 	and.w	r3, r3, #16
 8002890:	2b00      	cmp	r3, #0
 8002892:	d010      	beq.n	80028b6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	699a      	ldr	r2, [r3, #24]
 8002898:	4b64      	ldr	r3, [pc, #400]	; (8002a2c <HAL_RCC_ClockConfig+0x244>)
 800289a:	69db      	ldr	r3, [r3, #28]
 800289c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d908      	bls.n	80028b6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80028a4:	4b61      	ldr	r3, [pc, #388]	; (8002a2c <HAL_RCC_ClockConfig+0x244>)
 80028a6:	69db      	ldr	r3, [r3, #28]
 80028a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	699b      	ldr	r3, [r3, #24]
 80028b0:	495e      	ldr	r1, [pc, #376]	; (8002a2c <HAL_RCC_ClockConfig+0x244>)
 80028b2:	4313      	orrs	r3, r2
 80028b4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 0320 	and.w	r3, r3, #32
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d010      	beq.n	80028e4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
    }
#else
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	69da      	ldr	r2, [r3, #28]
 80028c6:	4b59      	ldr	r3, [pc, #356]	; (8002a2c <HAL_RCC_ClockConfig+0x244>)
 80028c8:	6a1b      	ldr	r3, [r3, #32]
 80028ca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80028ce:	429a      	cmp	r2, r3
 80028d0:	d908      	bls.n	80028e4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80028d2:	4b56      	ldr	r3, [pc, #344]	; (8002a2c <HAL_RCC_ClockConfig+0x244>)
 80028d4:	6a1b      	ldr	r3, [r3, #32]
 80028d6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	69db      	ldr	r3, [r3, #28]
 80028de:	4953      	ldr	r1, [pc, #332]	; (8002a2c <HAL_RCC_ClockConfig+0x244>)
 80028e0:	4313      	orrs	r3, r2
 80028e2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 0302 	and.w	r3, r3, #2
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d010      	beq.n	8002912 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	68da      	ldr	r2, [r3, #12]
 80028f4:	4b4d      	ldr	r3, [pc, #308]	; (8002a2c <HAL_RCC_ClockConfig+0x244>)
 80028f6:	699b      	ldr	r3, [r3, #24]
 80028f8:	f003 030f 	and.w	r3, r3, #15
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d908      	bls.n	8002912 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002900:	4b4a      	ldr	r3, [pc, #296]	; (8002a2c <HAL_RCC_ClockConfig+0x244>)
 8002902:	699b      	ldr	r3, [r3, #24]
 8002904:	f023 020f 	bic.w	r2, r3, #15
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	68db      	ldr	r3, [r3, #12]
 800290c:	4947      	ldr	r1, [pc, #284]	; (8002a2c <HAL_RCC_ClockConfig+0x244>)
 800290e:	4313      	orrs	r3, r2
 8002910:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 0301 	and.w	r3, r3, #1
 800291a:	2b00      	cmp	r3, #0
 800291c:	d055      	beq.n	80029ca <HAL_RCC_ClockConfig+0x1e2>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800291e:	4b43      	ldr	r3, [pc, #268]	; (8002a2c <HAL_RCC_ClockConfig+0x244>)
 8002920:	699b      	ldr	r3, [r3, #24]
 8002922:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	4940      	ldr	r1, [pc, #256]	; (8002a2c <HAL_RCC_ClockConfig+0x244>)
 800292c:	4313      	orrs	r3, r2
 800292e:	618b      	str	r3, [r1, #24]
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	2b02      	cmp	r3, #2
 8002936:	d107      	bne.n	8002948 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002938:	4b3c      	ldr	r3, [pc, #240]	; (8002a2c <HAL_RCC_ClockConfig+0x244>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002940:	2b00      	cmp	r3, #0
 8002942:	d121      	bne.n	8002988 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e0f6      	b.n	8002b36 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	2b03      	cmp	r3, #3
 800294e:	d107      	bne.n	8002960 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002950:	4b36      	ldr	r3, [pc, #216]	; (8002a2c <HAL_RCC_ClockConfig+0x244>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002958:	2b00      	cmp	r3, #0
 800295a:	d115      	bne.n	8002988 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e0ea      	b.n	8002b36 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	2b01      	cmp	r3, #1
 8002966:	d107      	bne.n	8002978 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002968:	4b30      	ldr	r3, [pc, #192]	; (8002a2c <HAL_RCC_ClockConfig+0x244>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002970:	2b00      	cmp	r3, #0
 8002972:	d109      	bne.n	8002988 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	e0de      	b.n	8002b36 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002978:	4b2c      	ldr	r3, [pc, #176]	; (8002a2c <HAL_RCC_ClockConfig+0x244>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 0304 	and.w	r3, r3, #4
 8002980:	2b00      	cmp	r3, #0
 8002982:	d101      	bne.n	8002988 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	e0d6      	b.n	8002b36 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002988:	4b28      	ldr	r3, [pc, #160]	; (8002a2c <HAL_RCC_ClockConfig+0x244>)
 800298a:	691b      	ldr	r3, [r3, #16]
 800298c:	f023 0207 	bic.w	r2, r3, #7
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	4925      	ldr	r1, [pc, #148]	; (8002a2c <HAL_RCC_ClockConfig+0x244>)
 8002996:	4313      	orrs	r3, r2
 8002998:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800299a:	f7fe fa59 	bl	8000e50 <HAL_GetTick>
 800299e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029a0:	e00a      	b.n	80029b8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029a2:	f7fe fa55 	bl	8000e50 <HAL_GetTick>
 80029a6:	4602      	mov	r2, r0
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	1ad3      	subs	r3, r2, r3
 80029ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d901      	bls.n	80029b8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80029b4:	2303      	movs	r3, #3
 80029b6:	e0be      	b.n	8002b36 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029b8:	4b1c      	ldr	r3, [pc, #112]	; (8002a2c <HAL_RCC_ClockConfig+0x244>)
 80029ba:	691b      	ldr	r3, [r3, #16]
 80029bc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	00db      	lsls	r3, r3, #3
 80029c6:	429a      	cmp	r2, r3
 80029c8:	d1eb      	bne.n	80029a2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 0302 	and.w	r3, r3, #2
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d010      	beq.n	80029f8 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	68da      	ldr	r2, [r3, #12]
 80029da:	4b14      	ldr	r3, [pc, #80]	; (8002a2c <HAL_RCC_ClockConfig+0x244>)
 80029dc:	699b      	ldr	r3, [r3, #24]
 80029de:	f003 030f 	and.w	r3, r3, #15
 80029e2:	429a      	cmp	r2, r3
 80029e4:	d208      	bcs.n	80029f8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029e6:	4b11      	ldr	r3, [pc, #68]	; (8002a2c <HAL_RCC_ClockConfig+0x244>)
 80029e8:	699b      	ldr	r3, [r3, #24]
 80029ea:	f023 020f 	bic.w	r2, r3, #15
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	68db      	ldr	r3, [r3, #12]
 80029f2:	490e      	ldr	r1, [pc, #56]	; (8002a2c <HAL_RCC_ClockConfig+0x244>)
 80029f4:	4313      	orrs	r3, r2
 80029f6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029f8:	4b0b      	ldr	r3, [pc, #44]	; (8002a28 <HAL_RCC_ClockConfig+0x240>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 030f 	and.w	r3, r3, #15
 8002a00:	683a      	ldr	r2, [r7, #0]
 8002a02:	429a      	cmp	r2, r3
 8002a04:	d214      	bcs.n	8002a30 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a06:	4b08      	ldr	r3, [pc, #32]	; (8002a28 <HAL_RCC_ClockConfig+0x240>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f023 020f 	bic.w	r2, r3, #15
 8002a0e:	4906      	ldr	r1, [pc, #24]	; (8002a28 <HAL_RCC_ClockConfig+0x240>)
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a16:	4b04      	ldr	r3, [pc, #16]	; (8002a28 <HAL_RCC_ClockConfig+0x240>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 030f 	and.w	r3, r3, #15
 8002a1e:	683a      	ldr	r2, [r7, #0]
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d005      	beq.n	8002a30 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e086      	b.n	8002b36 <HAL_RCC_ClockConfig+0x34e>
 8002a28:	52002000 	.word	0x52002000
 8002a2c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 0304 	and.w	r3, r3, #4
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d010      	beq.n	8002a5e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
   }
#else
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	691a      	ldr	r2, [r3, #16]
 8002a40:	4b3f      	ldr	r3, [pc, #252]	; (8002b40 <HAL_RCC_ClockConfig+0x358>)
 8002a42:	699b      	ldr	r3, [r3, #24]
 8002a44:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d208      	bcs.n	8002a5e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002a4c:	4b3c      	ldr	r3, [pc, #240]	; (8002b40 <HAL_RCC_ClockConfig+0x358>)
 8002a4e:	699b      	ldr	r3, [r3, #24]
 8002a50:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	691b      	ldr	r3, [r3, #16]
 8002a58:	4939      	ldr	r1, [pc, #228]	; (8002b40 <HAL_RCC_ClockConfig+0x358>)
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0308 	and.w	r3, r3, #8
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d010      	beq.n	8002a8c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	695a      	ldr	r2, [r3, #20]
 8002a6e:	4b34      	ldr	r3, [pc, #208]	; (8002b40 <HAL_RCC_ClockConfig+0x358>)
 8002a70:	69db      	ldr	r3, [r3, #28]
 8002a72:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d208      	bcs.n	8002a8c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002a7a:	4b31      	ldr	r3, [pc, #196]	; (8002b40 <HAL_RCC_ClockConfig+0x358>)
 8002a7c:	69db      	ldr	r3, [r3, #28]
 8002a7e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	695b      	ldr	r3, [r3, #20]
 8002a86:	492e      	ldr	r1, [pc, #184]	; (8002b40 <HAL_RCC_ClockConfig+0x358>)
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 0310 	and.w	r3, r3, #16
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d010      	beq.n	8002aba <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	699a      	ldr	r2, [r3, #24]
 8002a9c:	4b28      	ldr	r3, [pc, #160]	; (8002b40 <HAL_RCC_ClockConfig+0x358>)
 8002a9e:	69db      	ldr	r3, [r3, #28]
 8002aa0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d208      	bcs.n	8002aba <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002aa8:	4b25      	ldr	r3, [pc, #148]	; (8002b40 <HAL_RCC_ClockConfig+0x358>)
 8002aaa:	69db      	ldr	r3, [r3, #28]
 8002aac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	699b      	ldr	r3, [r3, #24]
 8002ab4:	4922      	ldr	r1, [pc, #136]	; (8002b40 <HAL_RCC_ClockConfig+0x358>)
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 0320 	and.w	r3, r3, #32
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d010      	beq.n	8002ae8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
   }
#else
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	69da      	ldr	r2, [r3, #28]
 8002aca:	4b1d      	ldr	r3, [pc, #116]	; (8002b40 <HAL_RCC_ClockConfig+0x358>)
 8002acc:	6a1b      	ldr	r3, [r3, #32]
 8002ace:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	d208      	bcs.n	8002ae8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002ad6:	4b1a      	ldr	r3, [pc, #104]	; (8002b40 <HAL_RCC_ClockConfig+0x358>)
 8002ad8:	6a1b      	ldr	r3, [r3, #32]
 8002ada:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	69db      	ldr	r3, [r3, #28]
 8002ae2:	4917      	ldr	r1, [pc, #92]	; (8002b40 <HAL_RCC_ClockConfig+0x358>)
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8002ae8:	f000 f834 	bl	8002b54 <HAL_RCC_GetSysClockFreq>
 8002aec:	4602      	mov	r2, r0
 8002aee:	4b14      	ldr	r3, [pc, #80]	; (8002b40 <HAL_RCC_ClockConfig+0x358>)
 8002af0:	699b      	ldr	r3, [r3, #24]
 8002af2:	0a1b      	lsrs	r3, r3, #8
 8002af4:	f003 030f 	and.w	r3, r3, #15
 8002af8:	4912      	ldr	r1, [pc, #72]	; (8002b44 <HAL_RCC_ClockConfig+0x35c>)
 8002afa:	5ccb      	ldrb	r3, [r1, r3]
 8002afc:	f003 031f 	and.w	r3, r3, #31
 8002b00:	fa22 f303 	lsr.w	r3, r2, r3
 8002b04:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8002b06:	4b0e      	ldr	r3, [pc, #56]	; (8002b40 <HAL_RCC_ClockConfig+0x358>)
 8002b08:	699b      	ldr	r3, [r3, #24]
 8002b0a:	f003 030f 	and.w	r3, r3, #15
 8002b0e:	4a0d      	ldr	r2, [pc, #52]	; (8002b44 <HAL_RCC_ClockConfig+0x35c>)
 8002b10:	5cd3      	ldrb	r3, [r2, r3]
 8002b12:	f003 031f 	and.w	r3, r3, #31
 8002b16:	693a      	ldr	r2, [r7, #16]
 8002b18:	fa22 f303 	lsr.w	r3, r2, r3
 8002b1c:	4a0a      	ldr	r2, [pc, #40]	; (8002b48 <HAL_RCC_ClockConfig+0x360>)
 8002b1e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002b20:	4a0a      	ldr	r2, [pc, #40]	; (8002b4c <HAL_RCC_ClockConfig+0x364>)
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8002b26:	4b0a      	ldr	r3, [pc, #40]	; (8002b50 <HAL_RCC_ClockConfig+0x368>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f7fe f946 	bl	8000dbc <HAL_InitTick>
 8002b30:	4603      	mov	r3, r0
 8002b32:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002b34:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3718      	adds	r7, #24
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	58024400 	.word	0x58024400
 8002b44:	08006ebc 	.word	0x08006ebc
 8002b48:	24000004 	.word	0x24000004
 8002b4c:	24000000 	.word	0x24000000
 8002b50:	24000008 	.word	0x24000008

08002b54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b089      	sub	sp, #36	; 0x24
 8002b58:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b5a:	4bb3      	ldr	r3, [pc, #716]	; (8002e28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b5c:	691b      	ldr	r3, [r3, #16]
 8002b5e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002b62:	2b18      	cmp	r3, #24
 8002b64:	f200 8155 	bhi.w	8002e12 <HAL_RCC_GetSysClockFreq+0x2be>
 8002b68:	a201      	add	r2, pc, #4	; (adr r2, 8002b70 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002b6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b6e:	bf00      	nop
 8002b70:	08002bd5 	.word	0x08002bd5
 8002b74:	08002e13 	.word	0x08002e13
 8002b78:	08002e13 	.word	0x08002e13
 8002b7c:	08002e13 	.word	0x08002e13
 8002b80:	08002e13 	.word	0x08002e13
 8002b84:	08002e13 	.word	0x08002e13
 8002b88:	08002e13 	.word	0x08002e13
 8002b8c:	08002e13 	.word	0x08002e13
 8002b90:	08002bfb 	.word	0x08002bfb
 8002b94:	08002e13 	.word	0x08002e13
 8002b98:	08002e13 	.word	0x08002e13
 8002b9c:	08002e13 	.word	0x08002e13
 8002ba0:	08002e13 	.word	0x08002e13
 8002ba4:	08002e13 	.word	0x08002e13
 8002ba8:	08002e13 	.word	0x08002e13
 8002bac:	08002e13 	.word	0x08002e13
 8002bb0:	08002c01 	.word	0x08002c01
 8002bb4:	08002e13 	.word	0x08002e13
 8002bb8:	08002e13 	.word	0x08002e13
 8002bbc:	08002e13 	.word	0x08002e13
 8002bc0:	08002e13 	.word	0x08002e13
 8002bc4:	08002e13 	.word	0x08002e13
 8002bc8:	08002e13 	.word	0x08002e13
 8002bcc:	08002e13 	.word	0x08002e13
 8002bd0:	08002c07 	.word	0x08002c07
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002bd4:	4b94      	ldr	r3, [pc, #592]	; (8002e28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 0320 	and.w	r3, r3, #32
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d009      	beq.n	8002bf4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002be0:	4b91      	ldr	r3, [pc, #580]	; (8002e28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	08db      	lsrs	r3, r3, #3
 8002be6:	f003 0303 	and.w	r3, r3, #3
 8002bea:	4a90      	ldr	r2, [pc, #576]	; (8002e2c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002bec:	fa22 f303 	lsr.w	r3, r2, r3
 8002bf0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8002bf2:	e111      	b.n	8002e18 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002bf4:	4b8d      	ldr	r3, [pc, #564]	; (8002e2c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002bf6:	61bb      	str	r3, [r7, #24]
    break;
 8002bf8:	e10e      	b.n	8002e18 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002bfa:	4b8d      	ldr	r3, [pc, #564]	; (8002e30 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002bfc:	61bb      	str	r3, [r7, #24]
    break;
 8002bfe:	e10b      	b.n	8002e18 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8002c00:	4b8c      	ldr	r3, [pc, #560]	; (8002e34 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002c02:	61bb      	str	r3, [r7, #24]
    break;
 8002c04:	e108      	b.n	8002e18 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002c06:	4b88      	ldr	r3, [pc, #544]	; (8002e28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c0a:	f003 0303 	and.w	r3, r3, #3
 8002c0e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002c10:	4b85      	ldr	r3, [pc, #532]	; (8002e28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c14:	091b      	lsrs	r3, r3, #4
 8002c16:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c1a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002c1c:	4b82      	ldr	r3, [pc, #520]	; (8002e28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c20:	f003 0301 	and.w	r3, r3, #1
 8002c24:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002c26:	4b80      	ldr	r3, [pc, #512]	; (8002e28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c2a:	08db      	lsrs	r3, r3, #3
 8002c2c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002c30:	68fa      	ldr	r2, [r7, #12]
 8002c32:	fb02 f303 	mul.w	r3, r2, r3
 8002c36:	ee07 3a90 	vmov	s15, r3
 8002c3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c3e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	f000 80e1 	beq.w	8002e0c <HAL_RCC_GetSysClockFreq+0x2b8>
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	2b02      	cmp	r3, #2
 8002c4e:	f000 8083 	beq.w	8002d58 <HAL_RCC_GetSysClockFreq+0x204>
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	2b02      	cmp	r3, #2
 8002c56:	f200 80a1 	bhi.w	8002d9c <HAL_RCC_GetSysClockFreq+0x248>
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d003      	beq.n	8002c68 <HAL_RCC_GetSysClockFreq+0x114>
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d056      	beq.n	8002d14 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002c66:	e099      	b.n	8002d9c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002c68:	4b6f      	ldr	r3, [pc, #444]	; (8002e28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 0320 	and.w	r3, r3, #32
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d02d      	beq.n	8002cd0 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002c74:	4b6c      	ldr	r3, [pc, #432]	; (8002e28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	08db      	lsrs	r3, r3, #3
 8002c7a:	f003 0303 	and.w	r3, r3, #3
 8002c7e:	4a6b      	ldr	r2, [pc, #428]	; (8002e2c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002c80:	fa22 f303 	lsr.w	r3, r2, r3
 8002c84:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	ee07 3a90 	vmov	s15, r3
 8002c8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	ee07 3a90 	vmov	s15, r3
 8002c96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c9e:	4b62      	ldr	r3, [pc, #392]	; (8002e28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ca6:	ee07 3a90 	vmov	s15, r3
 8002caa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002cae:	ed97 6a02 	vldr	s12, [r7, #8]
 8002cb2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002e38 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002cb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002cba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002cbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002cc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002cc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cca:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8002cce:	e087      	b.n	8002de0 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	ee07 3a90 	vmov	s15, r3
 8002cd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cda:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002e3c <HAL_RCC_GetSysClockFreq+0x2e8>
 8002cde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ce2:	4b51      	ldr	r3, [pc, #324]	; (8002e28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cea:	ee07 3a90 	vmov	s15, r3
 8002cee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002cf2:	ed97 6a02 	vldr	s12, [r7, #8]
 8002cf6:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002e38 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002cfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002cfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002d02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002d06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002d0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002d12:	e065      	b.n	8002de0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	ee07 3a90 	vmov	s15, r3
 8002d1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d1e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002e40 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002d22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d26:	4b40      	ldr	r3, [pc, #256]	; (8002e28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d2e:	ee07 3a90 	vmov	s15, r3
 8002d32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d36:	ed97 6a02 	vldr	s12, [r7, #8]
 8002d3a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002e38 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002d3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002d42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002d46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002d4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002d4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002d56:	e043      	b.n	8002de0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	ee07 3a90 	vmov	s15, r3
 8002d5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d62:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002e44 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002d66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d6a:	4b2f      	ldr	r3, [pc, #188]	; (8002e28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d72:	ee07 3a90 	vmov	s15, r3
 8002d76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d7a:	ed97 6a02 	vldr	s12, [r7, #8]
 8002d7e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002e38 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002d82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002d86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002d8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002d8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002d92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002d9a:	e021      	b.n	8002de0 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	ee07 3a90 	vmov	s15, r3
 8002da2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002da6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002e40 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002daa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002dae:	4b1e      	ldr	r3, [pc, #120]	; (8002e28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002db6:	ee07 3a90 	vmov	s15, r3
 8002dba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002dbe:	ed97 6a02 	vldr	s12, [r7, #8]
 8002dc2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002e38 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002dc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002dca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002dce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002dd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002dd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dda:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002dde:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8002de0:	4b11      	ldr	r3, [pc, #68]	; (8002e28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de4:	0a5b      	lsrs	r3, r3, #9
 8002de6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002dea:	3301      	adds	r3, #1
 8002dec:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	ee07 3a90 	vmov	s15, r3
 8002df4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002df8:	edd7 6a07 	vldr	s13, [r7, #28]
 8002dfc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e04:	ee17 3a90 	vmov	r3, s15
 8002e08:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8002e0a:	e005      	b.n	8002e18 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	61bb      	str	r3, [r7, #24]
    break;
 8002e10:	e002      	b.n	8002e18 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8002e12:	4b07      	ldr	r3, [pc, #28]	; (8002e30 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002e14:	61bb      	str	r3, [r7, #24]
    break;
 8002e16:	bf00      	nop
  }

  return sysclockfreq;
 8002e18:	69bb      	ldr	r3, [r7, #24]
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3724      	adds	r7, #36	; 0x24
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr
 8002e26:	bf00      	nop
 8002e28:	58024400 	.word	0x58024400
 8002e2c:	03d09000 	.word	0x03d09000
 8002e30:	003d0900 	.word	0x003d0900
 8002e34:	007a1200 	.word	0x007a1200
 8002e38:	46000000 	.word	0x46000000
 8002e3c:	4c742400 	.word	0x4c742400
 8002e40:	4a742400 	.word	0x4a742400
 8002e44:	4af42400 	.word	0x4af42400

08002e48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b082      	sub	sp, #8
 8002e4c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8002e4e:	f7ff fe81 	bl	8002b54 <HAL_RCC_GetSysClockFreq>
 8002e52:	4602      	mov	r2, r0
 8002e54:	4b10      	ldr	r3, [pc, #64]	; (8002e98 <HAL_RCC_GetHCLKFreq+0x50>)
 8002e56:	699b      	ldr	r3, [r3, #24]
 8002e58:	0a1b      	lsrs	r3, r3, #8
 8002e5a:	f003 030f 	and.w	r3, r3, #15
 8002e5e:	490f      	ldr	r1, [pc, #60]	; (8002e9c <HAL_RCC_GetHCLKFreq+0x54>)
 8002e60:	5ccb      	ldrb	r3, [r1, r3]
 8002e62:	f003 031f 	and.w	r3, r3, #31
 8002e66:	fa22 f303 	lsr.w	r3, r2, r3
 8002e6a:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8002e6c:	4b0a      	ldr	r3, [pc, #40]	; (8002e98 <HAL_RCC_GetHCLKFreq+0x50>)
 8002e6e:	699b      	ldr	r3, [r3, #24]
 8002e70:	f003 030f 	and.w	r3, r3, #15
 8002e74:	4a09      	ldr	r2, [pc, #36]	; (8002e9c <HAL_RCC_GetHCLKFreq+0x54>)
 8002e76:	5cd3      	ldrb	r3, [r2, r3]
 8002e78:	f003 031f 	and.w	r3, r3, #31
 8002e7c:	687a      	ldr	r2, [r7, #4]
 8002e7e:	fa22 f303 	lsr.w	r3, r2, r3
 8002e82:	4a07      	ldr	r2, [pc, #28]	; (8002ea0 <HAL_RCC_GetHCLKFreq+0x58>)
 8002e84:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002e86:	4a07      	ldr	r2, [pc, #28]	; (8002ea4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002e8c:	4b04      	ldr	r3, [pc, #16]	; (8002ea0 <HAL_RCC_GetHCLKFreq+0x58>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	3708      	adds	r7, #8
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	58024400 	.word	0x58024400
 8002e9c:	08006ebc 	.word	0x08006ebc
 8002ea0:	24000004 	.word	0x24000004
 8002ea4:	24000000 	.word	0x24000000

08002ea8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8002eac:	f7ff ffcc 	bl	8002e48 <HAL_RCC_GetHCLKFreq>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	4b06      	ldr	r3, [pc, #24]	; (8002ecc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002eb4:	69db      	ldr	r3, [r3, #28]
 8002eb6:	091b      	lsrs	r3, r3, #4
 8002eb8:	f003 0307 	and.w	r3, r3, #7
 8002ebc:	4904      	ldr	r1, [pc, #16]	; (8002ed0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002ebe:	5ccb      	ldrb	r3, [r1, r3]
 8002ec0:	f003 031f 	and.w	r3, r3, #31
 8002ec4:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	58024400 	.word	0x58024400
 8002ed0:	08006ebc 	.word	0x08006ebc

08002ed4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8002ed8:	f7ff ffb6 	bl	8002e48 <HAL_RCC_GetHCLKFreq>
 8002edc:	4602      	mov	r2, r0
 8002ede:	4b06      	ldr	r3, [pc, #24]	; (8002ef8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ee0:	69db      	ldr	r3, [r3, #28]
 8002ee2:	0a1b      	lsrs	r3, r3, #8
 8002ee4:	f003 0307 	and.w	r3, r3, #7
 8002ee8:	4904      	ldr	r1, [pc, #16]	; (8002efc <HAL_RCC_GetPCLK2Freq+0x28>)
 8002eea:	5ccb      	ldrb	r3, [r1, r3]
 8002eec:	f003 031f 	and.w	r3, r3, #31
 8002ef0:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	bd80      	pop	{r7, pc}
 8002ef8:	58024400 	.word	0x58024400
 8002efc:	08006ebc 	.word	0x08006ebc

08002f00 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b086      	sub	sp, #24
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002f08:	2300      	movs	r3, #0
 8002f0a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d03f      	beq.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f20:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002f24:	d02a      	beq.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002f26:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002f2a:	d824      	bhi.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002f2c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002f30:	d018      	beq.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002f32:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002f36:	d81e      	bhi.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d003      	beq.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002f3c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f40:	d007      	beq.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002f42:	e018      	b.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f44:	4b9f      	ldr	r3, [pc, #636]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f48:	4a9e      	ldr	r2, [pc, #632]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002f4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f4e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002f50:	e015      	b.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	3304      	adds	r3, #4
 8002f56:	2102      	movs	r1, #2
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f001 f99b 	bl	8004294 <RCCEx_PLL2_Config>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002f62:	e00c      	b.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	3324      	adds	r3, #36	; 0x24
 8002f68:	2102      	movs	r1, #2
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f001 fa44 	bl	80043f8 <RCCEx_PLL3_Config>
 8002f70:	4603      	mov	r3, r0
 8002f72:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002f74:	e003      	b.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	75fb      	strb	r3, [r7, #23]
      break;
 8002f7a:	e000      	b.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002f7c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f7e:	7dfb      	ldrb	r3, [r7, #23]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d109      	bne.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002f84:	4b8f      	ldr	r3, [pc, #572]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002f86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f88:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f90:	498c      	ldr	r1, [pc, #560]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002f92:	4313      	orrs	r3, r2
 8002f94:	650b      	str	r3, [r1, #80]	; 0x50
 8002f96:	e001      	b.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f98:	7dfb      	ldrb	r3, [r7, #23]
 8002f9a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d03d      	beq.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fac:	2b04      	cmp	r3, #4
 8002fae:	d826      	bhi.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002fb0:	a201      	add	r2, pc, #4	; (adr r2, 8002fb8 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8002fb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fb6:	bf00      	nop
 8002fb8:	08002fcd 	.word	0x08002fcd
 8002fbc:	08002fdb 	.word	0x08002fdb
 8002fc0:	08002fed 	.word	0x08002fed
 8002fc4:	08003005 	.word	0x08003005
 8002fc8:	08003005 	.word	0x08003005
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002fcc:	4b7d      	ldr	r3, [pc, #500]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fd0:	4a7c      	ldr	r2, [pc, #496]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002fd2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fd6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002fd8:	e015      	b.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	3304      	adds	r3, #4
 8002fde:	2100      	movs	r1, #0
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f001 f957 	bl	8004294 <RCCEx_PLL2_Config>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002fea:	e00c      	b.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	3324      	adds	r3, #36	; 0x24
 8002ff0:	2100      	movs	r1, #0
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f001 fa00 	bl	80043f8 <RCCEx_PLL3_Config>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002ffc:	e003      	b.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	75fb      	strb	r3, [r7, #23]
      break;
 8003002:	e000      	b.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003004:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003006:	7dfb      	ldrb	r3, [r7, #23]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d109      	bne.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800300c:	4b6d      	ldr	r3, [pc, #436]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800300e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003010:	f023 0207 	bic.w	r2, r3, #7
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003018:	496a      	ldr	r1, [pc, #424]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800301a:	4313      	orrs	r3, r2
 800301c:	650b      	str	r3, [r1, #80]	; 0x50
 800301e:	e001      	b.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003020:	7dfb      	ldrb	r3, [r7, #23]
 8003022:	75bb      	strb	r3, [r7, #22]

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800302c:	2b00      	cmp	r3, #0
 800302e:	d04a      	beq.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    switch(PeriphClkInit->Sai2AClockSelection)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003034:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003038:	d031      	beq.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x19e>
 800303a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800303e:	d82b      	bhi.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003040:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003044:	d02d      	beq.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8003046:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800304a:	d825      	bhi.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x198>
 800304c:	2bc0      	cmp	r3, #192	; 0xc0
 800304e:	d02a      	beq.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003050:	2bc0      	cmp	r3, #192	; 0xc0
 8003052:	d821      	bhi.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003054:	2b80      	cmp	r3, #128	; 0x80
 8003056:	d016      	beq.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8003058:	2b80      	cmp	r3, #128	; 0x80
 800305a:	d81d      	bhi.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x198>
 800305c:	2b00      	cmp	r3, #0
 800305e:	d002      	beq.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003060:	2b40      	cmp	r3, #64	; 0x40
 8003062:	d007      	beq.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x174>
 8003064:	e018      	b.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
    case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
      /* Enable SAI2A Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003066:	4b57      	ldr	r3, [pc, #348]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800306a:	4a56      	ldr	r2, [pc, #344]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800306c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003070:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8003072:	e019      	b.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	3304      	adds	r3, #4
 8003078:	2100      	movs	r1, #0
 800307a:	4618      	mov	r0, r3
 800307c:	f001 f90a 	bl	8004294 <RCCEx_PLL2_Config>
 8003080:	4603      	mov	r3, r0
 8003082:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8003084:	e010      	b.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	3324      	adds	r3, #36	; 0x24
 800308a:	2100      	movs	r1, #0
 800308c:	4618      	mov	r0, r3
 800308e:	f001 f9b3 	bl	80043f8 <RCCEx_PLL3_Config>
 8003092:	4603      	mov	r3, r0
 8003094:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8003096:	e007      	b.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      /* SPDIF clock is used as source of SAI2A clock */
      /* SAI2A clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	75fb      	strb	r3, [r7, #23]
      break;
 800309c:	e004      	b.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 800309e:	bf00      	nop
 80030a0:	e002      	b.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 80030a2:	bf00      	nop
 80030a4:	e000      	b.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 80030a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030a8:	7dfb      	ldrb	r3, [r7, #23]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d109      	bne.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 80030ae:	4b45      	ldr	r3, [pc, #276]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80030b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030b2:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030ba:	4942      	ldr	r1, [pc, #264]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80030bc:	4313      	orrs	r3, r2
 80030be:	650b      	str	r3, [r1, #80]	; 0x50
 80030c0:	e001      	b.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030c2:	7dfb      	ldrb	r3, [r7, #23]
 80030c4:	75bb      	strb	r3, [r7, #22]
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d04f      	beq.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    switch(PeriphClkInit->Sai2BClockSelection)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030d6:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80030da:	d036      	beq.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x24a>
 80030dc:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80030e0:	d830      	bhi.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x244>
 80030e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030e6:	d032      	beq.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x24e>
 80030e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030ec:	d82a      	bhi.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x244>
 80030ee:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80030f2:	d02e      	beq.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x252>
 80030f4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80030f8:	d824      	bhi.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x244>
 80030fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030fe:	d018      	beq.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x232>
 8003100:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003104:	d81e      	bhi.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8003106:	2b00      	cmp	r3, #0
 8003108:	d003      	beq.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x212>
 800310a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800310e:	d007      	beq.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0x220>
 8003110:	e018      	b.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x244>
    {
    case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003112:	4b2c      	ldr	r3, [pc, #176]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003116:	4a2b      	ldr	r2, [pc, #172]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003118:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800311c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 800311e:	e019      	b.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	3304      	adds	r3, #4
 8003124:	2100      	movs	r1, #0
 8003126:	4618      	mov	r0, r3
 8003128:	f001 f8b4 	bl	8004294 <RCCEx_PLL2_Config>
 800312c:	4603      	mov	r3, r0
 800312e:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8003130:	e010      	b.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	3324      	adds	r3, #36	; 0x24
 8003136:	2100      	movs	r1, #0
 8003138:	4618      	mov	r0, r3
 800313a:	f001 f95d 	bl	80043f8 <RCCEx_PLL3_Config>
 800313e:	4603      	mov	r3, r0
 8003140:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8003142:	e007      	b.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x254>
      /* SPDIF clock is used as source of SAI2B clock */
      /* SAI2B clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	75fb      	strb	r3, [r7, #23]
      break;
 8003148:	e004      	b.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 800314a:	bf00      	nop
 800314c:	e002      	b.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 800314e:	bf00      	nop
 8003150:	e000      	b.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8003152:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003154:	7dfb      	ldrb	r3, [r7, #23]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d109      	bne.n	800316e <HAL_RCCEx_PeriphCLKConfig+0x26e>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 800315a:	4b1a      	ldr	r3, [pc, #104]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800315c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800315e:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003166:	4917      	ldr	r1, [pc, #92]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003168:	4313      	orrs	r3, r2
 800316a:	650b      	str	r3, [r1, #80]	; 0x50
 800316c:	e001      	b.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x272>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800316e:	7dfb      	ldrb	r3, [r7, #23]
 8003170:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d034      	beq.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    switch(PeriphClkInit->OspiClockSelection)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003182:	2b30      	cmp	r3, #48	; 0x30
 8003184:	d01c      	beq.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 8003186:	2b30      	cmp	r3, #48	; 0x30
 8003188:	d817      	bhi.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 800318a:	2b20      	cmp	r3, #32
 800318c:	d00c      	beq.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800318e:	2b20      	cmp	r3, #32
 8003190:	d813      	bhi.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8003192:	2b00      	cmp	r3, #0
 8003194:	d018      	beq.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 8003196:	2b10      	cmp	r3, #16
 8003198:	d10f      	bne.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800319a:	4b0a      	ldr	r3, [pc, #40]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800319c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800319e:	4a09      	ldr	r2, [pc, #36]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80031a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031a4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80031a6:	e010      	b.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0x2ca>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	3304      	adds	r3, #4
 80031ac:	2102      	movs	r1, #2
 80031ae:	4618      	mov	r0, r3
 80031b0:	f001 f870 	bl	8004294 <RCCEx_PLL2_Config>
 80031b4:	4603      	mov	r3, r0
 80031b6:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80031b8:	e007      	b.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	75fb      	strb	r3, [r7, #23]
      break;
 80031be:	e004      	b.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0x2ca>
      break;
 80031c0:	bf00      	nop
 80031c2:	e002      	b.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80031c4:	58024400 	.word	0x58024400
      break;
 80031c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031ca:	7dfb      	ldrb	r3, [r7, #23]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d109      	bne.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80031d0:	4b9b      	ldr	r3, [pc, #620]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80031d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031d4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031dc:	4998      	ldr	r1, [pc, #608]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80031de:	4313      	orrs	r3, r2
 80031e0:	64cb      	str	r3, [r1, #76]	; 0x4c
 80031e2:	e001      	b.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031e4:	7dfb      	ldrb	r3, [r7, #23]
 80031e6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d047      	beq.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80031fc:	d030      	beq.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80031fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003202:	d82a      	bhi.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8003204:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003208:	d02c      	beq.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x364>
 800320a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800320e:	d824      	bhi.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8003210:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003214:	d018      	beq.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8003216:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800321a:	d81e      	bhi.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x35a>
 800321c:	2b00      	cmp	r3, #0
 800321e:	d003      	beq.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x328>
 8003220:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003224:	d007      	beq.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x336>
 8003226:	e018      	b.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003228:	4b85      	ldr	r3, [pc, #532]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800322a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800322c:	4a84      	ldr	r2, [pc, #528]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800322e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003232:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003234:	e017      	b.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	3304      	adds	r3, #4
 800323a:	2100      	movs	r1, #0
 800323c:	4618      	mov	r0, r3
 800323e:	f001 f829 	bl	8004294 <RCCEx_PLL2_Config>
 8003242:	4603      	mov	r3, r0
 8003244:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003246:	e00e      	b.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	3324      	adds	r3, #36	; 0x24
 800324c:	2100      	movs	r1, #0
 800324e:	4618      	mov	r0, r3
 8003250:	f001 f8d2 	bl	80043f8 <RCCEx_PLL3_Config>
 8003254:	4603      	mov	r3, r0
 8003256:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003258:	e005      	b.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x366>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	75fb      	strb	r3, [r7, #23]
      break;
 800325e:	e002      	b.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8003260:	bf00      	nop
 8003262:	e000      	b.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8003264:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003266:	7dfb      	ldrb	r3, [r7, #23]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d109      	bne.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x380>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800326c:	4b74      	ldr	r3, [pc, #464]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800326e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003270:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003278:	4971      	ldr	r1, [pc, #452]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800327a:	4313      	orrs	r3, r2
 800327c:	650b      	str	r3, [r1, #80]	; 0x50
 800327e:	e001      	b.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x384>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003280:	7dfb      	ldrb	r3, [r7, #23]
 8003282:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800328c:	2b00      	cmp	r3, #0
 800328e:	d049      	beq.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x424>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003294:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003298:	d02e      	beq.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800329a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800329e:	d828      	bhi.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 80032a0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80032a4:	d02a      	beq.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80032a6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80032aa:	d822      	bhi.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 80032ac:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80032b0:	d026      	beq.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x400>
 80032b2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80032b6:	d81c      	bhi.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 80032b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80032bc:	d010      	beq.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80032be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80032c2:	d816      	bhi.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d01d      	beq.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x404>
 80032c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032cc:	d111      	bne.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	3304      	adds	r3, #4
 80032d2:	2101      	movs	r1, #1
 80032d4:	4618      	mov	r0, r3
 80032d6:	f000 ffdd 	bl	8004294 <RCCEx_PLL2_Config>
 80032da:	4603      	mov	r3, r0
 80032dc:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80032de:	e012      	b.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x406>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	3324      	adds	r3, #36	; 0x24
 80032e4:	2101      	movs	r1, #1
 80032e6:	4618      	mov	r0, r3
 80032e8:	f001 f886 	bl	80043f8 <RCCEx_PLL3_Config>
 80032ec:	4603      	mov	r3, r0
 80032ee:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80032f0:	e009      	b.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	75fb      	strb	r3, [r7, #23]
      break;
 80032f6:	e006      	b.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 80032f8:	bf00      	nop
 80032fa:	e004      	b.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 80032fc:	bf00      	nop
 80032fe:	e002      	b.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8003300:	bf00      	nop
 8003302:	e000      	b.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8003304:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003306:	7dfb      	ldrb	r3, [r7, #23]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d109      	bne.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x420>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800330c:	4b4c      	ldr	r3, [pc, #304]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800330e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003310:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003318:	4949      	ldr	r1, [pc, #292]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800331a:	4313      	orrs	r3, r2
 800331c:	650b      	str	r3, [r1, #80]	; 0x50
 800331e:	e001      	b.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x424>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003320:	7dfb      	ldrb	r3, [r7, #23]
 8003322:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800332c:	2b00      	cmp	r3, #0
 800332e:	d053      	beq.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003336:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800333a:	d034      	beq.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800333c:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8003340:	d82e      	bhi.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8003342:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003346:	d030      	beq.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 8003348:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800334c:	d828      	bhi.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 800334e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003352:	d02c      	beq.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8003354:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003358:	d822      	bhi.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 800335a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800335e:	d028      	beq.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8003360:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003364:	d81c      	bhi.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8003366:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800336a:	d010      	beq.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x48e>
 800336c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003370:	d816      	bhi.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8003372:	2b00      	cmp	r3, #0
 8003374:	d01f      	beq.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8003376:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800337a:	d111      	bne.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	3304      	adds	r3, #4
 8003380:	2101      	movs	r1, #1
 8003382:	4618      	mov	r0, r3
 8003384:	f000 ff86 	bl	8004294 <RCCEx_PLL2_Config>
 8003388:	4603      	mov	r3, r0
 800338a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800338c:	e014      	b.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	3324      	adds	r3, #36	; 0x24
 8003392:	2101      	movs	r1, #1
 8003394:	4618      	mov	r0, r3
 8003396:	f001 f82f 	bl	80043f8 <RCCEx_PLL3_Config>
 800339a:	4603      	mov	r3, r0
 800339c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800339e:	e00b      	b.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	75fb      	strb	r3, [r7, #23]
      break;
 80033a4:	e008      	b.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 80033a6:	bf00      	nop
 80033a8:	e006      	b.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 80033aa:	bf00      	nop
 80033ac:	e004      	b.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 80033ae:	bf00      	nop
 80033b0:	e002      	b.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 80033b2:	bf00      	nop
 80033b4:	e000      	b.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 80033b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033b8:	7dfb      	ldrb	r3, [r7, #23]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d10a      	bne.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80033be:	4b20      	ldr	r3, [pc, #128]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80033c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033c2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80033cc:	491c      	ldr	r1, [pc, #112]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80033ce:	4313      	orrs	r3, r2
 80033d0:	658b      	str	r3, [r1, #88]	; 0x58
 80033d2:	e001      	b.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033d4:	7dfb      	ldrb	r3, [r7, #23]
 80033d6:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d031      	beq.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80033ec:	d00e      	beq.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x50c>
 80033ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80033f2:	d814      	bhi.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x51e>
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d015      	beq.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80033f8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80033fc:	d10f      	bne.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x51e>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033fe:	4b10      	ldr	r3, [pc, #64]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003402:	4a0f      	ldr	r2, [pc, #60]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003404:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003408:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800340a:	e00c      	b.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x526>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	3304      	adds	r3, #4
 8003410:	2101      	movs	r1, #1
 8003412:	4618      	mov	r0, r3
 8003414:	f000 ff3e 	bl	8004294 <RCCEx_PLL2_Config>
 8003418:	4603      	mov	r3, r0
 800341a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800341c:	e003      	b.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x526>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	75fb      	strb	r3, [r7, #23]
      break;
 8003422:	e000      	b.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x526>
      break;
 8003424:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003426:	7dfb      	ldrb	r3, [r7, #23]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d10b      	bne.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800342c:	4b04      	ldr	r3, [pc, #16]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800342e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003430:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003438:	4901      	ldr	r1, [pc, #4]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800343a:	4313      	orrs	r3, r2
 800343c:	650b      	str	r3, [r1, #80]	; 0x50
 800343e:	e003      	b.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x548>
 8003440:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003444:	7dfb      	ldrb	r3, [r7, #23]
 8003446:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003450:	2b00      	cmp	r3, #0
 8003452:	d032      	beq.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003458:	2b03      	cmp	r3, #3
 800345a:	d81b      	bhi.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800345c:	a201      	add	r2, pc, #4	; (adr r2, 8003464 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 800345e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003462:	bf00      	nop
 8003464:	0800349b 	.word	0x0800349b
 8003468:	08003475 	.word	0x08003475
 800346c:	08003483 	.word	0x08003483
 8003470:	0800349b 	.word	0x0800349b
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003474:	4bb2      	ldr	r3, [pc, #712]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003478:	4ab1      	ldr	r2, [pc, #708]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800347a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800347e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003480:	e00c      	b.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	3304      	adds	r3, #4
 8003486:	2102      	movs	r1, #2
 8003488:	4618      	mov	r0, r3
 800348a:	f000 ff03 	bl	8004294 <RCCEx_PLL2_Config>
 800348e:	4603      	mov	r3, r0
 8003490:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003492:	e003      	b.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	75fb      	strb	r3, [r7, #23]
      break;
 8003498:	e000      	b.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800349a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800349c:	7dfb      	ldrb	r3, [r7, #23]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d109      	bne.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80034a2:	4ba7      	ldr	r3, [pc, #668]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80034a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034a6:	f023 0203 	bic.w	r2, r3, #3
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ae:	49a4      	ldr	r1, [pc, #656]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80034b0:	4313      	orrs	r3, r2
 80034b2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80034b4:	e001      	b.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034b6:	7dfb      	ldrb	r3, [r7, #23]
 80034b8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	f000 8086 	beq.w	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80034c8:	4b9e      	ldr	r3, [pc, #632]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a9d      	ldr	r2, [pc, #628]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 80034ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034d2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80034d4:	f7fd fcbc 	bl	8000e50 <HAL_GetTick>
 80034d8:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80034da:	e009      	b.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034dc:	f7fd fcb8 	bl	8000e50 <HAL_GetTick>
 80034e0:	4602      	mov	r2, r0
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	1ad3      	subs	r3, r2, r3
 80034e6:	2b64      	cmp	r3, #100	; 0x64
 80034e8:	d902      	bls.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      {
        ret = HAL_TIMEOUT;
 80034ea:	2303      	movs	r3, #3
 80034ec:	75fb      	strb	r3, [r7, #23]
        break;
 80034ee:	e005      	b.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80034f0:	4b94      	ldr	r3, [pc, #592]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d0ef      	beq.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 80034fc:	7dfb      	ldrb	r3, [r7, #23]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d166      	bne.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003502:	4b8f      	ldr	r3, [pc, #572]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003504:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800350c:	4053      	eors	r3, r2
 800350e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003512:	2b00      	cmp	r3, #0
 8003514:	d013      	beq.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x63e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003516:	4b8a      	ldr	r3, [pc, #552]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003518:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800351a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800351e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003520:	4b87      	ldr	r3, [pc, #540]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003522:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003524:	4a86      	ldr	r2, [pc, #536]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003526:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800352a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800352c:	4b84      	ldr	r3, [pc, #528]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800352e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003530:	4a83      	ldr	r2, [pc, #524]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003532:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003536:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003538:	4a81      	ldr	r2, [pc, #516]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003544:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003548:	d115      	bne.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800354a:	f7fd fc81 	bl	8000e50 <HAL_GetTick>
 800354e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003550:	e00b      	b.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x66a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003552:	f7fd fc7d 	bl	8000e50 <HAL_GetTick>
 8003556:	4602      	mov	r2, r0
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	1ad3      	subs	r3, r2, r3
 800355c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003560:	4293      	cmp	r3, r2
 8003562:	d902      	bls.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x66a>
          {
            ret = HAL_TIMEOUT;
 8003564:	2303      	movs	r3, #3
 8003566:	75fb      	strb	r3, [r7, #23]
            break;
 8003568:	e005      	b.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x676>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800356a:	4b75      	ldr	r3, [pc, #468]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800356c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800356e:	f003 0302 	and.w	r3, r3, #2
 8003572:	2b00      	cmp	r3, #0
 8003574:	d0ed      	beq.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x652>
          }
        }
      }

      if(ret == HAL_OK)
 8003576:	7dfb      	ldrb	r3, [r7, #23]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d126      	bne.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x6ca>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003582:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003586:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800358a:	d10d      	bne.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x6a8>
 800358c:	4b6c      	ldr	r3, [pc, #432]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800358e:	691b      	ldr	r3, [r3, #16]
 8003590:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800359a:	0919      	lsrs	r1, r3, #4
 800359c:	4b6a      	ldr	r3, [pc, #424]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800359e:	400b      	ands	r3, r1
 80035a0:	4967      	ldr	r1, [pc, #412]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80035a2:	4313      	orrs	r3, r2
 80035a4:	610b      	str	r3, [r1, #16]
 80035a6:	e005      	b.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x6b4>
 80035a8:	4b65      	ldr	r3, [pc, #404]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80035aa:	691b      	ldr	r3, [r3, #16]
 80035ac:	4a64      	ldr	r2, [pc, #400]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80035ae:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80035b2:	6113      	str	r3, [r2, #16]
 80035b4:	4b62      	ldr	r3, [pc, #392]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80035b6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80035be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035c2:	495f      	ldr	r1, [pc, #380]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80035c4:	4313      	orrs	r3, r2
 80035c6:	670b      	str	r3, [r1, #112]	; 0x70
 80035c8:	e004      	b.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80035ca:	7dfb      	ldrb	r3, [r7, #23]
 80035cc:	75bb      	strb	r3, [r7, #22]
 80035ce:	e001      	b.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035d0:	7dfb      	ldrb	r3, [r7, #23]
 80035d2:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 0301 	and.w	r3, r3, #1
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d07f      	beq.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035e6:	2b28      	cmp	r3, #40	; 0x28
 80035e8:	d866      	bhi.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
 80035ea:	a201      	add	r2, pc, #4	; (adr r2, 80035f0 <HAL_RCCEx_PeriphCLKConfig+0x6f0>)
 80035ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035f0:	080036bf 	.word	0x080036bf
 80035f4:	080036b9 	.word	0x080036b9
 80035f8:	080036b9 	.word	0x080036b9
 80035fc:	080036b9 	.word	0x080036b9
 8003600:	080036b9 	.word	0x080036b9
 8003604:	080036b9 	.word	0x080036b9
 8003608:	080036b9 	.word	0x080036b9
 800360c:	080036b9 	.word	0x080036b9
 8003610:	08003695 	.word	0x08003695
 8003614:	080036b9 	.word	0x080036b9
 8003618:	080036b9 	.word	0x080036b9
 800361c:	080036b9 	.word	0x080036b9
 8003620:	080036b9 	.word	0x080036b9
 8003624:	080036b9 	.word	0x080036b9
 8003628:	080036b9 	.word	0x080036b9
 800362c:	080036b9 	.word	0x080036b9
 8003630:	080036a7 	.word	0x080036a7
 8003634:	080036b9 	.word	0x080036b9
 8003638:	080036b9 	.word	0x080036b9
 800363c:	080036b9 	.word	0x080036b9
 8003640:	080036b9 	.word	0x080036b9
 8003644:	080036b9 	.word	0x080036b9
 8003648:	080036b9 	.word	0x080036b9
 800364c:	080036b9 	.word	0x080036b9
 8003650:	080036bf 	.word	0x080036bf
 8003654:	080036b9 	.word	0x080036b9
 8003658:	080036b9 	.word	0x080036b9
 800365c:	080036b9 	.word	0x080036b9
 8003660:	080036b9 	.word	0x080036b9
 8003664:	080036b9 	.word	0x080036b9
 8003668:	080036b9 	.word	0x080036b9
 800366c:	080036b9 	.word	0x080036b9
 8003670:	080036bf 	.word	0x080036bf
 8003674:	080036b9 	.word	0x080036b9
 8003678:	080036b9 	.word	0x080036b9
 800367c:	080036b9 	.word	0x080036b9
 8003680:	080036b9 	.word	0x080036b9
 8003684:	080036b9 	.word	0x080036b9
 8003688:	080036b9 	.word	0x080036b9
 800368c:	080036b9 	.word	0x080036b9
 8003690:	080036bf 	.word	0x080036bf
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	3304      	adds	r3, #4
 8003698:	2101      	movs	r1, #1
 800369a:	4618      	mov	r0, r3
 800369c:	f000 fdfa 	bl	8004294 <RCCEx_PLL2_Config>
 80036a0:	4603      	mov	r3, r0
 80036a2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80036a4:	e00c      	b.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x7c0>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	3324      	adds	r3, #36	; 0x24
 80036aa:	2101      	movs	r1, #1
 80036ac:	4618      	mov	r0, r3
 80036ae:	f000 fea3 	bl	80043f8 <RCCEx_PLL3_Config>
 80036b2:	4603      	mov	r3, r0
 80036b4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80036b6:	e003      	b.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	75fb      	strb	r3, [r7, #23]
      break;
 80036bc:	e000      	b.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      break;
 80036be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036c0:	7dfb      	ldrb	r3, [r7, #23]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d10a      	bne.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80036c6:	4b1e      	ldr	r3, [pc, #120]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80036c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036ca:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036d4:	491a      	ldr	r1, [pc, #104]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80036d6:	4313      	orrs	r3, r2
 80036d8:	654b      	str	r3, [r1, #84]	; 0x54
 80036da:	e001      	b.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036dc:	7dfb      	ldrb	r3, [r7, #23]
 80036de:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f003 0302 	and.w	r3, r3, #2
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d03f      	beq.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80036f0:	2b05      	cmp	r3, #5
 80036f2:	d821      	bhi.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x838>
 80036f4:	a201      	add	r2, pc, #4	; (adr r2, 80036fc <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 80036f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036fa:	bf00      	nop
 80036fc:	0800374d 	.word	0x0800374d
 8003700:	08003715 	.word	0x08003715
 8003704:	08003727 	.word	0x08003727
 8003708:	0800374d 	.word	0x0800374d
 800370c:	0800374d 	.word	0x0800374d
 8003710:	0800374d 	.word	0x0800374d
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	3304      	adds	r3, #4
 8003718:	2101      	movs	r1, #1
 800371a:	4618      	mov	r0, r3
 800371c:	f000 fdba 	bl	8004294 <RCCEx_PLL2_Config>
 8003720:	4603      	mov	r3, r0
 8003722:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003724:	e013      	b.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	3324      	adds	r3, #36	; 0x24
 800372a:	2101      	movs	r1, #1
 800372c:	4618      	mov	r0, r3
 800372e:	f000 fe63 	bl	80043f8 <RCCEx_PLL3_Config>
 8003732:	4603      	mov	r3, r0
 8003734:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003736:	e00a      	b.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	75fb      	strb	r3, [r7, #23]
      break;
 800373c:	e007      	b.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x84e>
 800373e:	bf00      	nop
 8003740:	58024400 	.word	0x58024400
 8003744:	58024800 	.word	0x58024800
 8003748:	00ffffcf 	.word	0x00ffffcf
      break;
 800374c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800374e:	7dfb      	ldrb	r3, [r7, #23]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d109      	bne.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003754:	4b9f      	ldr	r3, [pc, #636]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8003756:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003758:	f023 0207 	bic.w	r2, r3, #7
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003760:	499c      	ldr	r1, [pc, #624]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8003762:	4313      	orrs	r3, r2
 8003764:	654b      	str	r3, [r1, #84]	; 0x54
 8003766:	e001      	b.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003768:	7dfb      	ldrb	r3, [r7, #23]
 800376a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 0304 	and.w	r3, r3, #4
 8003774:	2b00      	cmp	r3, #0
 8003776:	d039      	beq.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800377e:	2b05      	cmp	r3, #5
 8003780:	d820      	bhi.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 8003782:	a201      	add	r2, pc, #4	; (adr r2, 8003788 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 8003784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003788:	080037cb 	.word	0x080037cb
 800378c:	080037a1 	.word	0x080037a1
 8003790:	080037b3 	.word	0x080037b3
 8003794:	080037cb 	.word	0x080037cb
 8003798:	080037cb 	.word	0x080037cb
 800379c:	080037cb 	.word	0x080037cb
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	3304      	adds	r3, #4
 80037a4:	2101      	movs	r1, #1
 80037a6:	4618      	mov	r0, r3
 80037a8:	f000 fd74 	bl	8004294 <RCCEx_PLL2_Config>
 80037ac:	4603      	mov	r3, r0
 80037ae:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80037b0:	e00c      	b.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	3324      	adds	r3, #36	; 0x24
 80037b6:	2101      	movs	r1, #1
 80037b8:	4618      	mov	r0, r3
 80037ba:	f000 fe1d 	bl	80043f8 <RCCEx_PLL3_Config>
 80037be:	4603      	mov	r3, r0
 80037c0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80037c2:	e003      	b.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	75fb      	strb	r3, [r7, #23]
      break;
 80037c8:	e000      	b.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 80037ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037cc:	7dfb      	ldrb	r3, [r7, #23]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d10a      	bne.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80037d2:	4b80      	ldr	r3, [pc, #512]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80037d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037d6:	f023 0207 	bic.w	r2, r3, #7
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80037e0:	497c      	ldr	r1, [pc, #496]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80037e2:	4313      	orrs	r3, r2
 80037e4:	658b      	str	r3, [r1, #88]	; 0x58
 80037e6:	e001      	b.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037e8:	7dfb      	ldrb	r3, [r7, #23]
 80037ea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 0320 	and.w	r3, r3, #32
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d04b      	beq.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003802:	d02e      	beq.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x962>
 8003804:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003808:	d828      	bhi.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800380a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800380e:	d02a      	beq.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x966>
 8003810:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003814:	d822      	bhi.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8003816:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800381a:	d026      	beq.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x96a>
 800381c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003820:	d81c      	bhi.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8003822:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003826:	d010      	beq.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x94a>
 8003828:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800382c:	d816      	bhi.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800382e:	2b00      	cmp	r3, #0
 8003830:	d01d      	beq.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8003832:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003836:	d111      	bne.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	3304      	adds	r3, #4
 800383c:	2100      	movs	r1, #0
 800383e:	4618      	mov	r0, r3
 8003840:	f000 fd28 	bl	8004294 <RCCEx_PLL2_Config>
 8003844:	4603      	mov	r3, r0
 8003846:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003848:	e012      	b.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	3324      	adds	r3, #36	; 0x24
 800384e:	2102      	movs	r1, #2
 8003850:	4618      	mov	r0, r3
 8003852:	f000 fdd1 	bl	80043f8 <RCCEx_PLL3_Config>
 8003856:	4603      	mov	r3, r0
 8003858:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800385a:	e009      	b.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	75fb      	strb	r3, [r7, #23]
      break;
 8003860:	e006      	b.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8003862:	bf00      	nop
 8003864:	e004      	b.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8003866:	bf00      	nop
 8003868:	e002      	b.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800386a:	bf00      	nop
 800386c:	e000      	b.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800386e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003870:	7dfb      	ldrb	r3, [r7, #23]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d10a      	bne.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003876:	4b57      	ldr	r3, [pc, #348]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8003878:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800387a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003884:	4953      	ldr	r1, [pc, #332]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8003886:	4313      	orrs	r3, r2
 8003888:	654b      	str	r3, [r1, #84]	; 0x54
 800388a:	e001      	b.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800388c:	7dfb      	ldrb	r3, [r7, #23]
 800388e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003898:	2b00      	cmp	r3, #0
 800389a:	d04b      	beq.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80038a2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80038a6:	d02e      	beq.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0xa06>
 80038a8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80038ac:	d828      	bhi.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 80038ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038b2:	d02a      	beq.n	800390a <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 80038b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038b8:	d822      	bhi.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 80038ba:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80038be:	d026      	beq.n	800390e <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 80038c0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80038c4:	d81c      	bhi.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 80038c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038ca:	d010      	beq.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 80038cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038d0:	d816      	bhi.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d01d      	beq.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 80038d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038da:	d111      	bne.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	3304      	adds	r3, #4
 80038e0:	2100      	movs	r1, #0
 80038e2:	4618      	mov	r0, r3
 80038e4:	f000 fcd6 	bl	8004294 <RCCEx_PLL2_Config>
 80038e8:	4603      	mov	r3, r0
 80038ea:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80038ec:	e012      	b.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	3324      	adds	r3, #36	; 0x24
 80038f2:	2102      	movs	r1, #2
 80038f4:	4618      	mov	r0, r3
 80038f6:	f000 fd7f 	bl	80043f8 <RCCEx_PLL3_Config>
 80038fa:	4603      	mov	r3, r0
 80038fc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80038fe:	e009      	b.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003900:	2301      	movs	r3, #1
 8003902:	75fb      	strb	r3, [r7, #23]
      break;
 8003904:	e006      	b.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8003906:	bf00      	nop
 8003908:	e004      	b.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800390a:	bf00      	nop
 800390c:	e002      	b.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800390e:	bf00      	nop
 8003910:	e000      	b.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8003912:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003914:	7dfb      	ldrb	r3, [r7, #23]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d10a      	bne.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800391a:	4b2e      	ldr	r3, [pc, #184]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800391c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800391e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003928:	492a      	ldr	r1, [pc, #168]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800392a:	4313      	orrs	r3, r2
 800392c:	658b      	str	r3, [r1, #88]	; 0x58
 800392e:	e001      	b.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003930:	7dfb      	ldrb	r3, [r7, #23]
 8003932:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800393c:	2b00      	cmp	r3, #0
 800393e:	d04d      	beq.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003946:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800394a:	d02e      	beq.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 800394c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003950:	d828      	bhi.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8003952:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003956:	d02a      	beq.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8003958:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800395c:	d822      	bhi.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800395e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003962:	d026      	beq.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8003964:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003968:	d81c      	bhi.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800396a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800396e:	d010      	beq.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0xa92>
 8003970:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003974:	d816      	bhi.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8003976:	2b00      	cmp	r3, #0
 8003978:	d01d      	beq.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 800397a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800397e:	d111      	bne.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	3304      	adds	r3, #4
 8003984:	2100      	movs	r1, #0
 8003986:	4618      	mov	r0, r3
 8003988:	f000 fc84 	bl	8004294 <RCCEx_PLL2_Config>
 800398c:	4603      	mov	r3, r0
 800398e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003990:	e012      	b.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	3324      	adds	r3, #36	; 0x24
 8003996:	2102      	movs	r1, #2
 8003998:	4618      	mov	r0, r3
 800399a:	f000 fd2d 	bl	80043f8 <RCCEx_PLL3_Config>
 800399e:	4603      	mov	r3, r0
 80039a0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80039a2:	e009      	b.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	75fb      	strb	r3, [r7, #23]
      break;
 80039a8:	e006      	b.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 80039aa:	bf00      	nop
 80039ac:	e004      	b.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 80039ae:	bf00      	nop
 80039b0:	e002      	b.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 80039b2:	bf00      	nop
 80039b4:	e000      	b.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 80039b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039b8:	7dfb      	ldrb	r3, [r7, #23]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d10c      	bne.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80039be:	4b05      	ldr	r3, [pc, #20]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80039c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80039cc:	4901      	ldr	r1, [pc, #4]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80039ce:	4313      	orrs	r3, r2
 80039d0:	658b      	str	r3, [r1, #88]	; 0x58
 80039d2:	e003      	b.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0xadc>
 80039d4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039d8:	7dfb      	ldrb	r3, [r7, #23]
 80039da:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 0308 	and.w	r3, r3, #8
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d01a      	beq.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039f2:	d10a      	bne.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	3324      	adds	r3, #36	; 0x24
 80039f8:	2102      	movs	r1, #2
 80039fa:	4618      	mov	r0, r3
 80039fc:	f000 fcfc 	bl	80043f8 <RCCEx_PLL3_Config>
 8003a00:	4603      	mov	r3, r0
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d001      	beq.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
        {
          status = HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003a0a:	4b8c      	ldr	r3, [pc, #560]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8003a0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a0e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a18:	4988      	ldr	r1, [pc, #544]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 0310 	and.w	r3, r3, #16
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d01a      	beq.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0xb60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003a30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a34:	d10a      	bne.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	3324      	adds	r3, #36	; 0x24
 8003a3a:	2102      	movs	r1, #2
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f000 fcdb 	bl	80043f8 <RCCEx_PLL3_Config>
 8003a42:	4603      	mov	r3, r0
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d001      	beq.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
      {
        status = HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003a4c:	4b7b      	ldr	r3, [pc, #492]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8003a4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a50:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003a5a:	4978      	ldr	r1, [pc, #480]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d034      	beq.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003a72:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003a76:	d01d      	beq.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0xbb4>
 8003a78:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003a7c:	d817      	bhi.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0xbae>
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d003      	beq.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0xb8a>
 8003a82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a86:	d009      	beq.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003a88:	e011      	b.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0xbae>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	3304      	adds	r3, #4
 8003a8e:	2100      	movs	r1, #0
 8003a90:	4618      	mov	r0, r3
 8003a92:	f000 fbff 	bl	8004294 <RCCEx_PLL2_Config>
 8003a96:	4603      	mov	r3, r0
 8003a98:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003a9a:	e00c      	b.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0xbb6>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	3324      	adds	r3, #36	; 0x24
 8003aa0:	2102      	movs	r1, #2
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f000 fca8 	bl	80043f8 <RCCEx_PLL3_Config>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003aac:	e003      	b.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	75fb      	strb	r3, [r7, #23]
      break;
 8003ab2:	e000      	b.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      break;
 8003ab4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ab6:	7dfb      	ldrb	r3, [r7, #23]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d10a      	bne.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003abc:	4b5f      	ldr	r3, [pc, #380]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8003abe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ac0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003aca:	495c      	ldr	r1, [pc, #368]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8003acc:	4313      	orrs	r3, r2
 8003ace:	658b      	str	r3, [r1, #88]	; 0x58
 8003ad0:	e001      	b.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ad2:	7dfb      	ldrb	r3, [r7, #23]
 8003ad4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d033      	beq.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ae8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003aec:	d01c      	beq.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8003aee:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003af2:	d816      	bhi.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8003af4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003af8:	d003      	beq.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0xc02>
 8003afa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003afe:	d007      	beq.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8003b00:	e00f      	b.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b02:	4b4e      	ldr	r3, [pc, #312]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8003b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b06:	4a4d      	ldr	r2, [pc, #308]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8003b08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b0c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8003b0e:	e00c      	b.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	3324      	adds	r3, #36	; 0x24
 8003b14:	2101      	movs	r1, #1
 8003b16:	4618      	mov	r0, r3
 8003b18:	f000 fc6e 	bl	80043f8 <RCCEx_PLL3_Config>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8003b20:	e003      	b.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	75fb      	strb	r3, [r7, #23]
      break;
 8003b26:	e000      	b.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8003b28:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b2a:	7dfb      	ldrb	r3, [r7, #23]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d10a      	bne.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003b30:	4b42      	ldr	r3, [pc, #264]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8003b32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b34:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b3e:	493f      	ldr	r1, [pc, #252]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8003b40:	4313      	orrs	r3, r2
 8003b42:	654b      	str	r3, [r1, #84]	; 0x54
 8003b44:	e001      	b.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b46:	7dfb      	ldrb	r3, [r7, #23]
 8003b48:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d029      	beq.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0xcaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d003      	beq.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0xc66>
 8003b5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b62:	d007      	beq.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8003b64:	e00f      	b.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0xc86>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b66:	4b35      	ldr	r3, [pc, #212]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8003b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b6a:	4a34      	ldr	r2, [pc, #208]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8003b6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b70:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003b72:	e00b      	b.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0xc8c>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	3304      	adds	r3, #4
 8003b78:	2102      	movs	r1, #2
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f000 fb8a 	bl	8004294 <RCCEx_PLL2_Config>
 8003b80:	4603      	mov	r3, r0
 8003b82:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003b84:	e002      	b.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0xc8c>

    default:
      ret = HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	75fb      	strb	r3, [r7, #23]
      break;
 8003b8a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b8c:	7dfb      	ldrb	r3, [r7, #23]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d109      	bne.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0xca6>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003b92:	4b2a      	ldr	r3, [pc, #168]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8003b94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b96:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b9e:	4927      	ldr	r1, [pc, #156]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003ba4:	e001      	b.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0xcaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ba6:	7dfb      	ldrb	r3, [r7, #23]
 8003ba8:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d00a      	beq.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0xccc>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	3324      	adds	r3, #36	; 0x24
 8003bba:	2102      	movs	r1, #2
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f000 fc1b 	bl	80043f8 <RCCEx_PLL3_Config>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d001      	beq.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0xccc>
    {
      status=HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d035      	beq.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {

    switch(PeriphClkInit->RngClockSelection)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bde:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003be2:	d017      	beq.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8003be4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003be8:	d811      	bhi.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8003bea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bee:	d013      	beq.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 8003bf0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bf4:	d80b      	bhi.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d010      	beq.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 8003bfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bfe:	d106      	bne.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c00:	4b0e      	ldr	r3, [pc, #56]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8003c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c04:	4a0d      	ldr	r2, [pc, #52]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8003c06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c0a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8003c0c:	e007      	b.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	75fb      	strb	r3, [r7, #23]
      break;
 8003c12:	e004      	b.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8003c14:	bf00      	nop
 8003c16:	e002      	b.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8003c18:	bf00      	nop
 8003c1a:	e000      	b.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8003c1c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c1e:	7dfb      	ldrb	r3, [r7, #23]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d10d      	bne.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003c24:	4b05      	ldr	r3, [pc, #20]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8003c26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c28:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c32:	4902      	ldr	r1, [pc, #8]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8003c34:	4313      	orrs	r3, r2
 8003c36:	654b      	str	r3, [r1, #84]	; 0x54
 8003c38:	e004      	b.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8003c3a:	bf00      	nop
 8003c3c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c40:	7dfb      	ldrb	r3, [r7, #23]
 8003c42:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d008      	beq.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003c50:	4b30      	ldr	r3, [pc, #192]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003c52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c54:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c5c:	492d      	ldr	r1, [pc, #180]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d008      	beq.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0xd80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003c6e:	4b29      	ldr	r3, [pc, #164]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003c70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c72:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c7a:	4926      	ldr	r1, [pc, #152]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	650b      	str	r3, [r1, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d008      	beq.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0xd9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8003c8c:	4b21      	ldr	r3, [pc, #132]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003c8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c90:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c98:	491e      	ldr	r1, [pc, #120]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	658b      	str	r3, [r1, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d00d      	beq.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0xdc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003caa:	4b1a      	ldr	r3, [pc, #104]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003cac:	691b      	ldr	r3, [r3, #16]
 8003cae:	4a19      	ldr	r2, [pc, #100]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003cb0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003cb4:	6113      	str	r3, [r2, #16]
 8003cb6:	4b17      	ldr	r3, [pc, #92]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003cb8:	691a      	ldr	r2, [r3, #16]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003cc0:	4914      	ldr	r1, [pc, #80]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	da08      	bge.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0xde0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003cce:	4b11      	ldr	r3, [pc, #68]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003cd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cd2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cda:	490e      	ldr	r1, [pc, #56]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d009      	beq.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0xe00>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003cec:	4b09      	ldr	r3, [pc, #36]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003cee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cf0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cfa:	4906      	ldr	r1, [pc, #24]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8003d00:	7dbb      	ldrb	r3, [r7, #22]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d101      	bne.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0xe0a>
  {
    return HAL_OK;
 8003d06:	2300      	movs	r3, #0
 8003d08:	e000      	b.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0xe0c>
  }
  return HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	3718      	adds	r7, #24
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}
 8003d14:	58024400 	.word	0x58024400

08003d18 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8003d1c:	f7ff f894 	bl	8002e48 <HAL_RCC_GetHCLKFreq>
 8003d20:	4602      	mov	r2, r0
 8003d22:	4b06      	ldr	r3, [pc, #24]	; (8003d3c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003d24:	6a1b      	ldr	r3, [r3, #32]
 8003d26:	091b      	lsrs	r3, r3, #4
 8003d28:	f003 0307 	and.w	r3, r3, #7
 8003d2c:	4904      	ldr	r1, [pc, #16]	; (8003d40 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003d2e:	5ccb      	ldrb	r3, [r1, r3]
 8003d30:	f003 031f 	and.w	r3, r3, #31
 8003d34:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	bd80      	pop	{r7, pc}
 8003d3c:	58024400 	.word	0x58024400
 8003d40:	08006ebc 	.word	0x08006ebc

08003d44 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b089      	sub	sp, #36	; 0x24
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003d4c:	4ba1      	ldr	r3, [pc, #644]	; (8003fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d50:	f003 0303 	and.w	r3, r3, #3
 8003d54:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8003d56:	4b9f      	ldr	r3, [pc, #636]	; (8003fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d5a:	0b1b      	lsrs	r3, r3, #12
 8003d5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d60:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003d62:	4b9c      	ldr	r3, [pc, #624]	; (8003fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d66:	091b      	lsrs	r3, r3, #4
 8003d68:	f003 0301 	and.w	r3, r3, #1
 8003d6c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8003d6e:	4b99      	ldr	r3, [pc, #612]	; (8003fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d72:	08db      	lsrs	r3, r3, #3
 8003d74:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003d78:	693a      	ldr	r2, [r7, #16]
 8003d7a:	fb02 f303 	mul.w	r3, r2, r3
 8003d7e:	ee07 3a90 	vmov	s15, r3
 8003d82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d86:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	f000 8111 	beq.w	8003fb4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003d92:	69bb      	ldr	r3, [r7, #24]
 8003d94:	2b02      	cmp	r3, #2
 8003d96:	f000 8083 	beq.w	8003ea0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003d9a:	69bb      	ldr	r3, [r7, #24]
 8003d9c:	2b02      	cmp	r3, #2
 8003d9e:	f200 80a1 	bhi.w	8003ee4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003da2:	69bb      	ldr	r3, [r7, #24]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d003      	beq.n	8003db0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003da8:	69bb      	ldr	r3, [r7, #24]
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	d056      	beq.n	8003e5c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003dae:	e099      	b.n	8003ee4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003db0:	4b88      	ldr	r3, [pc, #544]	; (8003fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f003 0320 	and.w	r3, r3, #32
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d02d      	beq.n	8003e18 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003dbc:	4b85      	ldr	r3, [pc, #532]	; (8003fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	08db      	lsrs	r3, r3, #3
 8003dc2:	f003 0303 	and.w	r3, r3, #3
 8003dc6:	4a84      	ldr	r2, [pc, #528]	; (8003fd8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003dc8:	fa22 f303 	lsr.w	r3, r2, r3
 8003dcc:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	ee07 3a90 	vmov	s15, r3
 8003dd4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	ee07 3a90 	vmov	s15, r3
 8003dde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003de2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003de6:	4b7b      	ldr	r3, [pc, #492]	; (8003fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dee:	ee07 3a90 	vmov	s15, r3
 8003df2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003df6:	ed97 6a03 	vldr	s12, [r7, #12]
 8003dfa:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003fdc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003dfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e12:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003e16:	e087      	b.n	8003f28 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	ee07 3a90 	vmov	s15, r3
 8003e1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e22:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003fe0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003e26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e2a:	4b6a      	ldr	r3, [pc, #424]	; (8003fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e32:	ee07 3a90 	vmov	s15, r3
 8003e36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003e3e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003fdc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003e42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e56:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003e5a:	e065      	b.n	8003f28 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	ee07 3a90 	vmov	s15, r3
 8003e62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e66:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003fe4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003e6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e6e:	4b59      	ldr	r3, [pc, #356]	; (8003fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e76:	ee07 3a90 	vmov	s15, r3
 8003e7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003e82:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003fdc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003e86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e9a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003e9e:	e043      	b.n	8003f28 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	ee07 3a90 	vmov	s15, r3
 8003ea6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003eaa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003fe8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003eae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003eb2:	4b48      	ldr	r3, [pc, #288]	; (8003fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003eba:	ee07 3a90 	vmov	s15, r3
 8003ebe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ec2:	ed97 6a03 	vldr	s12, [r7, #12]
 8003ec6:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003fdc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003eca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ece:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ed2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ed6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003eda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ede:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003ee2:	e021      	b.n	8003f28 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	ee07 3a90 	vmov	s15, r3
 8003eea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003eee:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003fe4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003ef2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ef6:	4b37      	ldr	r3, [pc, #220]	; (8003fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003efa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003efe:	ee07 3a90 	vmov	s15, r3
 8003f02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f06:	ed97 6a03 	vldr	s12, [r7, #12]
 8003f0a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003fdc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003f0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f22:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003f26:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8003f28:	4b2a      	ldr	r3, [pc, #168]	; (8003fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f2c:	0a5b      	lsrs	r3, r3, #9
 8003f2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f32:	ee07 3a90 	vmov	s15, r3
 8003f36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f3a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003f3e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003f42:	edd7 6a07 	vldr	s13, [r7, #28]
 8003f46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f4e:	ee17 2a90 	vmov	r2, s15
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8003f56:	4b1f      	ldr	r3, [pc, #124]	; (8003fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f5a:	0c1b      	lsrs	r3, r3, #16
 8003f5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f60:	ee07 3a90 	vmov	s15, r3
 8003f64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f68:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003f6c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003f70:	edd7 6a07 	vldr	s13, [r7, #28]
 8003f74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f7c:	ee17 2a90 	vmov	r2, s15
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8003f84:	4b13      	ldr	r3, [pc, #76]	; (8003fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f88:	0e1b      	lsrs	r3, r3, #24
 8003f8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f8e:	ee07 3a90 	vmov	s15, r3
 8003f92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f96:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003f9a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003f9e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003fa2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003fa6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003faa:	ee17 2a90 	vmov	r2, s15
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003fb2:	e008      	b.n	8003fc6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	609a      	str	r2, [r3, #8]
}
 8003fc6:	bf00      	nop
 8003fc8:	3724      	adds	r7, #36	; 0x24
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr
 8003fd2:	bf00      	nop
 8003fd4:	58024400 	.word	0x58024400
 8003fd8:	03d09000 	.word	0x03d09000
 8003fdc:	46000000 	.word	0x46000000
 8003fe0:	4c742400 	.word	0x4c742400
 8003fe4:	4a742400 	.word	0x4a742400
 8003fe8:	4af42400 	.word	0x4af42400

08003fec <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b089      	sub	sp, #36	; 0x24
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003ff4:	4ba1      	ldr	r3, [pc, #644]	; (800427c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ff8:	f003 0303 	and.w	r3, r3, #3
 8003ffc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8003ffe:	4b9f      	ldr	r3, [pc, #636]	; (800427c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004002:	0d1b      	lsrs	r3, r3, #20
 8004004:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004008:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800400a:	4b9c      	ldr	r3, [pc, #624]	; (800427c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800400c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800400e:	0a1b      	lsrs	r3, r3, #8
 8004010:	f003 0301 	and.w	r3, r3, #1
 8004014:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8004016:	4b99      	ldr	r3, [pc, #612]	; (800427c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800401a:	08db      	lsrs	r3, r3, #3
 800401c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004020:	693a      	ldr	r2, [r7, #16]
 8004022:	fb02 f303 	mul.w	r3, r2, r3
 8004026:	ee07 3a90 	vmov	s15, r3
 800402a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800402e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	2b00      	cmp	r3, #0
 8004036:	f000 8111 	beq.w	800425c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800403a:	69bb      	ldr	r3, [r7, #24]
 800403c:	2b02      	cmp	r3, #2
 800403e:	f000 8083 	beq.w	8004148 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004042:	69bb      	ldr	r3, [r7, #24]
 8004044:	2b02      	cmp	r3, #2
 8004046:	f200 80a1 	bhi.w	800418c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800404a:	69bb      	ldr	r3, [r7, #24]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d003      	beq.n	8004058 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004050:	69bb      	ldr	r3, [r7, #24]
 8004052:	2b01      	cmp	r3, #1
 8004054:	d056      	beq.n	8004104 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004056:	e099      	b.n	800418c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004058:	4b88      	ldr	r3, [pc, #544]	; (800427c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f003 0320 	and.w	r3, r3, #32
 8004060:	2b00      	cmp	r3, #0
 8004062:	d02d      	beq.n	80040c0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004064:	4b85      	ldr	r3, [pc, #532]	; (800427c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	08db      	lsrs	r3, r3, #3
 800406a:	f003 0303 	and.w	r3, r3, #3
 800406e:	4a84      	ldr	r2, [pc, #528]	; (8004280 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004070:	fa22 f303 	lsr.w	r3, r2, r3
 8004074:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	ee07 3a90 	vmov	s15, r3
 800407c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	ee07 3a90 	vmov	s15, r3
 8004086:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800408a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800408e:	4b7b      	ldr	r3, [pc, #492]	; (800427c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004092:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004096:	ee07 3a90 	vmov	s15, r3
 800409a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800409e:	ed97 6a03 	vldr	s12, [r7, #12]
 80040a2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004284 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80040a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80040b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040ba:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80040be:	e087      	b.n	80041d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	ee07 3a90 	vmov	s15, r3
 80040c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040ca:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004288 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80040ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040d2:	4b6a      	ldr	r3, [pc, #424]	; (800427c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80040d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040da:	ee07 3a90 	vmov	s15, r3
 80040de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80040e6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004284 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80040ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80040f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040fe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004102:	e065      	b.n	80041d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	ee07 3a90 	vmov	s15, r3
 800410a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800410e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800428c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004112:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004116:	4b59      	ldr	r3, [pc, #356]	; (800427c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800411a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800411e:	ee07 3a90 	vmov	s15, r3
 8004122:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004126:	ed97 6a03 	vldr	s12, [r7, #12]
 800412a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004284 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800412e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004132:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004136:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800413a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800413e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004142:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004146:	e043      	b.n	80041d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	ee07 3a90 	vmov	s15, r3
 800414e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004152:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004290 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004156:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800415a:	4b48      	ldr	r3, [pc, #288]	; (800427c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800415c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800415e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004162:	ee07 3a90 	vmov	s15, r3
 8004166:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800416a:	ed97 6a03 	vldr	s12, [r7, #12]
 800416e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004284 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004172:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004176:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800417a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800417e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004182:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004186:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800418a:	e021      	b.n	80041d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	ee07 3a90 	vmov	s15, r3
 8004192:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004196:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800428c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800419a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800419e:	4b37      	ldr	r3, [pc, #220]	; (800427c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80041a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041a6:	ee07 3a90 	vmov	s15, r3
 80041aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80041b2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004284 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80041b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80041ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80041be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80041c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80041c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041ca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80041ce:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80041d0:	4b2a      	ldr	r3, [pc, #168]	; (800427c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80041d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d4:	0a5b      	lsrs	r3, r3, #9
 80041d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80041da:	ee07 3a90 	vmov	s15, r3
 80041de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80041e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80041ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80041ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80041f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041f6:	ee17 2a90 	vmov	r2, s15
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80041fe:	4b1f      	ldr	r3, [pc, #124]	; (800427c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004202:	0c1b      	lsrs	r3, r3, #16
 8004204:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004208:	ee07 3a90 	vmov	s15, r3
 800420c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004210:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004214:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004218:	edd7 6a07 	vldr	s13, [r7, #28]
 800421c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004220:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004224:	ee17 2a90 	vmov	r2, s15
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800422c:	4b13      	ldr	r3, [pc, #76]	; (800427c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800422e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004230:	0e1b      	lsrs	r3, r3, #24
 8004232:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004236:	ee07 3a90 	vmov	s15, r3
 800423a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800423e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004242:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004246:	edd7 6a07 	vldr	s13, [r7, #28]
 800424a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800424e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004252:	ee17 2a90 	vmov	r2, s15
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800425a:	e008      	b.n	800426e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2200      	movs	r2, #0
 8004260:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2200      	movs	r2, #0
 8004266:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2200      	movs	r2, #0
 800426c:	609a      	str	r2, [r3, #8]
}
 800426e:	bf00      	nop
 8004270:	3724      	adds	r7, #36	; 0x24
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr
 800427a:	bf00      	nop
 800427c:	58024400 	.word	0x58024400
 8004280:	03d09000 	.word	0x03d09000
 8004284:	46000000 	.word	0x46000000
 8004288:	4c742400 	.word	0x4c742400
 800428c:	4a742400 	.word	0x4a742400
 8004290:	4af42400 	.word	0x4af42400

08004294 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b084      	sub	sp, #16
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
 800429c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800429e:	2300      	movs	r3, #0
 80042a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80042a2:	4b53      	ldr	r3, [pc, #332]	; (80043f0 <RCCEx_PLL2_Config+0x15c>)
 80042a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042a6:	f003 0303 	and.w	r3, r3, #3
 80042aa:	2b03      	cmp	r3, #3
 80042ac:	d101      	bne.n	80042b2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	e099      	b.n	80043e6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80042b2:	4b4f      	ldr	r3, [pc, #316]	; (80043f0 <RCCEx_PLL2_Config+0x15c>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a4e      	ldr	r2, [pc, #312]	; (80043f0 <RCCEx_PLL2_Config+0x15c>)
 80042b8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80042bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042be:	f7fc fdc7 	bl	8000e50 <HAL_GetTick>
 80042c2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80042c4:	e008      	b.n	80042d8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80042c6:	f7fc fdc3 	bl	8000e50 <HAL_GetTick>
 80042ca:	4602      	mov	r2, r0
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	1ad3      	subs	r3, r2, r3
 80042d0:	2b02      	cmp	r3, #2
 80042d2:	d901      	bls.n	80042d8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80042d4:	2303      	movs	r3, #3
 80042d6:	e086      	b.n	80043e6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80042d8:	4b45      	ldr	r3, [pc, #276]	; (80043f0 <RCCEx_PLL2_Config+0x15c>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d1f0      	bne.n	80042c6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80042e4:	4b42      	ldr	r3, [pc, #264]	; (80043f0 <RCCEx_PLL2_Config+0x15c>)
 80042e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042e8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	031b      	lsls	r3, r3, #12
 80042f2:	493f      	ldr	r1, [pc, #252]	; (80043f0 <RCCEx_PLL2_Config+0x15c>)
 80042f4:	4313      	orrs	r3, r2
 80042f6:	628b      	str	r3, [r1, #40]	; 0x28
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	3b01      	subs	r3, #1
 80042fe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	3b01      	subs	r3, #1
 8004308:	025b      	lsls	r3, r3, #9
 800430a:	b29b      	uxth	r3, r3
 800430c:	431a      	orrs	r2, r3
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	68db      	ldr	r3, [r3, #12]
 8004312:	3b01      	subs	r3, #1
 8004314:	041b      	lsls	r3, r3, #16
 8004316:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800431a:	431a      	orrs	r2, r3
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	691b      	ldr	r3, [r3, #16]
 8004320:	3b01      	subs	r3, #1
 8004322:	061b      	lsls	r3, r3, #24
 8004324:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004328:	4931      	ldr	r1, [pc, #196]	; (80043f0 <RCCEx_PLL2_Config+0x15c>)
 800432a:	4313      	orrs	r3, r2
 800432c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800432e:	4b30      	ldr	r3, [pc, #192]	; (80043f0 <RCCEx_PLL2_Config+0x15c>)
 8004330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004332:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	695b      	ldr	r3, [r3, #20]
 800433a:	492d      	ldr	r1, [pc, #180]	; (80043f0 <RCCEx_PLL2_Config+0x15c>)
 800433c:	4313      	orrs	r3, r2
 800433e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004340:	4b2b      	ldr	r3, [pc, #172]	; (80043f0 <RCCEx_PLL2_Config+0x15c>)
 8004342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004344:	f023 0220 	bic.w	r2, r3, #32
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	699b      	ldr	r3, [r3, #24]
 800434c:	4928      	ldr	r1, [pc, #160]	; (80043f0 <RCCEx_PLL2_Config+0x15c>)
 800434e:	4313      	orrs	r3, r2
 8004350:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004352:	4b27      	ldr	r3, [pc, #156]	; (80043f0 <RCCEx_PLL2_Config+0x15c>)
 8004354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004356:	4a26      	ldr	r2, [pc, #152]	; (80043f0 <RCCEx_PLL2_Config+0x15c>)
 8004358:	f023 0310 	bic.w	r3, r3, #16
 800435c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800435e:	4b24      	ldr	r3, [pc, #144]	; (80043f0 <RCCEx_PLL2_Config+0x15c>)
 8004360:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004362:	4b24      	ldr	r3, [pc, #144]	; (80043f4 <RCCEx_PLL2_Config+0x160>)
 8004364:	4013      	ands	r3, r2
 8004366:	687a      	ldr	r2, [r7, #4]
 8004368:	69d2      	ldr	r2, [r2, #28]
 800436a:	00d2      	lsls	r2, r2, #3
 800436c:	4920      	ldr	r1, [pc, #128]	; (80043f0 <RCCEx_PLL2_Config+0x15c>)
 800436e:	4313      	orrs	r3, r2
 8004370:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004372:	4b1f      	ldr	r3, [pc, #124]	; (80043f0 <RCCEx_PLL2_Config+0x15c>)
 8004374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004376:	4a1e      	ldr	r2, [pc, #120]	; (80043f0 <RCCEx_PLL2_Config+0x15c>)
 8004378:	f043 0310 	orr.w	r3, r3, #16
 800437c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d106      	bne.n	8004392 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004384:	4b1a      	ldr	r3, [pc, #104]	; (80043f0 <RCCEx_PLL2_Config+0x15c>)
 8004386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004388:	4a19      	ldr	r2, [pc, #100]	; (80043f0 <RCCEx_PLL2_Config+0x15c>)
 800438a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800438e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004390:	e00f      	b.n	80043b2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	2b01      	cmp	r3, #1
 8004396:	d106      	bne.n	80043a6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004398:	4b15      	ldr	r3, [pc, #84]	; (80043f0 <RCCEx_PLL2_Config+0x15c>)
 800439a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800439c:	4a14      	ldr	r2, [pc, #80]	; (80043f0 <RCCEx_PLL2_Config+0x15c>)
 800439e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80043a2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80043a4:	e005      	b.n	80043b2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80043a6:	4b12      	ldr	r3, [pc, #72]	; (80043f0 <RCCEx_PLL2_Config+0x15c>)
 80043a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043aa:	4a11      	ldr	r2, [pc, #68]	; (80043f0 <RCCEx_PLL2_Config+0x15c>)
 80043ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80043b0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80043b2:	4b0f      	ldr	r3, [pc, #60]	; (80043f0 <RCCEx_PLL2_Config+0x15c>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a0e      	ldr	r2, [pc, #56]	; (80043f0 <RCCEx_PLL2_Config+0x15c>)
 80043b8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80043bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043be:	f7fc fd47 	bl	8000e50 <HAL_GetTick>
 80043c2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80043c4:	e008      	b.n	80043d8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80043c6:	f7fc fd43 	bl	8000e50 <HAL_GetTick>
 80043ca:	4602      	mov	r2, r0
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	1ad3      	subs	r3, r2, r3
 80043d0:	2b02      	cmp	r3, #2
 80043d2:	d901      	bls.n	80043d8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80043d4:	2303      	movs	r3, #3
 80043d6:	e006      	b.n	80043e6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80043d8:	4b05      	ldr	r3, [pc, #20]	; (80043f0 <RCCEx_PLL2_Config+0x15c>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d0f0      	beq.n	80043c6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80043e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	3710      	adds	r7, #16
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}
 80043ee:	bf00      	nop
 80043f0:	58024400 	.word	0x58024400
 80043f4:	ffff0007 	.word	0xffff0007

080043f8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b084      	sub	sp, #16
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
 8004400:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004402:	2300      	movs	r3, #0
 8004404:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004406:	4b53      	ldr	r3, [pc, #332]	; (8004554 <RCCEx_PLL3_Config+0x15c>)
 8004408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800440a:	f003 0303 	and.w	r3, r3, #3
 800440e:	2b03      	cmp	r3, #3
 8004410:	d101      	bne.n	8004416 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	e099      	b.n	800454a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004416:	4b4f      	ldr	r3, [pc, #316]	; (8004554 <RCCEx_PLL3_Config+0x15c>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a4e      	ldr	r2, [pc, #312]	; (8004554 <RCCEx_PLL3_Config+0x15c>)
 800441c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004420:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004422:	f7fc fd15 	bl	8000e50 <HAL_GetTick>
 8004426:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004428:	e008      	b.n	800443c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800442a:	f7fc fd11 	bl	8000e50 <HAL_GetTick>
 800442e:	4602      	mov	r2, r0
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	1ad3      	subs	r3, r2, r3
 8004434:	2b02      	cmp	r3, #2
 8004436:	d901      	bls.n	800443c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004438:	2303      	movs	r3, #3
 800443a:	e086      	b.n	800454a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800443c:	4b45      	ldr	r3, [pc, #276]	; (8004554 <RCCEx_PLL3_Config+0x15c>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004444:	2b00      	cmp	r3, #0
 8004446:	d1f0      	bne.n	800442a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004448:	4b42      	ldr	r3, [pc, #264]	; (8004554 <RCCEx_PLL3_Config+0x15c>)
 800444a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800444c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	051b      	lsls	r3, r3, #20
 8004456:	493f      	ldr	r1, [pc, #252]	; (8004554 <RCCEx_PLL3_Config+0x15c>)
 8004458:	4313      	orrs	r3, r2
 800445a:	628b      	str	r3, [r1, #40]	; 0x28
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	3b01      	subs	r3, #1
 8004462:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	3b01      	subs	r3, #1
 800446c:	025b      	lsls	r3, r3, #9
 800446e:	b29b      	uxth	r3, r3
 8004470:	431a      	orrs	r2, r3
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	68db      	ldr	r3, [r3, #12]
 8004476:	3b01      	subs	r3, #1
 8004478:	041b      	lsls	r3, r3, #16
 800447a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800447e:	431a      	orrs	r2, r3
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	691b      	ldr	r3, [r3, #16]
 8004484:	3b01      	subs	r3, #1
 8004486:	061b      	lsls	r3, r3, #24
 8004488:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800448c:	4931      	ldr	r1, [pc, #196]	; (8004554 <RCCEx_PLL3_Config+0x15c>)
 800448e:	4313      	orrs	r3, r2
 8004490:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004492:	4b30      	ldr	r3, [pc, #192]	; (8004554 <RCCEx_PLL3_Config+0x15c>)
 8004494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004496:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	695b      	ldr	r3, [r3, #20]
 800449e:	492d      	ldr	r1, [pc, #180]	; (8004554 <RCCEx_PLL3_Config+0x15c>)
 80044a0:	4313      	orrs	r3, r2
 80044a2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80044a4:	4b2b      	ldr	r3, [pc, #172]	; (8004554 <RCCEx_PLL3_Config+0x15c>)
 80044a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	699b      	ldr	r3, [r3, #24]
 80044b0:	4928      	ldr	r1, [pc, #160]	; (8004554 <RCCEx_PLL3_Config+0x15c>)
 80044b2:	4313      	orrs	r3, r2
 80044b4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80044b6:	4b27      	ldr	r3, [pc, #156]	; (8004554 <RCCEx_PLL3_Config+0x15c>)
 80044b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ba:	4a26      	ldr	r2, [pc, #152]	; (8004554 <RCCEx_PLL3_Config+0x15c>)
 80044bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044c0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80044c2:	4b24      	ldr	r3, [pc, #144]	; (8004554 <RCCEx_PLL3_Config+0x15c>)
 80044c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044c6:	4b24      	ldr	r3, [pc, #144]	; (8004558 <RCCEx_PLL3_Config+0x160>)
 80044c8:	4013      	ands	r3, r2
 80044ca:	687a      	ldr	r2, [r7, #4]
 80044cc:	69d2      	ldr	r2, [r2, #28]
 80044ce:	00d2      	lsls	r2, r2, #3
 80044d0:	4920      	ldr	r1, [pc, #128]	; (8004554 <RCCEx_PLL3_Config+0x15c>)
 80044d2:	4313      	orrs	r3, r2
 80044d4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80044d6:	4b1f      	ldr	r3, [pc, #124]	; (8004554 <RCCEx_PLL3_Config+0x15c>)
 80044d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044da:	4a1e      	ldr	r2, [pc, #120]	; (8004554 <RCCEx_PLL3_Config+0x15c>)
 80044dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044e0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d106      	bne.n	80044f6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80044e8:	4b1a      	ldr	r3, [pc, #104]	; (8004554 <RCCEx_PLL3_Config+0x15c>)
 80044ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ec:	4a19      	ldr	r2, [pc, #100]	; (8004554 <RCCEx_PLL3_Config+0x15c>)
 80044ee:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80044f2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80044f4:	e00f      	b.n	8004516 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	d106      	bne.n	800450a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80044fc:	4b15      	ldr	r3, [pc, #84]	; (8004554 <RCCEx_PLL3_Config+0x15c>)
 80044fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004500:	4a14      	ldr	r2, [pc, #80]	; (8004554 <RCCEx_PLL3_Config+0x15c>)
 8004502:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004506:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004508:	e005      	b.n	8004516 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800450a:	4b12      	ldr	r3, [pc, #72]	; (8004554 <RCCEx_PLL3_Config+0x15c>)
 800450c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800450e:	4a11      	ldr	r2, [pc, #68]	; (8004554 <RCCEx_PLL3_Config+0x15c>)
 8004510:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004514:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004516:	4b0f      	ldr	r3, [pc, #60]	; (8004554 <RCCEx_PLL3_Config+0x15c>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a0e      	ldr	r2, [pc, #56]	; (8004554 <RCCEx_PLL3_Config+0x15c>)
 800451c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004520:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004522:	f7fc fc95 	bl	8000e50 <HAL_GetTick>
 8004526:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004528:	e008      	b.n	800453c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800452a:	f7fc fc91 	bl	8000e50 <HAL_GetTick>
 800452e:	4602      	mov	r2, r0
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	1ad3      	subs	r3, r2, r3
 8004534:	2b02      	cmp	r3, #2
 8004536:	d901      	bls.n	800453c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004538:	2303      	movs	r3, #3
 800453a:	e006      	b.n	800454a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800453c:	4b05      	ldr	r3, [pc, #20]	; (8004554 <RCCEx_PLL3_Config+0x15c>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004544:	2b00      	cmp	r3, #0
 8004546:	d0f0      	beq.n	800452a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004548:	7bfb      	ldrb	r3, [r7, #15]
}
 800454a:	4618      	mov	r0, r3
 800454c:	3710      	adds	r7, #16
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}
 8004552:	bf00      	nop
 8004554:	58024400 	.word	0x58024400
 8004558:	ffff0007 	.word	0xffff0007

0800455c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b082      	sub	sp, #8
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d101      	bne.n	800456e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	e042      	b.n	80045f4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004574:	2b00      	cmp	r3, #0
 8004576:	d106      	bne.n	8004586 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2200      	movs	r2, #0
 800457c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	f7fc fa9b 	bl	8000abc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2224      	movs	r2, #36	; 0x24
 800458a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f022 0201 	bic.w	r2, r2, #1
 800459c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f000 fcd6 	bl	8004f50 <UART_SetConfig>
 80045a4:	4603      	mov	r3, r0
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d101      	bne.n	80045ae <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	e022      	b.n	80045f4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d002      	beq.n	80045bc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f001 fb36 	bl	8005c28 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	685a      	ldr	r2, [r3, #4]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80045ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	689a      	ldr	r2, [r3, #8]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80045da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	681a      	ldr	r2, [r3, #0]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f042 0201 	orr.w	r2, r2, #1
 80045ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80045ec:	6878      	ldr	r0, [r7, #4]
 80045ee:	f001 fbbd 	bl	8005d6c <UART_CheckIdleState>
 80045f2:	4603      	mov	r3, r0
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	3708      	adds	r7, #8
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}

080045fc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b08a      	sub	sp, #40	; 0x28
 8004600:	af02      	add	r7, sp, #8
 8004602:	60f8      	str	r0, [r7, #12]
 8004604:	60b9      	str	r1, [r7, #8]
 8004606:	603b      	str	r3, [r7, #0]
 8004608:	4613      	mov	r3, r2
 800460a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004612:	2b20      	cmp	r3, #32
 8004614:	f040 8083 	bne.w	800471e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d002      	beq.n	8004624 <HAL_UART_Transmit+0x28>
 800461e:	88fb      	ldrh	r3, [r7, #6]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d101      	bne.n	8004628 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004624:	2301      	movs	r3, #1
 8004626:	e07b      	b.n	8004720 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800462e:	2b01      	cmp	r3, #1
 8004630:	d101      	bne.n	8004636 <HAL_UART_Transmit+0x3a>
 8004632:	2302      	movs	r3, #2
 8004634:	e074      	b.n	8004720 <HAL_UART_Transmit+0x124>
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2201      	movs	r2, #1
 800463a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2200      	movs	r2, #0
 8004642:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2221      	movs	r2, #33	; 0x21
 800464a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800464e:	f7fc fbff 	bl	8000e50 <HAL_GetTick>
 8004652:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	88fa      	ldrh	r2, [r7, #6]
 8004658:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	88fa      	ldrh	r2, [r7, #6]
 8004660:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800466c:	d108      	bne.n	8004680 <HAL_UART_Transmit+0x84>
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	691b      	ldr	r3, [r3, #16]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d104      	bne.n	8004680 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8004676:	2300      	movs	r3, #0
 8004678:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	61bb      	str	r3, [r7, #24]
 800467e:	e003      	b.n	8004688 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004684:	2300      	movs	r3, #0
 8004686:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2200      	movs	r2, #0
 800468c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8004690:	e02c      	b.n	80046ec <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	9300      	str	r3, [sp, #0]
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	2200      	movs	r2, #0
 800469a:	2180      	movs	r1, #128	; 0x80
 800469c:	68f8      	ldr	r0, [r7, #12]
 800469e:	f001 fbb0 	bl	8005e02 <UART_WaitOnFlagUntilTimeout>
 80046a2:	4603      	mov	r3, r0
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d001      	beq.n	80046ac <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80046a8:	2303      	movs	r3, #3
 80046aa:	e039      	b.n	8004720 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80046ac:	69fb      	ldr	r3, [r7, #28]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d10b      	bne.n	80046ca <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80046b2:	69bb      	ldr	r3, [r7, #24]
 80046b4:	881b      	ldrh	r3, [r3, #0]
 80046b6:	461a      	mov	r2, r3
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046c0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80046c2:	69bb      	ldr	r3, [r7, #24]
 80046c4:	3302      	adds	r3, #2
 80046c6:	61bb      	str	r3, [r7, #24]
 80046c8:	e007      	b.n	80046da <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80046ca:	69fb      	ldr	r3, [r7, #28]
 80046cc:	781a      	ldrb	r2, [r3, #0]
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80046d4:	69fb      	ldr	r3, [r7, #28]
 80046d6:	3301      	adds	r3, #1
 80046d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80046e0:	b29b      	uxth	r3, r3
 80046e2:	3b01      	subs	r3, #1
 80046e4:	b29a      	uxth	r2, r3
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80046f2:	b29b      	uxth	r3, r3
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d1cc      	bne.n	8004692 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	9300      	str	r3, [sp, #0]
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	2200      	movs	r2, #0
 8004700:	2140      	movs	r1, #64	; 0x40
 8004702:	68f8      	ldr	r0, [r7, #12]
 8004704:	f001 fb7d 	bl	8005e02 <UART_WaitOnFlagUntilTimeout>
 8004708:	4603      	mov	r3, r0
 800470a:	2b00      	cmp	r3, #0
 800470c:	d001      	beq.n	8004712 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800470e:	2303      	movs	r3, #3
 8004710:	e006      	b.n	8004720 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2220      	movs	r2, #32
 8004716:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800471a:	2300      	movs	r3, #0
 800471c:	e000      	b.n	8004720 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800471e:	2302      	movs	r3, #2
  }
}
 8004720:	4618      	mov	r0, r3
 8004722:	3720      	adds	r7, #32
 8004724:	46bd      	mov	sp, r7
 8004726:	bd80      	pop	{r7, pc}

08004728 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b08a      	sub	sp, #40	; 0x28
 800472c:	af00      	add	r7, sp, #0
 800472e:	60f8      	str	r0, [r7, #12]
 8004730:	60b9      	str	r1, [r7, #8]
 8004732:	4613      	mov	r3, r2
 8004734:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800473c:	2b20      	cmp	r3, #32
 800473e:	d142      	bne.n	80047c6 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d002      	beq.n	800474c <HAL_UART_Receive_IT+0x24>
 8004746:	88fb      	ldrh	r3, [r7, #6]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d101      	bne.n	8004750 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800474c:	2301      	movs	r3, #1
 800474e:	e03b      	b.n	80047c8 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004756:	2b01      	cmp	r3, #1
 8004758:	d101      	bne.n	800475e <HAL_UART_Receive_IT+0x36>
 800475a:	2302      	movs	r3, #2
 800475c:	e034      	b.n	80047c8 <HAL_UART_Receive_IT+0xa0>
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2201      	movs	r2, #1
 8004762:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2200      	movs	r2, #0
 800476a:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a17      	ldr	r2, [pc, #92]	; (80047d0 <HAL_UART_Receive_IT+0xa8>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d01f      	beq.n	80047b6 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004780:	2b00      	cmp	r3, #0
 8004782:	d018      	beq.n	80047b6 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	e853 3f00 	ldrex	r3, [r3]
 8004790:	613b      	str	r3, [r7, #16]
   return(result);
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004798:	627b      	str	r3, [r7, #36]	; 0x24
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	461a      	mov	r2, r3
 80047a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a2:	623b      	str	r3, [r7, #32]
 80047a4:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047a6:	69f9      	ldr	r1, [r7, #28]
 80047a8:	6a3a      	ldr	r2, [r7, #32]
 80047aa:	e841 2300 	strex	r3, r2, [r1]
 80047ae:	61bb      	str	r3, [r7, #24]
   return(result);
 80047b0:	69bb      	ldr	r3, [r7, #24]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d1e6      	bne.n	8004784 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80047b6:	88fb      	ldrh	r3, [r7, #6]
 80047b8:	461a      	mov	r2, r3
 80047ba:	68b9      	ldr	r1, [r7, #8]
 80047bc:	68f8      	ldr	r0, [r7, #12]
 80047be:	f001 fbe9 	bl	8005f94 <UART_Start_Receive_IT>
 80047c2:	4603      	mov	r3, r0
 80047c4:	e000      	b.n	80047c8 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80047c6:	2302      	movs	r3, #2
  }
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	3728      	adds	r7, #40	; 0x28
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}
 80047d0:	58000c00 	.word	0x58000c00

080047d4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b0ba      	sub	sp, #232	; 0xe8
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	69db      	ldr	r3, [r3, #28]
 80047e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80047fa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80047fe:	f640 030f 	movw	r3, #2063	; 0x80f
 8004802:	4013      	ands	r3, r2
 8004804:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004808:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800480c:	2b00      	cmp	r3, #0
 800480e:	d11b      	bne.n	8004848 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004810:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004814:	f003 0320 	and.w	r3, r3, #32
 8004818:	2b00      	cmp	r3, #0
 800481a:	d015      	beq.n	8004848 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800481c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004820:	f003 0320 	and.w	r3, r3, #32
 8004824:	2b00      	cmp	r3, #0
 8004826:	d105      	bne.n	8004834 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004828:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800482c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004830:	2b00      	cmp	r3, #0
 8004832:	d009      	beq.n	8004848 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004838:	2b00      	cmp	r3, #0
 800483a:	f000 835a 	beq.w	8004ef2 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	4798      	blx	r3
      }
      return;
 8004846:	e354      	b.n	8004ef2 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004848:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800484c:	2b00      	cmp	r3, #0
 800484e:	f000 811f 	beq.w	8004a90 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004852:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8004856:	4b8b      	ldr	r3, [pc, #556]	; (8004a84 <HAL_UART_IRQHandler+0x2b0>)
 8004858:	4013      	ands	r3, r2
 800485a:	2b00      	cmp	r3, #0
 800485c:	d106      	bne.n	800486c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800485e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004862:	4b89      	ldr	r3, [pc, #548]	; (8004a88 <HAL_UART_IRQHandler+0x2b4>)
 8004864:	4013      	ands	r3, r2
 8004866:	2b00      	cmp	r3, #0
 8004868:	f000 8112 	beq.w	8004a90 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800486c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004870:	f003 0301 	and.w	r3, r3, #1
 8004874:	2b00      	cmp	r3, #0
 8004876:	d011      	beq.n	800489c <HAL_UART_IRQHandler+0xc8>
 8004878:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800487c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004880:	2b00      	cmp	r3, #0
 8004882:	d00b      	beq.n	800489c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	2201      	movs	r2, #1
 800488a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004892:	f043 0201 	orr.w	r2, r3, #1
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800489c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048a0:	f003 0302 	and.w	r3, r3, #2
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d011      	beq.n	80048cc <HAL_UART_IRQHandler+0xf8>
 80048a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80048ac:	f003 0301 	and.w	r3, r3, #1
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d00b      	beq.n	80048cc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	2202      	movs	r2, #2
 80048ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048c2:	f043 0204 	orr.w	r2, r3, #4
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80048cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048d0:	f003 0304 	and.w	r3, r3, #4
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d011      	beq.n	80048fc <HAL_UART_IRQHandler+0x128>
 80048d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80048dc:	f003 0301 	and.w	r3, r3, #1
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d00b      	beq.n	80048fc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	2204      	movs	r2, #4
 80048ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048f2:	f043 0202 	orr.w	r2, r3, #2
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80048fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004900:	f003 0308 	and.w	r3, r3, #8
 8004904:	2b00      	cmp	r3, #0
 8004906:	d017      	beq.n	8004938 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004908:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800490c:	f003 0320 	and.w	r3, r3, #32
 8004910:	2b00      	cmp	r3, #0
 8004912:	d105      	bne.n	8004920 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004914:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8004918:	4b5a      	ldr	r3, [pc, #360]	; (8004a84 <HAL_UART_IRQHandler+0x2b0>)
 800491a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800491c:	2b00      	cmp	r3, #0
 800491e:	d00b      	beq.n	8004938 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	2208      	movs	r2, #8
 8004926:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800492e:	f043 0208 	orr.w	r2, r3, #8
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004938:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800493c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004940:	2b00      	cmp	r3, #0
 8004942:	d012      	beq.n	800496a <HAL_UART_IRQHandler+0x196>
 8004944:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004948:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800494c:	2b00      	cmp	r3, #0
 800494e:	d00c      	beq.n	800496a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004958:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004960:	f043 0220 	orr.w	r2, r3, #32
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004970:	2b00      	cmp	r3, #0
 8004972:	f000 82c0 	beq.w	8004ef6 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004976:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800497a:	f003 0320 	and.w	r3, r3, #32
 800497e:	2b00      	cmp	r3, #0
 8004980:	d013      	beq.n	80049aa <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004982:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004986:	f003 0320 	and.w	r3, r3, #32
 800498a:	2b00      	cmp	r3, #0
 800498c:	d105      	bne.n	800499a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800498e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004992:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004996:	2b00      	cmp	r3, #0
 8004998:	d007      	beq.n	80049aa <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d003      	beq.n	80049aa <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049b0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049be:	2b40      	cmp	r3, #64	; 0x40
 80049c0:	d005      	beq.n	80049ce <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80049c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80049c6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d04f      	beq.n	8004a6e <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f001 fc0a 	bl	80061e8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049de:	2b40      	cmp	r3, #64	; 0x40
 80049e0:	d141      	bne.n	8004a66 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	3308      	adds	r3, #8
 80049e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80049f0:	e853 3f00 	ldrex	r3, [r3]
 80049f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80049f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80049fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a00:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	3308      	adds	r3, #8
 8004a0a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004a0e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004a12:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a16:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004a1a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004a1e:	e841 2300 	strex	r3, r2, [r1]
 8004a22:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004a26:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d1d9      	bne.n	80049e2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d013      	beq.n	8004a5e <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a3a:	4a14      	ldr	r2, [pc, #80]	; (8004a8c <HAL_UART_IRQHandler+0x2b8>)
 8004a3c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a42:	4618      	mov	r0, r3
 8004a44:	f7fc fe62 	bl	800170c <HAL_DMA_Abort_IT>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d017      	beq.n	8004a7e <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a54:	687a      	ldr	r2, [r7, #4]
 8004a56:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8004a58:	4610      	mov	r0, r2
 8004a5a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a5c:	e00f      	b.n	8004a7e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f000 fa60 	bl	8004f24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a64:	e00b      	b.n	8004a7e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f000 fa5c 	bl	8004f24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a6c:	e007      	b.n	8004a7e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f000 fa58 	bl	8004f24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2200      	movs	r2, #0
 8004a78:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8004a7c:	e23b      	b.n	8004ef6 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a7e:	bf00      	nop
    return;
 8004a80:	e239      	b.n	8004ef6 <HAL_UART_IRQHandler+0x722>
 8004a82:	bf00      	nop
 8004a84:	10000001 	.word	0x10000001
 8004a88:	04000120 	.word	0x04000120
 8004a8c:	080062b5 	.word	0x080062b5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	f040 81ce 	bne.w	8004e36 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004a9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a9e:	f003 0310 	and.w	r3, r3, #16
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	f000 81c7 	beq.w	8004e36 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004aa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004aac:	f003 0310 	and.w	r3, r3, #16
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	f000 81c0 	beq.w	8004e36 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	2210      	movs	r2, #16
 8004abc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ac8:	2b40      	cmp	r3, #64	; 0x40
 8004aca:	f040 813b 	bne.w	8004d44 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a8b      	ldr	r2, [pc, #556]	; (8004d04 <HAL_UART_IRQHandler+0x530>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d059      	beq.n	8004b8e <HAL_UART_IRQHandler+0x3ba>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a89      	ldr	r2, [pc, #548]	; (8004d08 <HAL_UART_IRQHandler+0x534>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d053      	beq.n	8004b8e <HAL_UART_IRQHandler+0x3ba>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a87      	ldr	r2, [pc, #540]	; (8004d0c <HAL_UART_IRQHandler+0x538>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d04d      	beq.n	8004b8e <HAL_UART_IRQHandler+0x3ba>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a85      	ldr	r2, [pc, #532]	; (8004d10 <HAL_UART_IRQHandler+0x53c>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d047      	beq.n	8004b8e <HAL_UART_IRQHandler+0x3ba>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a83      	ldr	r2, [pc, #524]	; (8004d14 <HAL_UART_IRQHandler+0x540>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d041      	beq.n	8004b8e <HAL_UART_IRQHandler+0x3ba>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a81      	ldr	r2, [pc, #516]	; (8004d18 <HAL_UART_IRQHandler+0x544>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d03b      	beq.n	8004b8e <HAL_UART_IRQHandler+0x3ba>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a7f      	ldr	r2, [pc, #508]	; (8004d1c <HAL_UART_IRQHandler+0x548>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d035      	beq.n	8004b8e <HAL_UART_IRQHandler+0x3ba>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a7d      	ldr	r2, [pc, #500]	; (8004d20 <HAL_UART_IRQHandler+0x54c>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d02f      	beq.n	8004b8e <HAL_UART_IRQHandler+0x3ba>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a7b      	ldr	r2, [pc, #492]	; (8004d24 <HAL_UART_IRQHandler+0x550>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d029      	beq.n	8004b8e <HAL_UART_IRQHandler+0x3ba>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a79      	ldr	r2, [pc, #484]	; (8004d28 <HAL_UART_IRQHandler+0x554>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d023      	beq.n	8004b8e <HAL_UART_IRQHandler+0x3ba>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a77      	ldr	r2, [pc, #476]	; (8004d2c <HAL_UART_IRQHandler+0x558>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d01d      	beq.n	8004b8e <HAL_UART_IRQHandler+0x3ba>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a75      	ldr	r2, [pc, #468]	; (8004d30 <HAL_UART_IRQHandler+0x55c>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d017      	beq.n	8004b8e <HAL_UART_IRQHandler+0x3ba>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a73      	ldr	r2, [pc, #460]	; (8004d34 <HAL_UART_IRQHandler+0x560>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d011      	beq.n	8004b8e <HAL_UART_IRQHandler+0x3ba>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a71      	ldr	r2, [pc, #452]	; (8004d38 <HAL_UART_IRQHandler+0x564>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d00b      	beq.n	8004b8e <HAL_UART_IRQHandler+0x3ba>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a6f      	ldr	r2, [pc, #444]	; (8004d3c <HAL_UART_IRQHandler+0x568>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d005      	beq.n	8004b8e <HAL_UART_IRQHandler+0x3ba>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a6d      	ldr	r2, [pc, #436]	; (8004d40 <HAL_UART_IRQHandler+0x56c>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d105      	bne.n	8004b9a <HAL_UART_IRQHandler+0x3c6>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	b29b      	uxth	r3, r3
 8004b98:	e004      	b.n	8004ba4 <HAL_UART_IRQHandler+0x3d0>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	b29b      	uxth	r3, r3
 8004ba4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004ba8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	f000 81a4 	beq.w	8004efa <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004bb8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	f080 819c 	bcs.w	8004efa <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004bc8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004bd0:	69db      	ldr	r3, [r3, #28]
 8004bd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bd6:	f000 8086 	beq.w	8004ce6 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004be2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004be6:	e853 3f00 	ldrex	r3, [r3]
 8004bea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004bee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004bf2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004bf6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	461a      	mov	r2, r3
 8004c00:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004c04:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004c08:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c0c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004c10:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004c14:	e841 2300 	strex	r3, r2, [r1]
 8004c18:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004c1c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d1da      	bne.n	8004bda <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	3308      	adds	r3, #8
 8004c2a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c2e:	e853 3f00 	ldrex	r3, [r3]
 8004c32:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004c34:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004c36:	f023 0301 	bic.w	r3, r3, #1
 8004c3a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	3308      	adds	r3, #8
 8004c44:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004c48:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004c4c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c4e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004c50:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004c54:	e841 2300 	strex	r3, r2, [r1]
 8004c58:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004c5a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d1e1      	bne.n	8004c24 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	3308      	adds	r3, #8
 8004c66:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c68:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c6a:	e853 3f00 	ldrex	r3, [r3]
 8004c6e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004c70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c76:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	3308      	adds	r3, #8
 8004c80:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004c84:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004c86:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c88:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004c8a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004c8c:	e841 2300 	strex	r3, r2, [r1]
 8004c90:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004c92:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d1e3      	bne.n	8004c60 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2220      	movs	r2, #32
 8004c9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cae:	e853 3f00 	ldrex	r3, [r3]
 8004cb2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004cb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004cb6:	f023 0310 	bic.w	r3, r3, #16
 8004cba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	461a      	mov	r2, r3
 8004cc4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004cc8:	65bb      	str	r3, [r7, #88]	; 0x58
 8004cca:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ccc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004cce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004cd0:	e841 2300 	strex	r3, r2, [r1]
 8004cd4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004cd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d1e4      	bne.n	8004ca6 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	f7fc f9f5 	bl	80010d0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004cf2:	b29b      	uxth	r3, r3
 8004cf4:	1ad3      	subs	r3, r2, r3
 8004cf6:	b29b      	uxth	r3, r3
 8004cf8:	4619      	mov	r1, r3
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f000 f91c 	bl	8004f38 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004d00:	e0fb      	b.n	8004efa <HAL_UART_IRQHandler+0x726>
 8004d02:	bf00      	nop
 8004d04:	40020010 	.word	0x40020010
 8004d08:	40020028 	.word	0x40020028
 8004d0c:	40020040 	.word	0x40020040
 8004d10:	40020058 	.word	0x40020058
 8004d14:	40020070 	.word	0x40020070
 8004d18:	40020088 	.word	0x40020088
 8004d1c:	400200a0 	.word	0x400200a0
 8004d20:	400200b8 	.word	0x400200b8
 8004d24:	40020410 	.word	0x40020410
 8004d28:	40020428 	.word	0x40020428
 8004d2c:	40020440 	.word	0x40020440
 8004d30:	40020458 	.word	0x40020458
 8004d34:	40020470 	.word	0x40020470
 8004d38:	40020488 	.word	0x40020488
 8004d3c:	400204a0 	.word	0x400204a0
 8004d40:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004d50:	b29b      	uxth	r3, r3
 8004d52:	1ad3      	subs	r3, r2, r3
 8004d54:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004d5e:	b29b      	uxth	r3, r3
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	f000 80cc 	beq.w	8004efe <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 8004d66:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	f000 80c7 	beq.w	8004efe <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d78:	e853 3f00 	ldrex	r3, [r3]
 8004d7c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004d7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d80:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004d84:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	461a      	mov	r2, r3
 8004d8e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004d92:	647b      	str	r3, [r7, #68]	; 0x44
 8004d94:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d96:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004d98:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d9a:	e841 2300 	strex	r3, r2, [r1]
 8004d9e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004da0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d1e4      	bne.n	8004d70 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	3308      	adds	r3, #8
 8004dac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db0:	e853 3f00 	ldrex	r3, [r3]
 8004db4:	623b      	str	r3, [r7, #32]
   return(result);
 8004db6:	6a3a      	ldr	r2, [r7, #32]
 8004db8:	4b54      	ldr	r3, [pc, #336]	; (8004f0c <HAL_UART_IRQHandler+0x738>)
 8004dba:	4013      	ands	r3, r2
 8004dbc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	3308      	adds	r3, #8
 8004dc6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004dca:	633a      	str	r2, [r7, #48]	; 0x30
 8004dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004dd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004dd2:	e841 2300 	strex	r3, r2, [r1]
 8004dd6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d1e3      	bne.n	8004da6 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2220      	movs	r2, #32
 8004de2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2200      	movs	r2, #0
 8004dea:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2200      	movs	r2, #0
 8004df0:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	e853 3f00 	ldrex	r3, [r3]
 8004dfe:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	f023 0310 	bic.w	r3, r3, #16
 8004e06:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	461a      	mov	r2, r3
 8004e10:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004e14:	61fb      	str	r3, [r7, #28]
 8004e16:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e18:	69b9      	ldr	r1, [r7, #24]
 8004e1a:	69fa      	ldr	r2, [r7, #28]
 8004e1c:	e841 2300 	strex	r3, r2, [r1]
 8004e20:	617b      	str	r3, [r7, #20]
   return(result);
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d1e4      	bne.n	8004df2 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004e28:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004e2c:	4619      	mov	r1, r3
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	f000 f882 	bl	8004f38 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004e34:	e063      	b.n	8004efe <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004e36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d00e      	beq.n	8004e60 <HAL_UART_IRQHandler+0x68c>
 8004e42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d008      	beq.n	8004e60 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004e56:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004e58:	6878      	ldr	r0, [r7, #4]
 8004e5a:	f001 fec9 	bl	8006bf0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004e5e:	e051      	b.n	8004f04 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004e60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d014      	beq.n	8004e96 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004e6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d105      	bne.n	8004e84 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004e78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e7c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d008      	beq.n	8004e96 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d03a      	beq.n	8004f02 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e90:	6878      	ldr	r0, [r7, #4]
 8004e92:	4798      	blx	r3
    }
    return;
 8004e94:	e035      	b.n	8004f02 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004e96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d009      	beq.n	8004eb6 <HAL_UART_IRQHandler+0x6e2>
 8004ea2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ea6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d003      	beq.n	8004eb6 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f001 fa16 	bl	80062e0 <UART_EndTransmit_IT>
    return;
 8004eb4:	e026      	b.n	8004f04 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004eb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004eba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d009      	beq.n	8004ed6 <HAL_UART_IRQHandler+0x702>
 8004ec2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ec6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d003      	beq.n	8004ed6 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004ece:	6878      	ldr	r0, [r7, #4]
 8004ed0:	f001 fea2 	bl	8006c18 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004ed4:	e016      	b.n	8004f04 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004ed6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004eda:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d010      	beq.n	8004f04 <HAL_UART_IRQHandler+0x730>
 8004ee2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	da0c      	bge.n	8004f04 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	f001 fe8a 	bl	8006c04 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004ef0:	e008      	b.n	8004f04 <HAL_UART_IRQHandler+0x730>
      return;
 8004ef2:	bf00      	nop
 8004ef4:	e006      	b.n	8004f04 <HAL_UART_IRQHandler+0x730>
    return;
 8004ef6:	bf00      	nop
 8004ef8:	e004      	b.n	8004f04 <HAL_UART_IRQHandler+0x730>
      return;
 8004efa:	bf00      	nop
 8004efc:	e002      	b.n	8004f04 <HAL_UART_IRQHandler+0x730>
      return;
 8004efe:	bf00      	nop
 8004f00:	e000      	b.n	8004f04 <HAL_UART_IRQHandler+0x730>
    return;
 8004f02:	bf00      	nop
  }
}
 8004f04:	37e8      	adds	r7, #232	; 0xe8
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}
 8004f0a:	bf00      	nop
 8004f0c:	effffffe 	.word	0xeffffffe

08004f10 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004f10:	b480      	push	{r7}
 8004f12:	b083      	sub	sp, #12
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004f18:	bf00      	nop
 8004f1a:	370c      	adds	r7, #12
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f22:	4770      	bx	lr

08004f24 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b083      	sub	sp, #12
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004f2c:	bf00      	nop
 8004f2e:	370c      	adds	r7, #12
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr

08004f38 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b083      	sub	sp, #12
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
 8004f40:	460b      	mov	r3, r1
 8004f42:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004f44:	bf00      	nop
 8004f46:	370c      	adds	r7, #12
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4e:	4770      	bx	lr

08004f50 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f54:	b092      	sub	sp, #72	; 0x48
 8004f56:	af00      	add	r7, sp, #0
 8004f58:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	689a      	ldr	r2, [r3, #8]
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	691b      	ldr	r3, [r3, #16]
 8004f68:	431a      	orrs	r2, r3
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	695b      	ldr	r3, [r3, #20]
 8004f6e:	431a      	orrs	r2, r3
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	69db      	ldr	r3, [r3, #28]
 8004f74:	4313      	orrs	r3, r2
 8004f76:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	681a      	ldr	r2, [r3, #0]
 8004f7e:	4bbe      	ldr	r3, [pc, #760]	; (8005278 <UART_SetConfig+0x328>)
 8004f80:	4013      	ands	r3, r2
 8004f82:	697a      	ldr	r2, [r7, #20]
 8004f84:	6812      	ldr	r2, [r2, #0]
 8004f86:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004f88:	430b      	orrs	r3, r1
 8004f8a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	68da      	ldr	r2, [r3, #12]
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	430a      	orrs	r2, r1
 8004fa0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	699b      	ldr	r3, [r3, #24]
 8004fa6:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4ab3      	ldr	r2, [pc, #716]	; (800527c <UART_SetConfig+0x32c>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d004      	beq.n	8004fbc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	6a1b      	ldr	r3, [r3, #32]
 8004fb6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	689a      	ldr	r2, [r3, #8]
 8004fc2:	4baf      	ldr	r3, [pc, #700]	; (8005280 <UART_SetConfig+0x330>)
 8004fc4:	4013      	ands	r3, r2
 8004fc6:	697a      	ldr	r2, [r7, #20]
 8004fc8:	6812      	ldr	r2, [r2, #0]
 8004fca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004fcc:	430b      	orrs	r3, r1
 8004fce:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fd6:	f023 010f 	bic.w	r1, r3, #15
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	430a      	orrs	r2, r1
 8004fe4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4aa6      	ldr	r2, [pc, #664]	; (8005284 <UART_SetConfig+0x334>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d177      	bne.n	80050e0 <UART_SetConfig+0x190>
 8004ff0:	4ba5      	ldr	r3, [pc, #660]	; (8005288 <UART_SetConfig+0x338>)
 8004ff2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ff4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004ff8:	2b28      	cmp	r3, #40	; 0x28
 8004ffa:	d86d      	bhi.n	80050d8 <UART_SetConfig+0x188>
 8004ffc:	a201      	add	r2, pc, #4	; (adr r2, 8005004 <UART_SetConfig+0xb4>)
 8004ffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005002:	bf00      	nop
 8005004:	080050a9 	.word	0x080050a9
 8005008:	080050d9 	.word	0x080050d9
 800500c:	080050d9 	.word	0x080050d9
 8005010:	080050d9 	.word	0x080050d9
 8005014:	080050d9 	.word	0x080050d9
 8005018:	080050d9 	.word	0x080050d9
 800501c:	080050d9 	.word	0x080050d9
 8005020:	080050d9 	.word	0x080050d9
 8005024:	080050b1 	.word	0x080050b1
 8005028:	080050d9 	.word	0x080050d9
 800502c:	080050d9 	.word	0x080050d9
 8005030:	080050d9 	.word	0x080050d9
 8005034:	080050d9 	.word	0x080050d9
 8005038:	080050d9 	.word	0x080050d9
 800503c:	080050d9 	.word	0x080050d9
 8005040:	080050d9 	.word	0x080050d9
 8005044:	080050b9 	.word	0x080050b9
 8005048:	080050d9 	.word	0x080050d9
 800504c:	080050d9 	.word	0x080050d9
 8005050:	080050d9 	.word	0x080050d9
 8005054:	080050d9 	.word	0x080050d9
 8005058:	080050d9 	.word	0x080050d9
 800505c:	080050d9 	.word	0x080050d9
 8005060:	080050d9 	.word	0x080050d9
 8005064:	080050c1 	.word	0x080050c1
 8005068:	080050d9 	.word	0x080050d9
 800506c:	080050d9 	.word	0x080050d9
 8005070:	080050d9 	.word	0x080050d9
 8005074:	080050d9 	.word	0x080050d9
 8005078:	080050d9 	.word	0x080050d9
 800507c:	080050d9 	.word	0x080050d9
 8005080:	080050d9 	.word	0x080050d9
 8005084:	080050c9 	.word	0x080050c9
 8005088:	080050d9 	.word	0x080050d9
 800508c:	080050d9 	.word	0x080050d9
 8005090:	080050d9 	.word	0x080050d9
 8005094:	080050d9 	.word	0x080050d9
 8005098:	080050d9 	.word	0x080050d9
 800509c:	080050d9 	.word	0x080050d9
 80050a0:	080050d9 	.word	0x080050d9
 80050a4:	080050d1 	.word	0x080050d1
 80050a8:	2301      	movs	r3, #1
 80050aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050ae:	e326      	b.n	80056fe <UART_SetConfig+0x7ae>
 80050b0:	2304      	movs	r3, #4
 80050b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050b6:	e322      	b.n	80056fe <UART_SetConfig+0x7ae>
 80050b8:	2308      	movs	r3, #8
 80050ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050be:	e31e      	b.n	80056fe <UART_SetConfig+0x7ae>
 80050c0:	2310      	movs	r3, #16
 80050c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050c6:	e31a      	b.n	80056fe <UART_SetConfig+0x7ae>
 80050c8:	2320      	movs	r3, #32
 80050ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050ce:	e316      	b.n	80056fe <UART_SetConfig+0x7ae>
 80050d0:	2340      	movs	r3, #64	; 0x40
 80050d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050d6:	e312      	b.n	80056fe <UART_SetConfig+0x7ae>
 80050d8:	2380      	movs	r3, #128	; 0x80
 80050da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050de:	e30e      	b.n	80056fe <UART_SetConfig+0x7ae>
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a69      	ldr	r2, [pc, #420]	; (800528c <UART_SetConfig+0x33c>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d130      	bne.n	800514c <UART_SetConfig+0x1fc>
 80050ea:	4b67      	ldr	r3, [pc, #412]	; (8005288 <UART_SetConfig+0x338>)
 80050ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050ee:	f003 0307 	and.w	r3, r3, #7
 80050f2:	2b05      	cmp	r3, #5
 80050f4:	d826      	bhi.n	8005144 <UART_SetConfig+0x1f4>
 80050f6:	a201      	add	r2, pc, #4	; (adr r2, 80050fc <UART_SetConfig+0x1ac>)
 80050f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050fc:	08005115 	.word	0x08005115
 8005100:	0800511d 	.word	0x0800511d
 8005104:	08005125 	.word	0x08005125
 8005108:	0800512d 	.word	0x0800512d
 800510c:	08005135 	.word	0x08005135
 8005110:	0800513d 	.word	0x0800513d
 8005114:	2300      	movs	r3, #0
 8005116:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800511a:	e2f0      	b.n	80056fe <UART_SetConfig+0x7ae>
 800511c:	2304      	movs	r3, #4
 800511e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005122:	e2ec      	b.n	80056fe <UART_SetConfig+0x7ae>
 8005124:	2308      	movs	r3, #8
 8005126:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800512a:	e2e8      	b.n	80056fe <UART_SetConfig+0x7ae>
 800512c:	2310      	movs	r3, #16
 800512e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005132:	e2e4      	b.n	80056fe <UART_SetConfig+0x7ae>
 8005134:	2320      	movs	r3, #32
 8005136:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800513a:	e2e0      	b.n	80056fe <UART_SetConfig+0x7ae>
 800513c:	2340      	movs	r3, #64	; 0x40
 800513e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005142:	e2dc      	b.n	80056fe <UART_SetConfig+0x7ae>
 8005144:	2380      	movs	r3, #128	; 0x80
 8005146:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800514a:	e2d8      	b.n	80056fe <UART_SetConfig+0x7ae>
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a4f      	ldr	r2, [pc, #316]	; (8005290 <UART_SetConfig+0x340>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d130      	bne.n	80051b8 <UART_SetConfig+0x268>
 8005156:	4b4c      	ldr	r3, [pc, #304]	; (8005288 <UART_SetConfig+0x338>)
 8005158:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800515a:	f003 0307 	and.w	r3, r3, #7
 800515e:	2b05      	cmp	r3, #5
 8005160:	d826      	bhi.n	80051b0 <UART_SetConfig+0x260>
 8005162:	a201      	add	r2, pc, #4	; (adr r2, 8005168 <UART_SetConfig+0x218>)
 8005164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005168:	08005181 	.word	0x08005181
 800516c:	08005189 	.word	0x08005189
 8005170:	08005191 	.word	0x08005191
 8005174:	08005199 	.word	0x08005199
 8005178:	080051a1 	.word	0x080051a1
 800517c:	080051a9 	.word	0x080051a9
 8005180:	2300      	movs	r3, #0
 8005182:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005186:	e2ba      	b.n	80056fe <UART_SetConfig+0x7ae>
 8005188:	2304      	movs	r3, #4
 800518a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800518e:	e2b6      	b.n	80056fe <UART_SetConfig+0x7ae>
 8005190:	2308      	movs	r3, #8
 8005192:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005196:	e2b2      	b.n	80056fe <UART_SetConfig+0x7ae>
 8005198:	2310      	movs	r3, #16
 800519a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800519e:	e2ae      	b.n	80056fe <UART_SetConfig+0x7ae>
 80051a0:	2320      	movs	r3, #32
 80051a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051a6:	e2aa      	b.n	80056fe <UART_SetConfig+0x7ae>
 80051a8:	2340      	movs	r3, #64	; 0x40
 80051aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051ae:	e2a6      	b.n	80056fe <UART_SetConfig+0x7ae>
 80051b0:	2380      	movs	r3, #128	; 0x80
 80051b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051b6:	e2a2      	b.n	80056fe <UART_SetConfig+0x7ae>
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a35      	ldr	r2, [pc, #212]	; (8005294 <UART_SetConfig+0x344>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d130      	bne.n	8005224 <UART_SetConfig+0x2d4>
 80051c2:	4b31      	ldr	r3, [pc, #196]	; (8005288 <UART_SetConfig+0x338>)
 80051c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051c6:	f003 0307 	and.w	r3, r3, #7
 80051ca:	2b05      	cmp	r3, #5
 80051cc:	d826      	bhi.n	800521c <UART_SetConfig+0x2cc>
 80051ce:	a201      	add	r2, pc, #4	; (adr r2, 80051d4 <UART_SetConfig+0x284>)
 80051d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051d4:	080051ed 	.word	0x080051ed
 80051d8:	080051f5 	.word	0x080051f5
 80051dc:	080051fd 	.word	0x080051fd
 80051e0:	08005205 	.word	0x08005205
 80051e4:	0800520d 	.word	0x0800520d
 80051e8:	08005215 	.word	0x08005215
 80051ec:	2300      	movs	r3, #0
 80051ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051f2:	e284      	b.n	80056fe <UART_SetConfig+0x7ae>
 80051f4:	2304      	movs	r3, #4
 80051f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051fa:	e280      	b.n	80056fe <UART_SetConfig+0x7ae>
 80051fc:	2308      	movs	r3, #8
 80051fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005202:	e27c      	b.n	80056fe <UART_SetConfig+0x7ae>
 8005204:	2310      	movs	r3, #16
 8005206:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800520a:	e278      	b.n	80056fe <UART_SetConfig+0x7ae>
 800520c:	2320      	movs	r3, #32
 800520e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005212:	e274      	b.n	80056fe <UART_SetConfig+0x7ae>
 8005214:	2340      	movs	r3, #64	; 0x40
 8005216:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800521a:	e270      	b.n	80056fe <UART_SetConfig+0x7ae>
 800521c:	2380      	movs	r3, #128	; 0x80
 800521e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005222:	e26c      	b.n	80056fe <UART_SetConfig+0x7ae>
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a1b      	ldr	r2, [pc, #108]	; (8005298 <UART_SetConfig+0x348>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d142      	bne.n	80052b4 <UART_SetConfig+0x364>
 800522e:	4b16      	ldr	r3, [pc, #88]	; (8005288 <UART_SetConfig+0x338>)
 8005230:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005232:	f003 0307 	and.w	r3, r3, #7
 8005236:	2b05      	cmp	r3, #5
 8005238:	d838      	bhi.n	80052ac <UART_SetConfig+0x35c>
 800523a:	a201      	add	r2, pc, #4	; (adr r2, 8005240 <UART_SetConfig+0x2f0>)
 800523c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005240:	08005259 	.word	0x08005259
 8005244:	08005261 	.word	0x08005261
 8005248:	08005269 	.word	0x08005269
 800524c:	08005271 	.word	0x08005271
 8005250:	0800529d 	.word	0x0800529d
 8005254:	080052a5 	.word	0x080052a5
 8005258:	2300      	movs	r3, #0
 800525a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800525e:	e24e      	b.n	80056fe <UART_SetConfig+0x7ae>
 8005260:	2304      	movs	r3, #4
 8005262:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005266:	e24a      	b.n	80056fe <UART_SetConfig+0x7ae>
 8005268:	2308      	movs	r3, #8
 800526a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800526e:	e246      	b.n	80056fe <UART_SetConfig+0x7ae>
 8005270:	2310      	movs	r3, #16
 8005272:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005276:	e242      	b.n	80056fe <UART_SetConfig+0x7ae>
 8005278:	cfff69f3 	.word	0xcfff69f3
 800527c:	58000c00 	.word	0x58000c00
 8005280:	11fff4ff 	.word	0x11fff4ff
 8005284:	40011000 	.word	0x40011000
 8005288:	58024400 	.word	0x58024400
 800528c:	40004400 	.word	0x40004400
 8005290:	40004800 	.word	0x40004800
 8005294:	40004c00 	.word	0x40004c00
 8005298:	40005000 	.word	0x40005000
 800529c:	2320      	movs	r3, #32
 800529e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052a2:	e22c      	b.n	80056fe <UART_SetConfig+0x7ae>
 80052a4:	2340      	movs	r3, #64	; 0x40
 80052a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052aa:	e228      	b.n	80056fe <UART_SetConfig+0x7ae>
 80052ac:	2380      	movs	r3, #128	; 0x80
 80052ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052b2:	e224      	b.n	80056fe <UART_SetConfig+0x7ae>
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4ab1      	ldr	r2, [pc, #708]	; (8005580 <UART_SetConfig+0x630>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d176      	bne.n	80053ac <UART_SetConfig+0x45c>
 80052be:	4bb1      	ldr	r3, [pc, #708]	; (8005584 <UART_SetConfig+0x634>)
 80052c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80052c6:	2b28      	cmp	r3, #40	; 0x28
 80052c8:	d86c      	bhi.n	80053a4 <UART_SetConfig+0x454>
 80052ca:	a201      	add	r2, pc, #4	; (adr r2, 80052d0 <UART_SetConfig+0x380>)
 80052cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052d0:	08005375 	.word	0x08005375
 80052d4:	080053a5 	.word	0x080053a5
 80052d8:	080053a5 	.word	0x080053a5
 80052dc:	080053a5 	.word	0x080053a5
 80052e0:	080053a5 	.word	0x080053a5
 80052e4:	080053a5 	.word	0x080053a5
 80052e8:	080053a5 	.word	0x080053a5
 80052ec:	080053a5 	.word	0x080053a5
 80052f0:	0800537d 	.word	0x0800537d
 80052f4:	080053a5 	.word	0x080053a5
 80052f8:	080053a5 	.word	0x080053a5
 80052fc:	080053a5 	.word	0x080053a5
 8005300:	080053a5 	.word	0x080053a5
 8005304:	080053a5 	.word	0x080053a5
 8005308:	080053a5 	.word	0x080053a5
 800530c:	080053a5 	.word	0x080053a5
 8005310:	08005385 	.word	0x08005385
 8005314:	080053a5 	.word	0x080053a5
 8005318:	080053a5 	.word	0x080053a5
 800531c:	080053a5 	.word	0x080053a5
 8005320:	080053a5 	.word	0x080053a5
 8005324:	080053a5 	.word	0x080053a5
 8005328:	080053a5 	.word	0x080053a5
 800532c:	080053a5 	.word	0x080053a5
 8005330:	0800538d 	.word	0x0800538d
 8005334:	080053a5 	.word	0x080053a5
 8005338:	080053a5 	.word	0x080053a5
 800533c:	080053a5 	.word	0x080053a5
 8005340:	080053a5 	.word	0x080053a5
 8005344:	080053a5 	.word	0x080053a5
 8005348:	080053a5 	.word	0x080053a5
 800534c:	080053a5 	.word	0x080053a5
 8005350:	08005395 	.word	0x08005395
 8005354:	080053a5 	.word	0x080053a5
 8005358:	080053a5 	.word	0x080053a5
 800535c:	080053a5 	.word	0x080053a5
 8005360:	080053a5 	.word	0x080053a5
 8005364:	080053a5 	.word	0x080053a5
 8005368:	080053a5 	.word	0x080053a5
 800536c:	080053a5 	.word	0x080053a5
 8005370:	0800539d 	.word	0x0800539d
 8005374:	2301      	movs	r3, #1
 8005376:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800537a:	e1c0      	b.n	80056fe <UART_SetConfig+0x7ae>
 800537c:	2304      	movs	r3, #4
 800537e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005382:	e1bc      	b.n	80056fe <UART_SetConfig+0x7ae>
 8005384:	2308      	movs	r3, #8
 8005386:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800538a:	e1b8      	b.n	80056fe <UART_SetConfig+0x7ae>
 800538c:	2310      	movs	r3, #16
 800538e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005392:	e1b4      	b.n	80056fe <UART_SetConfig+0x7ae>
 8005394:	2320      	movs	r3, #32
 8005396:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800539a:	e1b0      	b.n	80056fe <UART_SetConfig+0x7ae>
 800539c:	2340      	movs	r3, #64	; 0x40
 800539e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053a2:	e1ac      	b.n	80056fe <UART_SetConfig+0x7ae>
 80053a4:	2380      	movs	r3, #128	; 0x80
 80053a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053aa:	e1a8      	b.n	80056fe <UART_SetConfig+0x7ae>
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a75      	ldr	r2, [pc, #468]	; (8005588 <UART_SetConfig+0x638>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d130      	bne.n	8005418 <UART_SetConfig+0x4c8>
 80053b6:	4b73      	ldr	r3, [pc, #460]	; (8005584 <UART_SetConfig+0x634>)
 80053b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053ba:	f003 0307 	and.w	r3, r3, #7
 80053be:	2b05      	cmp	r3, #5
 80053c0:	d826      	bhi.n	8005410 <UART_SetConfig+0x4c0>
 80053c2:	a201      	add	r2, pc, #4	; (adr r2, 80053c8 <UART_SetConfig+0x478>)
 80053c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053c8:	080053e1 	.word	0x080053e1
 80053cc:	080053e9 	.word	0x080053e9
 80053d0:	080053f1 	.word	0x080053f1
 80053d4:	080053f9 	.word	0x080053f9
 80053d8:	08005401 	.word	0x08005401
 80053dc:	08005409 	.word	0x08005409
 80053e0:	2300      	movs	r3, #0
 80053e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053e6:	e18a      	b.n	80056fe <UART_SetConfig+0x7ae>
 80053e8:	2304      	movs	r3, #4
 80053ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053ee:	e186      	b.n	80056fe <UART_SetConfig+0x7ae>
 80053f0:	2308      	movs	r3, #8
 80053f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053f6:	e182      	b.n	80056fe <UART_SetConfig+0x7ae>
 80053f8:	2310      	movs	r3, #16
 80053fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053fe:	e17e      	b.n	80056fe <UART_SetConfig+0x7ae>
 8005400:	2320      	movs	r3, #32
 8005402:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005406:	e17a      	b.n	80056fe <UART_SetConfig+0x7ae>
 8005408:	2340      	movs	r3, #64	; 0x40
 800540a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800540e:	e176      	b.n	80056fe <UART_SetConfig+0x7ae>
 8005410:	2380      	movs	r3, #128	; 0x80
 8005412:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005416:	e172      	b.n	80056fe <UART_SetConfig+0x7ae>
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a5b      	ldr	r2, [pc, #364]	; (800558c <UART_SetConfig+0x63c>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d130      	bne.n	8005484 <UART_SetConfig+0x534>
 8005422:	4b58      	ldr	r3, [pc, #352]	; (8005584 <UART_SetConfig+0x634>)
 8005424:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005426:	f003 0307 	and.w	r3, r3, #7
 800542a:	2b05      	cmp	r3, #5
 800542c:	d826      	bhi.n	800547c <UART_SetConfig+0x52c>
 800542e:	a201      	add	r2, pc, #4	; (adr r2, 8005434 <UART_SetConfig+0x4e4>)
 8005430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005434:	0800544d 	.word	0x0800544d
 8005438:	08005455 	.word	0x08005455
 800543c:	0800545d 	.word	0x0800545d
 8005440:	08005465 	.word	0x08005465
 8005444:	0800546d 	.word	0x0800546d
 8005448:	08005475 	.word	0x08005475
 800544c:	2300      	movs	r3, #0
 800544e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005452:	e154      	b.n	80056fe <UART_SetConfig+0x7ae>
 8005454:	2304      	movs	r3, #4
 8005456:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800545a:	e150      	b.n	80056fe <UART_SetConfig+0x7ae>
 800545c:	2308      	movs	r3, #8
 800545e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005462:	e14c      	b.n	80056fe <UART_SetConfig+0x7ae>
 8005464:	2310      	movs	r3, #16
 8005466:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800546a:	e148      	b.n	80056fe <UART_SetConfig+0x7ae>
 800546c:	2320      	movs	r3, #32
 800546e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005472:	e144      	b.n	80056fe <UART_SetConfig+0x7ae>
 8005474:	2340      	movs	r3, #64	; 0x40
 8005476:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800547a:	e140      	b.n	80056fe <UART_SetConfig+0x7ae>
 800547c:	2380      	movs	r3, #128	; 0x80
 800547e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005482:	e13c      	b.n	80056fe <UART_SetConfig+0x7ae>
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a41      	ldr	r2, [pc, #260]	; (8005590 <UART_SetConfig+0x640>)
 800548a:	4293      	cmp	r3, r2
 800548c:	f040 8082 	bne.w	8005594 <UART_SetConfig+0x644>
 8005490:	4b3c      	ldr	r3, [pc, #240]	; (8005584 <UART_SetConfig+0x634>)
 8005492:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005494:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005498:	2b28      	cmp	r3, #40	; 0x28
 800549a:	d86d      	bhi.n	8005578 <UART_SetConfig+0x628>
 800549c:	a201      	add	r2, pc, #4	; (adr r2, 80054a4 <UART_SetConfig+0x554>)
 800549e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054a2:	bf00      	nop
 80054a4:	08005549 	.word	0x08005549
 80054a8:	08005579 	.word	0x08005579
 80054ac:	08005579 	.word	0x08005579
 80054b0:	08005579 	.word	0x08005579
 80054b4:	08005579 	.word	0x08005579
 80054b8:	08005579 	.word	0x08005579
 80054bc:	08005579 	.word	0x08005579
 80054c0:	08005579 	.word	0x08005579
 80054c4:	08005551 	.word	0x08005551
 80054c8:	08005579 	.word	0x08005579
 80054cc:	08005579 	.word	0x08005579
 80054d0:	08005579 	.word	0x08005579
 80054d4:	08005579 	.word	0x08005579
 80054d8:	08005579 	.word	0x08005579
 80054dc:	08005579 	.word	0x08005579
 80054e0:	08005579 	.word	0x08005579
 80054e4:	08005559 	.word	0x08005559
 80054e8:	08005579 	.word	0x08005579
 80054ec:	08005579 	.word	0x08005579
 80054f0:	08005579 	.word	0x08005579
 80054f4:	08005579 	.word	0x08005579
 80054f8:	08005579 	.word	0x08005579
 80054fc:	08005579 	.word	0x08005579
 8005500:	08005579 	.word	0x08005579
 8005504:	08005561 	.word	0x08005561
 8005508:	08005579 	.word	0x08005579
 800550c:	08005579 	.word	0x08005579
 8005510:	08005579 	.word	0x08005579
 8005514:	08005579 	.word	0x08005579
 8005518:	08005579 	.word	0x08005579
 800551c:	08005579 	.word	0x08005579
 8005520:	08005579 	.word	0x08005579
 8005524:	08005569 	.word	0x08005569
 8005528:	08005579 	.word	0x08005579
 800552c:	08005579 	.word	0x08005579
 8005530:	08005579 	.word	0x08005579
 8005534:	08005579 	.word	0x08005579
 8005538:	08005579 	.word	0x08005579
 800553c:	08005579 	.word	0x08005579
 8005540:	08005579 	.word	0x08005579
 8005544:	08005571 	.word	0x08005571
 8005548:	2301      	movs	r3, #1
 800554a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800554e:	e0d6      	b.n	80056fe <UART_SetConfig+0x7ae>
 8005550:	2304      	movs	r3, #4
 8005552:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005556:	e0d2      	b.n	80056fe <UART_SetConfig+0x7ae>
 8005558:	2308      	movs	r3, #8
 800555a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800555e:	e0ce      	b.n	80056fe <UART_SetConfig+0x7ae>
 8005560:	2310      	movs	r3, #16
 8005562:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005566:	e0ca      	b.n	80056fe <UART_SetConfig+0x7ae>
 8005568:	2320      	movs	r3, #32
 800556a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800556e:	e0c6      	b.n	80056fe <UART_SetConfig+0x7ae>
 8005570:	2340      	movs	r3, #64	; 0x40
 8005572:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005576:	e0c2      	b.n	80056fe <UART_SetConfig+0x7ae>
 8005578:	2380      	movs	r3, #128	; 0x80
 800557a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800557e:	e0be      	b.n	80056fe <UART_SetConfig+0x7ae>
 8005580:	40011400 	.word	0x40011400
 8005584:	58024400 	.word	0x58024400
 8005588:	40007800 	.word	0x40007800
 800558c:	40007c00 	.word	0x40007c00
 8005590:	40011800 	.word	0x40011800
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4aad      	ldr	r2, [pc, #692]	; (8005850 <UART_SetConfig+0x900>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d176      	bne.n	800568c <UART_SetConfig+0x73c>
 800559e:	4bad      	ldr	r3, [pc, #692]	; (8005854 <UART_SetConfig+0x904>)
 80055a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80055a6:	2b28      	cmp	r3, #40	; 0x28
 80055a8:	d86c      	bhi.n	8005684 <UART_SetConfig+0x734>
 80055aa:	a201      	add	r2, pc, #4	; (adr r2, 80055b0 <UART_SetConfig+0x660>)
 80055ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055b0:	08005655 	.word	0x08005655
 80055b4:	08005685 	.word	0x08005685
 80055b8:	08005685 	.word	0x08005685
 80055bc:	08005685 	.word	0x08005685
 80055c0:	08005685 	.word	0x08005685
 80055c4:	08005685 	.word	0x08005685
 80055c8:	08005685 	.word	0x08005685
 80055cc:	08005685 	.word	0x08005685
 80055d0:	0800565d 	.word	0x0800565d
 80055d4:	08005685 	.word	0x08005685
 80055d8:	08005685 	.word	0x08005685
 80055dc:	08005685 	.word	0x08005685
 80055e0:	08005685 	.word	0x08005685
 80055e4:	08005685 	.word	0x08005685
 80055e8:	08005685 	.word	0x08005685
 80055ec:	08005685 	.word	0x08005685
 80055f0:	08005665 	.word	0x08005665
 80055f4:	08005685 	.word	0x08005685
 80055f8:	08005685 	.word	0x08005685
 80055fc:	08005685 	.word	0x08005685
 8005600:	08005685 	.word	0x08005685
 8005604:	08005685 	.word	0x08005685
 8005608:	08005685 	.word	0x08005685
 800560c:	08005685 	.word	0x08005685
 8005610:	0800566d 	.word	0x0800566d
 8005614:	08005685 	.word	0x08005685
 8005618:	08005685 	.word	0x08005685
 800561c:	08005685 	.word	0x08005685
 8005620:	08005685 	.word	0x08005685
 8005624:	08005685 	.word	0x08005685
 8005628:	08005685 	.word	0x08005685
 800562c:	08005685 	.word	0x08005685
 8005630:	08005675 	.word	0x08005675
 8005634:	08005685 	.word	0x08005685
 8005638:	08005685 	.word	0x08005685
 800563c:	08005685 	.word	0x08005685
 8005640:	08005685 	.word	0x08005685
 8005644:	08005685 	.word	0x08005685
 8005648:	08005685 	.word	0x08005685
 800564c:	08005685 	.word	0x08005685
 8005650:	0800567d 	.word	0x0800567d
 8005654:	2301      	movs	r3, #1
 8005656:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800565a:	e050      	b.n	80056fe <UART_SetConfig+0x7ae>
 800565c:	2304      	movs	r3, #4
 800565e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005662:	e04c      	b.n	80056fe <UART_SetConfig+0x7ae>
 8005664:	2308      	movs	r3, #8
 8005666:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800566a:	e048      	b.n	80056fe <UART_SetConfig+0x7ae>
 800566c:	2310      	movs	r3, #16
 800566e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005672:	e044      	b.n	80056fe <UART_SetConfig+0x7ae>
 8005674:	2320      	movs	r3, #32
 8005676:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800567a:	e040      	b.n	80056fe <UART_SetConfig+0x7ae>
 800567c:	2340      	movs	r3, #64	; 0x40
 800567e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005682:	e03c      	b.n	80056fe <UART_SetConfig+0x7ae>
 8005684:	2380      	movs	r3, #128	; 0x80
 8005686:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800568a:	e038      	b.n	80056fe <UART_SetConfig+0x7ae>
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a71      	ldr	r2, [pc, #452]	; (8005858 <UART_SetConfig+0x908>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d130      	bne.n	80056f8 <UART_SetConfig+0x7a8>
 8005696:	4b6f      	ldr	r3, [pc, #444]	; (8005854 <UART_SetConfig+0x904>)
 8005698:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800569a:	f003 0307 	and.w	r3, r3, #7
 800569e:	2b05      	cmp	r3, #5
 80056a0:	d826      	bhi.n	80056f0 <UART_SetConfig+0x7a0>
 80056a2:	a201      	add	r2, pc, #4	; (adr r2, 80056a8 <UART_SetConfig+0x758>)
 80056a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056a8:	080056c1 	.word	0x080056c1
 80056ac:	080056c9 	.word	0x080056c9
 80056b0:	080056d1 	.word	0x080056d1
 80056b4:	080056d9 	.word	0x080056d9
 80056b8:	080056e1 	.word	0x080056e1
 80056bc:	080056e9 	.word	0x080056e9
 80056c0:	2302      	movs	r3, #2
 80056c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056c6:	e01a      	b.n	80056fe <UART_SetConfig+0x7ae>
 80056c8:	2304      	movs	r3, #4
 80056ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056ce:	e016      	b.n	80056fe <UART_SetConfig+0x7ae>
 80056d0:	2308      	movs	r3, #8
 80056d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056d6:	e012      	b.n	80056fe <UART_SetConfig+0x7ae>
 80056d8:	2310      	movs	r3, #16
 80056da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056de:	e00e      	b.n	80056fe <UART_SetConfig+0x7ae>
 80056e0:	2320      	movs	r3, #32
 80056e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056e6:	e00a      	b.n	80056fe <UART_SetConfig+0x7ae>
 80056e8:	2340      	movs	r3, #64	; 0x40
 80056ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056ee:	e006      	b.n	80056fe <UART_SetConfig+0x7ae>
 80056f0:	2380      	movs	r3, #128	; 0x80
 80056f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056f6:	e002      	b.n	80056fe <UART_SetConfig+0x7ae>
 80056f8:	2380      	movs	r3, #128	; 0x80
 80056fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a55      	ldr	r2, [pc, #340]	; (8005858 <UART_SetConfig+0x908>)
 8005704:	4293      	cmp	r3, r2
 8005706:	f040 80f8 	bne.w	80058fa <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800570a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800570e:	2b20      	cmp	r3, #32
 8005710:	dc46      	bgt.n	80057a0 <UART_SetConfig+0x850>
 8005712:	2b02      	cmp	r3, #2
 8005714:	db75      	blt.n	8005802 <UART_SetConfig+0x8b2>
 8005716:	3b02      	subs	r3, #2
 8005718:	2b1e      	cmp	r3, #30
 800571a:	d872      	bhi.n	8005802 <UART_SetConfig+0x8b2>
 800571c:	a201      	add	r2, pc, #4	; (adr r2, 8005724 <UART_SetConfig+0x7d4>)
 800571e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005722:	bf00      	nop
 8005724:	080057a7 	.word	0x080057a7
 8005728:	08005803 	.word	0x08005803
 800572c:	080057af 	.word	0x080057af
 8005730:	08005803 	.word	0x08005803
 8005734:	08005803 	.word	0x08005803
 8005738:	08005803 	.word	0x08005803
 800573c:	080057bf 	.word	0x080057bf
 8005740:	08005803 	.word	0x08005803
 8005744:	08005803 	.word	0x08005803
 8005748:	08005803 	.word	0x08005803
 800574c:	08005803 	.word	0x08005803
 8005750:	08005803 	.word	0x08005803
 8005754:	08005803 	.word	0x08005803
 8005758:	08005803 	.word	0x08005803
 800575c:	080057cf 	.word	0x080057cf
 8005760:	08005803 	.word	0x08005803
 8005764:	08005803 	.word	0x08005803
 8005768:	08005803 	.word	0x08005803
 800576c:	08005803 	.word	0x08005803
 8005770:	08005803 	.word	0x08005803
 8005774:	08005803 	.word	0x08005803
 8005778:	08005803 	.word	0x08005803
 800577c:	08005803 	.word	0x08005803
 8005780:	08005803 	.word	0x08005803
 8005784:	08005803 	.word	0x08005803
 8005788:	08005803 	.word	0x08005803
 800578c:	08005803 	.word	0x08005803
 8005790:	08005803 	.word	0x08005803
 8005794:	08005803 	.word	0x08005803
 8005798:	08005803 	.word	0x08005803
 800579c:	080057f5 	.word	0x080057f5
 80057a0:	2b40      	cmp	r3, #64	; 0x40
 80057a2:	d02a      	beq.n	80057fa <UART_SetConfig+0x8aa>
 80057a4:	e02d      	b.n	8005802 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80057a6:	f7fe fab7 	bl	8003d18 <HAL_RCCEx_GetD3PCLK1Freq>
 80057aa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80057ac:	e02f      	b.n	800580e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80057ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80057b2:	4618      	mov	r0, r3
 80057b4:	f7fe fac6 	bl	8003d44 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80057b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80057bc:	e027      	b.n	800580e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80057be:	f107 0318 	add.w	r3, r7, #24
 80057c2:	4618      	mov	r0, r3
 80057c4:	f7fe fc12 	bl	8003fec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80057c8:	69fb      	ldr	r3, [r7, #28]
 80057ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80057cc:	e01f      	b.n	800580e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80057ce:	4b21      	ldr	r3, [pc, #132]	; (8005854 <UART_SetConfig+0x904>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f003 0320 	and.w	r3, r3, #32
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d009      	beq.n	80057ee <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80057da:	4b1e      	ldr	r3, [pc, #120]	; (8005854 <UART_SetConfig+0x904>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	08db      	lsrs	r3, r3, #3
 80057e0:	f003 0303 	and.w	r3, r3, #3
 80057e4:	4a1d      	ldr	r2, [pc, #116]	; (800585c <UART_SetConfig+0x90c>)
 80057e6:	fa22 f303 	lsr.w	r3, r2, r3
 80057ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80057ec:	e00f      	b.n	800580e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80057ee:	4b1b      	ldr	r3, [pc, #108]	; (800585c <UART_SetConfig+0x90c>)
 80057f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80057f2:	e00c      	b.n	800580e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80057f4:	4b1a      	ldr	r3, [pc, #104]	; (8005860 <UART_SetConfig+0x910>)
 80057f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80057f8:	e009      	b.n	800580e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80057fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005800:	e005      	b.n	800580e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8005802:	2300      	movs	r3, #0
 8005804:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005806:	2301      	movs	r3, #1
 8005808:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800580c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800580e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005810:	2b00      	cmp	r3, #0
 8005812:	f000 81ee 	beq.w	8005bf2 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800581a:	4a12      	ldr	r2, [pc, #72]	; (8005864 <UART_SetConfig+0x914>)
 800581c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005820:	461a      	mov	r2, r3
 8005822:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005824:	fbb3 f3f2 	udiv	r3, r3, r2
 8005828:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	685a      	ldr	r2, [r3, #4]
 800582e:	4613      	mov	r3, r2
 8005830:	005b      	lsls	r3, r3, #1
 8005832:	4413      	add	r3, r2
 8005834:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005836:	429a      	cmp	r2, r3
 8005838:	d305      	bcc.n	8005846 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005840:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005842:	429a      	cmp	r2, r3
 8005844:	d910      	bls.n	8005868 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8005846:	2301      	movs	r3, #1
 8005848:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800584c:	e1d1      	b.n	8005bf2 <UART_SetConfig+0xca2>
 800584e:	bf00      	nop
 8005850:	40011c00 	.word	0x40011c00
 8005854:	58024400 	.word	0x58024400
 8005858:	58000c00 	.word	0x58000c00
 800585c:	03d09000 	.word	0x03d09000
 8005860:	003d0900 	.word	0x003d0900
 8005864:	08006ecc 	.word	0x08006ecc
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005868:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800586a:	2200      	movs	r2, #0
 800586c:	60bb      	str	r3, [r7, #8]
 800586e:	60fa      	str	r2, [r7, #12]
 8005870:	697b      	ldr	r3, [r7, #20]
 8005872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005874:	4ac0      	ldr	r2, [pc, #768]	; (8005b78 <UART_SetConfig+0xc28>)
 8005876:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800587a:	b29b      	uxth	r3, r3
 800587c:	2200      	movs	r2, #0
 800587e:	603b      	str	r3, [r7, #0]
 8005880:	607a      	str	r2, [r7, #4]
 8005882:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005886:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800588a:	f7fa fd37 	bl	80002fc <__aeabi_uldivmod>
 800588e:	4602      	mov	r2, r0
 8005890:	460b      	mov	r3, r1
 8005892:	4610      	mov	r0, r2
 8005894:	4619      	mov	r1, r3
 8005896:	f04f 0200 	mov.w	r2, #0
 800589a:	f04f 0300 	mov.w	r3, #0
 800589e:	020b      	lsls	r3, r1, #8
 80058a0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80058a4:	0202      	lsls	r2, r0, #8
 80058a6:	6979      	ldr	r1, [r7, #20]
 80058a8:	6849      	ldr	r1, [r1, #4]
 80058aa:	0849      	lsrs	r1, r1, #1
 80058ac:	2000      	movs	r0, #0
 80058ae:	460c      	mov	r4, r1
 80058b0:	4605      	mov	r5, r0
 80058b2:	eb12 0804 	adds.w	r8, r2, r4
 80058b6:	eb43 0905 	adc.w	r9, r3, r5
 80058ba:	697b      	ldr	r3, [r7, #20]
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	2200      	movs	r2, #0
 80058c0:	469a      	mov	sl, r3
 80058c2:	4693      	mov	fp, r2
 80058c4:	4652      	mov	r2, sl
 80058c6:	465b      	mov	r3, fp
 80058c8:	4640      	mov	r0, r8
 80058ca:	4649      	mov	r1, r9
 80058cc:	f7fa fd16 	bl	80002fc <__aeabi_uldivmod>
 80058d0:	4602      	mov	r2, r0
 80058d2:	460b      	mov	r3, r1
 80058d4:	4613      	mov	r3, r2
 80058d6:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80058d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80058de:	d308      	bcc.n	80058f2 <UART_SetConfig+0x9a2>
 80058e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058e6:	d204      	bcs.n	80058f2 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80058ee:	60da      	str	r2, [r3, #12]
 80058f0:	e17f      	b.n	8005bf2 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 80058f2:	2301      	movs	r3, #1
 80058f4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80058f8:	e17b      	b.n	8005bf2 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	69db      	ldr	r3, [r3, #28]
 80058fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005902:	f040 80bd 	bne.w	8005a80 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8005906:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800590a:	2b20      	cmp	r3, #32
 800590c:	dc48      	bgt.n	80059a0 <UART_SetConfig+0xa50>
 800590e:	2b00      	cmp	r3, #0
 8005910:	db7b      	blt.n	8005a0a <UART_SetConfig+0xaba>
 8005912:	2b20      	cmp	r3, #32
 8005914:	d879      	bhi.n	8005a0a <UART_SetConfig+0xaba>
 8005916:	a201      	add	r2, pc, #4	; (adr r2, 800591c <UART_SetConfig+0x9cc>)
 8005918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800591c:	080059a7 	.word	0x080059a7
 8005920:	080059af 	.word	0x080059af
 8005924:	08005a0b 	.word	0x08005a0b
 8005928:	08005a0b 	.word	0x08005a0b
 800592c:	080059b7 	.word	0x080059b7
 8005930:	08005a0b 	.word	0x08005a0b
 8005934:	08005a0b 	.word	0x08005a0b
 8005938:	08005a0b 	.word	0x08005a0b
 800593c:	080059c7 	.word	0x080059c7
 8005940:	08005a0b 	.word	0x08005a0b
 8005944:	08005a0b 	.word	0x08005a0b
 8005948:	08005a0b 	.word	0x08005a0b
 800594c:	08005a0b 	.word	0x08005a0b
 8005950:	08005a0b 	.word	0x08005a0b
 8005954:	08005a0b 	.word	0x08005a0b
 8005958:	08005a0b 	.word	0x08005a0b
 800595c:	080059d7 	.word	0x080059d7
 8005960:	08005a0b 	.word	0x08005a0b
 8005964:	08005a0b 	.word	0x08005a0b
 8005968:	08005a0b 	.word	0x08005a0b
 800596c:	08005a0b 	.word	0x08005a0b
 8005970:	08005a0b 	.word	0x08005a0b
 8005974:	08005a0b 	.word	0x08005a0b
 8005978:	08005a0b 	.word	0x08005a0b
 800597c:	08005a0b 	.word	0x08005a0b
 8005980:	08005a0b 	.word	0x08005a0b
 8005984:	08005a0b 	.word	0x08005a0b
 8005988:	08005a0b 	.word	0x08005a0b
 800598c:	08005a0b 	.word	0x08005a0b
 8005990:	08005a0b 	.word	0x08005a0b
 8005994:	08005a0b 	.word	0x08005a0b
 8005998:	08005a0b 	.word	0x08005a0b
 800599c:	080059fd 	.word	0x080059fd
 80059a0:	2b40      	cmp	r3, #64	; 0x40
 80059a2:	d02e      	beq.n	8005a02 <UART_SetConfig+0xab2>
 80059a4:	e031      	b.n	8005a0a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059a6:	f7fd fa7f 	bl	8002ea8 <HAL_RCC_GetPCLK1Freq>
 80059aa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80059ac:	e033      	b.n	8005a16 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80059ae:	f7fd fa91 	bl	8002ed4 <HAL_RCC_GetPCLK2Freq>
 80059b2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80059b4:	e02f      	b.n	8005a16 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80059b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80059ba:	4618      	mov	r0, r3
 80059bc:	f7fe f9c2 	bl	8003d44 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80059c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80059c4:	e027      	b.n	8005a16 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80059c6:	f107 0318 	add.w	r3, r7, #24
 80059ca:	4618      	mov	r0, r3
 80059cc:	f7fe fb0e 	bl	8003fec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80059d0:	69fb      	ldr	r3, [r7, #28]
 80059d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80059d4:	e01f      	b.n	8005a16 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80059d6:	4b69      	ldr	r3, [pc, #420]	; (8005b7c <UART_SetConfig+0xc2c>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f003 0320 	and.w	r3, r3, #32
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d009      	beq.n	80059f6 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80059e2:	4b66      	ldr	r3, [pc, #408]	; (8005b7c <UART_SetConfig+0xc2c>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	08db      	lsrs	r3, r3, #3
 80059e8:	f003 0303 	and.w	r3, r3, #3
 80059ec:	4a64      	ldr	r2, [pc, #400]	; (8005b80 <UART_SetConfig+0xc30>)
 80059ee:	fa22 f303 	lsr.w	r3, r2, r3
 80059f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80059f4:	e00f      	b.n	8005a16 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 80059f6:	4b62      	ldr	r3, [pc, #392]	; (8005b80 <UART_SetConfig+0xc30>)
 80059f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80059fa:	e00c      	b.n	8005a16 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80059fc:	4b61      	ldr	r3, [pc, #388]	; (8005b84 <UART_SetConfig+0xc34>)
 80059fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a00:	e009      	b.n	8005a16 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a08:	e005      	b.n	8005a16 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005a0e:	2301      	movs	r3, #1
 8005a10:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005a14:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005a16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	f000 80ea 	beq.w	8005bf2 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a22:	4a55      	ldr	r2, [pc, #340]	; (8005b78 <UART_SetConfig+0xc28>)
 8005a24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a28:	461a      	mov	r2, r3
 8005a2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a2c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005a30:	005a      	lsls	r2, r3, #1
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	085b      	lsrs	r3, r3, #1
 8005a38:	441a      	add	r2, r3
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a42:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a46:	2b0f      	cmp	r3, #15
 8005a48:	d916      	bls.n	8005a78 <UART_SetConfig+0xb28>
 8005a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a50:	d212      	bcs.n	8005a78 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005a52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a54:	b29b      	uxth	r3, r3
 8005a56:	f023 030f 	bic.w	r3, r3, #15
 8005a5a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005a5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a5e:	085b      	lsrs	r3, r3, #1
 8005a60:	b29b      	uxth	r3, r3
 8005a62:	f003 0307 	and.w	r3, r3, #7
 8005a66:	b29a      	uxth	r2, r3
 8005a68:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005a74:	60da      	str	r2, [r3, #12]
 8005a76:	e0bc      	b.n	8005bf2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8005a78:	2301      	movs	r3, #1
 8005a7a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005a7e:	e0b8      	b.n	8005bf2 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005a80:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005a84:	2b20      	cmp	r3, #32
 8005a86:	dc4b      	bgt.n	8005b20 <UART_SetConfig+0xbd0>
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	f2c0 8087 	blt.w	8005b9c <UART_SetConfig+0xc4c>
 8005a8e:	2b20      	cmp	r3, #32
 8005a90:	f200 8084 	bhi.w	8005b9c <UART_SetConfig+0xc4c>
 8005a94:	a201      	add	r2, pc, #4	; (adr r2, 8005a9c <UART_SetConfig+0xb4c>)
 8005a96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a9a:	bf00      	nop
 8005a9c:	08005b27 	.word	0x08005b27
 8005aa0:	08005b2f 	.word	0x08005b2f
 8005aa4:	08005b9d 	.word	0x08005b9d
 8005aa8:	08005b9d 	.word	0x08005b9d
 8005aac:	08005b37 	.word	0x08005b37
 8005ab0:	08005b9d 	.word	0x08005b9d
 8005ab4:	08005b9d 	.word	0x08005b9d
 8005ab8:	08005b9d 	.word	0x08005b9d
 8005abc:	08005b47 	.word	0x08005b47
 8005ac0:	08005b9d 	.word	0x08005b9d
 8005ac4:	08005b9d 	.word	0x08005b9d
 8005ac8:	08005b9d 	.word	0x08005b9d
 8005acc:	08005b9d 	.word	0x08005b9d
 8005ad0:	08005b9d 	.word	0x08005b9d
 8005ad4:	08005b9d 	.word	0x08005b9d
 8005ad8:	08005b9d 	.word	0x08005b9d
 8005adc:	08005b57 	.word	0x08005b57
 8005ae0:	08005b9d 	.word	0x08005b9d
 8005ae4:	08005b9d 	.word	0x08005b9d
 8005ae8:	08005b9d 	.word	0x08005b9d
 8005aec:	08005b9d 	.word	0x08005b9d
 8005af0:	08005b9d 	.word	0x08005b9d
 8005af4:	08005b9d 	.word	0x08005b9d
 8005af8:	08005b9d 	.word	0x08005b9d
 8005afc:	08005b9d 	.word	0x08005b9d
 8005b00:	08005b9d 	.word	0x08005b9d
 8005b04:	08005b9d 	.word	0x08005b9d
 8005b08:	08005b9d 	.word	0x08005b9d
 8005b0c:	08005b9d 	.word	0x08005b9d
 8005b10:	08005b9d 	.word	0x08005b9d
 8005b14:	08005b9d 	.word	0x08005b9d
 8005b18:	08005b9d 	.word	0x08005b9d
 8005b1c:	08005b8f 	.word	0x08005b8f
 8005b20:	2b40      	cmp	r3, #64	; 0x40
 8005b22:	d037      	beq.n	8005b94 <UART_SetConfig+0xc44>
 8005b24:	e03a      	b.n	8005b9c <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b26:	f7fd f9bf 	bl	8002ea8 <HAL_RCC_GetPCLK1Freq>
 8005b2a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005b2c:	e03c      	b.n	8005ba8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b2e:	f7fd f9d1 	bl	8002ed4 <HAL_RCC_GetPCLK2Freq>
 8005b32:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005b34:	e038      	b.n	8005ba8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005b36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f7fe f902 	bl	8003d44 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005b44:	e030      	b.n	8005ba8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005b46:	f107 0318 	add.w	r3, r7, #24
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	f7fe fa4e 	bl	8003fec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005b50:	69fb      	ldr	r3, [r7, #28]
 8005b52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005b54:	e028      	b.n	8005ba8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005b56:	4b09      	ldr	r3, [pc, #36]	; (8005b7c <UART_SetConfig+0xc2c>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f003 0320 	and.w	r3, r3, #32
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d012      	beq.n	8005b88 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005b62:	4b06      	ldr	r3, [pc, #24]	; (8005b7c <UART_SetConfig+0xc2c>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	08db      	lsrs	r3, r3, #3
 8005b68:	f003 0303 	and.w	r3, r3, #3
 8005b6c:	4a04      	ldr	r2, [pc, #16]	; (8005b80 <UART_SetConfig+0xc30>)
 8005b6e:	fa22 f303 	lsr.w	r3, r2, r3
 8005b72:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005b74:	e018      	b.n	8005ba8 <UART_SetConfig+0xc58>
 8005b76:	bf00      	nop
 8005b78:	08006ecc 	.word	0x08006ecc
 8005b7c:	58024400 	.word	0x58024400
 8005b80:	03d09000 	.word	0x03d09000
 8005b84:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8005b88:	4b24      	ldr	r3, [pc, #144]	; (8005c1c <UART_SetConfig+0xccc>)
 8005b8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005b8c:	e00c      	b.n	8005ba8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005b8e:	4b24      	ldr	r3, [pc, #144]	; (8005c20 <UART_SetConfig+0xcd0>)
 8005b90:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005b92:	e009      	b.n	8005ba8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b94:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b98:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005b9a:	e005      	b.n	8005ba8 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005ba6:	bf00      	nop
    }

    if (pclk != 0U)
 8005ba8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d021      	beq.n	8005bf2 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb2:	4a1c      	ldr	r2, [pc, #112]	; (8005c24 <UART_SetConfig+0xcd4>)
 8005bb4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005bb8:	461a      	mov	r2, r3
 8005bba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bbc:	fbb3 f2f2 	udiv	r2, r3, r2
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	085b      	lsrs	r3, r3, #1
 8005bc6:	441a      	add	r2, r3
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bd0:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005bd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bd4:	2b0f      	cmp	r3, #15
 8005bd6:	d909      	bls.n	8005bec <UART_SetConfig+0xc9c>
 8005bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bde:	d205      	bcs.n	8005bec <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005be0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005be2:	b29a      	uxth	r2, r3
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	60da      	str	r2, [r3, #12]
 8005bea:	e002      	b.n	8005bf2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8005bec:	2301      	movs	r3, #1
 8005bee:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	2201      	movs	r2, #1
 8005bf6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	2201      	movs	r2, #1
 8005bfe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	2200      	movs	r2, #0
 8005c06:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005c0e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	3748      	adds	r7, #72	; 0x48
 8005c16:	46bd      	mov	sp, r7
 8005c18:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c1c:	03d09000 	.word	0x03d09000
 8005c20:	003d0900 	.word	0x003d0900
 8005c24:	08006ecc 	.word	0x08006ecc

08005c28 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b083      	sub	sp, #12
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c34:	f003 0301 	and.w	r3, r3, #1
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d00a      	beq.n	8005c52 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	430a      	orrs	r2, r1
 8005c50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c56:	f003 0302 	and.w	r3, r3, #2
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d00a      	beq.n	8005c74 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	430a      	orrs	r2, r1
 8005c72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c78:	f003 0304 	and.w	r3, r3, #4
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d00a      	beq.n	8005c96 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	430a      	orrs	r2, r1
 8005c94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c9a:	f003 0308 	and.w	r3, r3, #8
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d00a      	beq.n	8005cb8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	685b      	ldr	r3, [r3, #4]
 8005ca8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	430a      	orrs	r2, r1
 8005cb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cbc:	f003 0310 	and.w	r3, r3, #16
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d00a      	beq.n	8005cda <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	689b      	ldr	r3, [r3, #8]
 8005cca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	430a      	orrs	r2, r1
 8005cd8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cde:	f003 0320 	and.w	r3, r3, #32
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d00a      	beq.n	8005cfc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	689b      	ldr	r3, [r3, #8]
 8005cec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	430a      	orrs	r2, r1
 8005cfa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d01a      	beq.n	8005d3e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	430a      	orrs	r2, r1
 8005d1c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d26:	d10a      	bne.n	8005d3e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	685b      	ldr	r3, [r3, #4]
 8005d2e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	430a      	orrs	r2, r1
 8005d3c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d00a      	beq.n	8005d60 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	430a      	orrs	r2, r1
 8005d5e:	605a      	str	r2, [r3, #4]
  }
}
 8005d60:	bf00      	nop
 8005d62:	370c      	adds	r7, #12
 8005d64:	46bd      	mov	sp, r7
 8005d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6a:	4770      	bx	lr

08005d6c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b086      	sub	sp, #24
 8005d70:	af02      	add	r7, sp, #8
 8005d72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2200      	movs	r2, #0
 8005d78:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005d7c:	f7fb f868 	bl	8000e50 <HAL_GetTick>
 8005d80:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f003 0308 	and.w	r3, r3, #8
 8005d8c:	2b08      	cmp	r3, #8
 8005d8e:	d10e      	bne.n	8005dae <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d90:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005d94:	9300      	str	r3, [sp, #0]
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f000 f82f 	bl	8005e02 <UART_WaitOnFlagUntilTimeout>
 8005da4:	4603      	mov	r3, r0
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d001      	beq.n	8005dae <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005daa:	2303      	movs	r3, #3
 8005dac:	e025      	b.n	8005dfa <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f003 0304 	and.w	r3, r3, #4
 8005db8:	2b04      	cmp	r3, #4
 8005dba:	d10e      	bne.n	8005dda <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005dbc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005dc0:	9300      	str	r3, [sp, #0]
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	f000 f819 	bl	8005e02 <UART_WaitOnFlagUntilTimeout>
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d001      	beq.n	8005dda <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005dd6:	2303      	movs	r3, #3
 8005dd8:	e00f      	b.n	8005dfa <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2220      	movs	r2, #32
 8005dde:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2220      	movs	r2, #32
 8005de6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2200      	movs	r2, #0
 8005dee:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2200      	movs	r2, #0
 8005df4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005df8:	2300      	movs	r3, #0
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3710      	adds	r7, #16
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd80      	pop	{r7, pc}

08005e02 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005e02:	b580      	push	{r7, lr}
 8005e04:	b09c      	sub	sp, #112	; 0x70
 8005e06:	af00      	add	r7, sp, #0
 8005e08:	60f8      	str	r0, [r7, #12]
 8005e0a:	60b9      	str	r1, [r7, #8]
 8005e0c:	603b      	str	r3, [r7, #0]
 8005e0e:	4613      	mov	r3, r2
 8005e10:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e12:	e0a9      	b.n	8005f68 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e14:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e1a:	f000 80a5 	beq.w	8005f68 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e1e:	f7fb f817 	bl	8000e50 <HAL_GetTick>
 8005e22:	4602      	mov	r2, r0
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	1ad3      	subs	r3, r2, r3
 8005e28:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005e2a:	429a      	cmp	r2, r3
 8005e2c:	d302      	bcc.n	8005e34 <UART_WaitOnFlagUntilTimeout+0x32>
 8005e2e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d140      	bne.n	8005eb6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e3c:	e853 3f00 	ldrex	r3, [r3]
 8005e40:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005e42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e44:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005e48:	667b      	str	r3, [r7, #100]	; 0x64
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	461a      	mov	r2, r3
 8005e50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e52:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005e54:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e56:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005e58:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005e5a:	e841 2300 	strex	r3, r2, [r1]
 8005e5e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005e60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d1e6      	bne.n	8005e34 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	3308      	adds	r3, #8
 8005e6c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e70:	e853 3f00 	ldrex	r3, [r3]
 8005e74:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e78:	f023 0301 	bic.w	r3, r3, #1
 8005e7c:	663b      	str	r3, [r7, #96]	; 0x60
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	3308      	adds	r3, #8
 8005e84:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005e86:	64ba      	str	r2, [r7, #72]	; 0x48
 8005e88:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e8a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005e8c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005e8e:	e841 2300 	strex	r3, r2, [r1]
 8005e92:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005e94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d1e5      	bne.n	8005e66 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	2220      	movs	r2, #32
 8005e9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	2220      	movs	r2, #32
 8005ea6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	2200      	movs	r2, #0
 8005eae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005eb2:	2303      	movs	r3, #3
 8005eb4:	e069      	b.n	8005f8a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f003 0304 	and.w	r3, r3, #4
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d051      	beq.n	8005f68 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	69db      	ldr	r3, [r3, #28]
 8005eca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ece:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ed2:	d149      	bne.n	8005f68 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005edc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ee6:	e853 3f00 	ldrex	r3, [r3]
 8005eea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eee:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005ef2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	461a      	mov	r2, r3
 8005efa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005efc:	637b      	str	r3, [r7, #52]	; 0x34
 8005efe:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f00:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005f02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f04:	e841 2300 	strex	r3, r2, [r1]
 8005f08:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d1e6      	bne.n	8005ede <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	3308      	adds	r3, #8
 8005f16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f18:	697b      	ldr	r3, [r7, #20]
 8005f1a:	e853 3f00 	ldrex	r3, [r3]
 8005f1e:	613b      	str	r3, [r7, #16]
   return(result);
 8005f20:	693b      	ldr	r3, [r7, #16]
 8005f22:	f023 0301 	bic.w	r3, r3, #1
 8005f26:	66bb      	str	r3, [r7, #104]	; 0x68
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	3308      	adds	r3, #8
 8005f2e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005f30:	623a      	str	r2, [r7, #32]
 8005f32:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f34:	69f9      	ldr	r1, [r7, #28]
 8005f36:	6a3a      	ldr	r2, [r7, #32]
 8005f38:	e841 2300 	strex	r3, r2, [r1]
 8005f3c:	61bb      	str	r3, [r7, #24]
   return(result);
 8005f3e:	69bb      	ldr	r3, [r7, #24]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d1e5      	bne.n	8005f10 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	2220      	movs	r2, #32
 8005f48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	2220      	movs	r2, #32
 8005f50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	2220      	movs	r2, #32
 8005f58:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005f64:	2303      	movs	r3, #3
 8005f66:	e010      	b.n	8005f8a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	69da      	ldr	r2, [r3, #28]
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	4013      	ands	r3, r2
 8005f72:	68ba      	ldr	r2, [r7, #8]
 8005f74:	429a      	cmp	r2, r3
 8005f76:	bf0c      	ite	eq
 8005f78:	2301      	moveq	r3, #1
 8005f7a:	2300      	movne	r3, #0
 8005f7c:	b2db      	uxtb	r3, r3
 8005f7e:	461a      	mov	r2, r3
 8005f80:	79fb      	ldrb	r3, [r7, #7]
 8005f82:	429a      	cmp	r2, r3
 8005f84:	f43f af46 	beq.w	8005e14 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005f88:	2300      	movs	r3, #0
}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	3770      	adds	r7, #112	; 0x70
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bd80      	pop	{r7, pc}
	...

08005f94 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005f94:	b480      	push	{r7}
 8005f96:	b0a3      	sub	sp, #140	; 0x8c
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	60f8      	str	r0, [r7, #12]
 8005f9c:	60b9      	str	r1, [r7, #8]
 8005f9e:	4613      	mov	r3, r2
 8005fa0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	68ba      	ldr	r2, [r7, #8]
 8005fa6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	88fa      	ldrh	r2, [r7, #6]
 8005fac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	88fa      	ldrh	r2, [r7, #6]
 8005fb4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	689b      	ldr	r3, [r3, #8]
 8005fc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fc6:	d10e      	bne.n	8005fe6 <UART_Start_Receive_IT+0x52>
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	691b      	ldr	r3, [r3, #16]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d105      	bne.n	8005fdc <UART_Start_Receive_IT+0x48>
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005fd6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005fda:	e02d      	b.n	8006038 <UART_Start_Receive_IT+0xa4>
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	22ff      	movs	r2, #255	; 0xff
 8005fe0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005fe4:	e028      	b.n	8006038 <UART_Start_Receive_IT+0xa4>
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	689b      	ldr	r3, [r3, #8]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d10d      	bne.n	800600a <UART_Start_Receive_IT+0x76>
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	691b      	ldr	r3, [r3, #16]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d104      	bne.n	8006000 <UART_Start_Receive_IT+0x6c>
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	22ff      	movs	r2, #255	; 0xff
 8005ffa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005ffe:	e01b      	b.n	8006038 <UART_Start_Receive_IT+0xa4>
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	227f      	movs	r2, #127	; 0x7f
 8006004:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006008:	e016      	b.n	8006038 <UART_Start_Receive_IT+0xa4>
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	689b      	ldr	r3, [r3, #8]
 800600e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006012:	d10d      	bne.n	8006030 <UART_Start_Receive_IT+0x9c>
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	691b      	ldr	r3, [r3, #16]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d104      	bne.n	8006026 <UART_Start_Receive_IT+0x92>
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	227f      	movs	r2, #127	; 0x7f
 8006020:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006024:	e008      	b.n	8006038 <UART_Start_Receive_IT+0xa4>
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	223f      	movs	r2, #63	; 0x3f
 800602a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800602e:	e003      	b.n	8006038 <UART_Start_Receive_IT+0xa4>
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2200      	movs	r2, #0
 8006034:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	2200      	movs	r2, #0
 800603c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	2222      	movs	r2, #34	; 0x22
 8006044:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	3308      	adds	r3, #8
 800604e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006050:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006052:	e853 3f00 	ldrex	r3, [r3]
 8006056:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8006058:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800605a:	f043 0301 	orr.w	r3, r3, #1
 800605e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	3308      	adds	r3, #8
 8006068:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800606c:	673a      	str	r2, [r7, #112]	; 0x70
 800606e:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006070:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8006072:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8006074:	e841 2300 	strex	r3, r2, [r1]
 8006078:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800607a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800607c:	2b00      	cmp	r3, #0
 800607e:	d1e3      	bne.n	8006048 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006084:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006088:	d153      	bne.n	8006132 <UART_Start_Receive_IT+0x19e>
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006090:	88fa      	ldrh	r2, [r7, #6]
 8006092:	429a      	cmp	r2, r3
 8006094:	d34d      	bcc.n	8006132 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	689b      	ldr	r3, [r3, #8]
 800609a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800609e:	d107      	bne.n	80060b0 <UART_Start_Receive_IT+0x11c>
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	691b      	ldr	r3, [r3, #16]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d103      	bne.n	80060b0 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	4a4b      	ldr	r2, [pc, #300]	; (80061d8 <UART_Start_Receive_IT+0x244>)
 80060ac:	671a      	str	r2, [r3, #112]	; 0x70
 80060ae:	e002      	b.n	80060b6 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	4a4a      	ldr	r2, [pc, #296]	; (80061dc <UART_Start_Receive_IT+0x248>)
 80060b4:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	2200      	movs	r2, #0
 80060ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	691b      	ldr	r3, [r3, #16]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d01a      	beq.n	80060fc <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060ce:	e853 3f00 	ldrex	r3, [r3]
 80060d2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80060d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060da:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	461a      	mov	r2, r3
 80060e4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80060e8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80060ea:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ec:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80060ee:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80060f0:	e841 2300 	strex	r3, r2, [r1]
 80060f4:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80060f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d1e4      	bne.n	80060c6 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	3308      	adds	r3, #8
 8006102:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006104:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006106:	e853 3f00 	ldrex	r3, [r3]
 800610a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800610c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800610e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006112:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	3308      	adds	r3, #8
 800611a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800611c:	64ba      	str	r2, [r7, #72]	; 0x48
 800611e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006120:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006122:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006124:	e841 2300 	strex	r3, r2, [r1]
 8006128:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800612a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800612c:	2b00      	cmp	r3, #0
 800612e:	d1e5      	bne.n	80060fc <UART_Start_Receive_IT+0x168>
 8006130:	e04a      	b.n	80061c8 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	689b      	ldr	r3, [r3, #8]
 8006136:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800613a:	d107      	bne.n	800614c <UART_Start_Receive_IT+0x1b8>
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	691b      	ldr	r3, [r3, #16]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d103      	bne.n	800614c <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	4a26      	ldr	r2, [pc, #152]	; (80061e0 <UART_Start_Receive_IT+0x24c>)
 8006148:	671a      	str	r2, [r3, #112]	; 0x70
 800614a:	e002      	b.n	8006152 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	4a25      	ldr	r2, [pc, #148]	; (80061e4 <UART_Start_Receive_IT+0x250>)
 8006150:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	2200      	movs	r2, #0
 8006156:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	691b      	ldr	r3, [r3, #16]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d019      	beq.n	8006196 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800616a:	e853 3f00 	ldrex	r3, [r3]
 800616e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006172:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006176:	677b      	str	r3, [r7, #116]	; 0x74
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	461a      	mov	r2, r3
 800617e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006180:	637b      	str	r3, [r7, #52]	; 0x34
 8006182:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006184:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006186:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006188:	e841 2300 	strex	r3, r2, [r1]
 800618c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800618e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006190:	2b00      	cmp	r3, #0
 8006192:	d1e6      	bne.n	8006162 <UART_Start_Receive_IT+0x1ce>
 8006194:	e018      	b.n	80061c8 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800619c:	697b      	ldr	r3, [r7, #20]
 800619e:	e853 3f00 	ldrex	r3, [r3]
 80061a2:	613b      	str	r3, [r7, #16]
   return(result);
 80061a4:	693b      	ldr	r3, [r7, #16]
 80061a6:	f043 0320 	orr.w	r3, r3, #32
 80061aa:	67bb      	str	r3, [r7, #120]	; 0x78
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	461a      	mov	r2, r3
 80061b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80061b4:	623b      	str	r3, [r7, #32]
 80061b6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061b8:	69f9      	ldr	r1, [r7, #28]
 80061ba:	6a3a      	ldr	r2, [r7, #32]
 80061bc:	e841 2300 	strex	r3, r2, [r1]
 80061c0:	61bb      	str	r3, [r7, #24]
   return(result);
 80061c2:	69bb      	ldr	r3, [r7, #24]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d1e6      	bne.n	8006196 <UART_Start_Receive_IT+0x202>
    }
  }
  return HAL_OK;
 80061c8:	2300      	movs	r3, #0
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	378c      	adds	r7, #140	; 0x8c
 80061ce:	46bd      	mov	sp, r7
 80061d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d4:	4770      	bx	lr
 80061d6:	bf00      	nop
 80061d8:	080068f1 	.word	0x080068f1
 80061dc:	080065f9 	.word	0x080065f9
 80061e0:	08006497 	.word	0x08006497
 80061e4:	08006337 	.word	0x08006337

080061e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b095      	sub	sp, #84	; 0x54
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061f8:	e853 3f00 	ldrex	r3, [r3]
 80061fc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80061fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006200:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006204:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	461a      	mov	r2, r3
 800620c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800620e:	643b      	str	r3, [r7, #64]	; 0x40
 8006210:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006212:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006214:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006216:	e841 2300 	strex	r3, r2, [r1]
 800621a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800621c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800621e:	2b00      	cmp	r3, #0
 8006220:	d1e6      	bne.n	80061f0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	3308      	adds	r3, #8
 8006228:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800622a:	6a3b      	ldr	r3, [r7, #32]
 800622c:	e853 3f00 	ldrex	r3, [r3]
 8006230:	61fb      	str	r3, [r7, #28]
   return(result);
 8006232:	69fa      	ldr	r2, [r7, #28]
 8006234:	4b1e      	ldr	r3, [pc, #120]	; (80062b0 <UART_EndRxTransfer+0xc8>)
 8006236:	4013      	ands	r3, r2
 8006238:	64bb      	str	r3, [r7, #72]	; 0x48
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	3308      	adds	r3, #8
 8006240:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006242:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006244:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006246:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006248:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800624a:	e841 2300 	strex	r3, r2, [r1]
 800624e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006252:	2b00      	cmp	r3, #0
 8006254:	d1e5      	bne.n	8006222 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800625a:	2b01      	cmp	r3, #1
 800625c:	d118      	bne.n	8006290 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	e853 3f00 	ldrex	r3, [r3]
 800626a:	60bb      	str	r3, [r7, #8]
   return(result);
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	f023 0310 	bic.w	r3, r3, #16
 8006272:	647b      	str	r3, [r7, #68]	; 0x44
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	461a      	mov	r2, r3
 800627a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800627c:	61bb      	str	r3, [r7, #24]
 800627e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006280:	6979      	ldr	r1, [r7, #20]
 8006282:	69ba      	ldr	r2, [r7, #24]
 8006284:	e841 2300 	strex	r3, r2, [r1]
 8006288:	613b      	str	r3, [r7, #16]
   return(result);
 800628a:	693b      	ldr	r3, [r7, #16]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d1e6      	bne.n	800625e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2220      	movs	r2, #32
 8006294:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2200      	movs	r2, #0
 800629c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2200      	movs	r2, #0
 80062a2:	671a      	str	r2, [r3, #112]	; 0x70
}
 80062a4:	bf00      	nop
 80062a6:	3754      	adds	r7, #84	; 0x54
 80062a8:	46bd      	mov	sp, r7
 80062aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ae:	4770      	bx	lr
 80062b0:	effffffe 	.word	0xeffffffe

080062b4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b084      	sub	sp, #16
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062c0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	2200      	movs	r2, #0
 80062c6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	2200      	movs	r2, #0
 80062ce:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80062d2:	68f8      	ldr	r0, [r7, #12]
 80062d4:	f7fe fe26 	bl	8004f24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80062d8:	bf00      	nop
 80062da:	3710      	adds	r7, #16
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}

080062e0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b088      	sub	sp, #32
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	e853 3f00 	ldrex	r3, [r3]
 80062f4:	60bb      	str	r3, [r7, #8]
   return(result);
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062fc:	61fb      	str	r3, [r7, #28]
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	461a      	mov	r2, r3
 8006304:	69fb      	ldr	r3, [r7, #28]
 8006306:	61bb      	str	r3, [r7, #24]
 8006308:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800630a:	6979      	ldr	r1, [r7, #20]
 800630c:	69ba      	ldr	r2, [r7, #24]
 800630e:	e841 2300 	strex	r3, r2, [r1]
 8006312:	613b      	str	r3, [r7, #16]
   return(result);
 8006314:	693b      	ldr	r3, [r7, #16]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d1e6      	bne.n	80062e8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2220      	movs	r2, #32
 800631e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2200      	movs	r2, #0
 8006326:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	f7fe fdf1 	bl	8004f10 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800632e:	bf00      	nop
 8006330:	3720      	adds	r7, #32
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}

08006336 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006336:	b580      	push	{r7, lr}
 8006338:	b096      	sub	sp, #88	; 0x58
 800633a:	af00      	add	r7, sp, #0
 800633c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006344:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800634e:	2b22      	cmp	r3, #34	; 0x22
 8006350:	f040 8095 	bne.w	800647e <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800635a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800635e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8006362:	b2d9      	uxtb	r1, r3
 8006364:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006368:	b2da      	uxtb	r2, r3
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800636e:	400a      	ands	r2, r1
 8006370:	b2d2      	uxtb	r2, r2
 8006372:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006378:	1c5a      	adds	r2, r3, #1
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006384:	b29b      	uxth	r3, r3
 8006386:	3b01      	subs	r3, #1
 8006388:	b29a      	uxth	r2, r3
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006396:	b29b      	uxth	r3, r3
 8006398:	2b00      	cmp	r3, #0
 800639a:	d178      	bne.n	800648e <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063a4:	e853 3f00 	ldrex	r3, [r3]
 80063a8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80063aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80063b0:	653b      	str	r3, [r7, #80]	; 0x50
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	461a      	mov	r2, r3
 80063b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063ba:	647b      	str	r3, [r7, #68]	; 0x44
 80063bc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063be:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80063c0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80063c2:	e841 2300 	strex	r3, r2, [r1]
 80063c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80063c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d1e6      	bne.n	800639c <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	3308      	adds	r3, #8
 80063d4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d8:	e853 3f00 	ldrex	r3, [r3]
 80063dc:	623b      	str	r3, [r7, #32]
   return(result);
 80063de:	6a3b      	ldr	r3, [r7, #32]
 80063e0:	f023 0301 	bic.w	r3, r3, #1
 80063e4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	3308      	adds	r3, #8
 80063ec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80063ee:	633a      	str	r2, [r7, #48]	; 0x30
 80063f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80063f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063f6:	e841 2300 	strex	r3, r2, [r1]
 80063fa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80063fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d1e5      	bne.n	80063ce <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2220      	movs	r2, #32
 8006406:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2200      	movs	r2, #0
 800640e:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006414:	2b01      	cmp	r3, #1
 8006416:	d12e      	bne.n	8006476 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2200      	movs	r2, #0
 800641c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006424:	693b      	ldr	r3, [r7, #16]
 8006426:	e853 3f00 	ldrex	r3, [r3]
 800642a:	60fb      	str	r3, [r7, #12]
   return(result);
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	f023 0310 	bic.w	r3, r3, #16
 8006432:	64bb      	str	r3, [r7, #72]	; 0x48
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	461a      	mov	r2, r3
 800643a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800643c:	61fb      	str	r3, [r7, #28]
 800643e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006440:	69b9      	ldr	r1, [r7, #24]
 8006442:	69fa      	ldr	r2, [r7, #28]
 8006444:	e841 2300 	strex	r3, r2, [r1]
 8006448:	617b      	str	r3, [r7, #20]
   return(result);
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d1e6      	bne.n	800641e <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	69db      	ldr	r3, [r3, #28]
 8006456:	f003 0310 	and.w	r3, r3, #16
 800645a:	2b10      	cmp	r3, #16
 800645c:	d103      	bne.n	8006466 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	2210      	movs	r2, #16
 8006464:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800646c:	4619      	mov	r1, r3
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f7fe fd62 	bl	8004f38 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006474:	e00b      	b.n	800648e <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	f7fa fac6 	bl	8000a08 <HAL_UART_RxCpltCallback>
}
 800647c:	e007      	b.n	800648e <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	699a      	ldr	r2, [r3, #24]
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f042 0208 	orr.w	r2, r2, #8
 800648c:	619a      	str	r2, [r3, #24]
}
 800648e:	bf00      	nop
 8006490:	3758      	adds	r7, #88	; 0x58
 8006492:	46bd      	mov	sp, r7
 8006494:	bd80      	pop	{r7, pc}

08006496 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006496:	b580      	push	{r7, lr}
 8006498:	b096      	sub	sp, #88	; 0x58
 800649a:	af00      	add	r7, sp, #0
 800649c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80064a4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064ae:	2b22      	cmp	r3, #34	; 0x22
 80064b0:	f040 8095 	bne.w	80065de <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ba:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064c2:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80064c4:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80064c8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80064cc:	4013      	ands	r3, r2
 80064ce:	b29a      	uxth	r2, r3
 80064d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80064d2:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064d8:	1c9a      	adds	r2, r3, #2
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80064e4:	b29b      	uxth	r3, r3
 80064e6:	3b01      	subs	r3, #1
 80064e8:	b29a      	uxth	r2, r3
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80064f6:	b29b      	uxth	r3, r3
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d178      	bne.n	80065ee <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006502:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006504:	e853 3f00 	ldrex	r3, [r3]
 8006508:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800650a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800650c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006510:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	461a      	mov	r2, r3
 8006518:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800651a:	643b      	str	r3, [r7, #64]	; 0x40
 800651c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800651e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006520:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006522:	e841 2300 	strex	r3, r2, [r1]
 8006526:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800652a:	2b00      	cmp	r3, #0
 800652c:	d1e6      	bne.n	80064fc <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	3308      	adds	r3, #8
 8006534:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006536:	6a3b      	ldr	r3, [r7, #32]
 8006538:	e853 3f00 	ldrex	r3, [r3]
 800653c:	61fb      	str	r3, [r7, #28]
   return(result);
 800653e:	69fb      	ldr	r3, [r7, #28]
 8006540:	f023 0301 	bic.w	r3, r3, #1
 8006544:	64bb      	str	r3, [r7, #72]	; 0x48
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	3308      	adds	r3, #8
 800654c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800654e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006550:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006552:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006554:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006556:	e841 2300 	strex	r3, r2, [r1]
 800655a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800655c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800655e:	2b00      	cmp	r3, #0
 8006560:	d1e5      	bne.n	800652e <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2220      	movs	r2, #32
 8006566:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2200      	movs	r2, #0
 800656e:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006574:	2b01      	cmp	r3, #1
 8006576:	d12e      	bne.n	80065d6 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2200      	movs	r2, #0
 800657c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	e853 3f00 	ldrex	r3, [r3]
 800658a:	60bb      	str	r3, [r7, #8]
   return(result);
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	f023 0310 	bic.w	r3, r3, #16
 8006592:	647b      	str	r3, [r7, #68]	; 0x44
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	461a      	mov	r2, r3
 800659a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800659c:	61bb      	str	r3, [r7, #24]
 800659e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065a0:	6979      	ldr	r1, [r7, #20]
 80065a2:	69ba      	ldr	r2, [r7, #24]
 80065a4:	e841 2300 	strex	r3, r2, [r1]
 80065a8:	613b      	str	r3, [r7, #16]
   return(result);
 80065aa:	693b      	ldr	r3, [r7, #16]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d1e6      	bne.n	800657e <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	69db      	ldr	r3, [r3, #28]
 80065b6:	f003 0310 	and.w	r3, r3, #16
 80065ba:	2b10      	cmp	r3, #16
 80065bc:	d103      	bne.n	80065c6 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	2210      	movs	r2, #16
 80065c4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80065cc:	4619      	mov	r1, r3
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	f7fe fcb2 	bl	8004f38 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80065d4:	e00b      	b.n	80065ee <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f7fa fa16 	bl	8000a08 <HAL_UART_RxCpltCallback>
}
 80065dc:	e007      	b.n	80065ee <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	699a      	ldr	r2, [r3, #24]
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f042 0208 	orr.w	r2, r2, #8
 80065ec:	619a      	str	r2, [r3, #24]
}
 80065ee:	bf00      	nop
 80065f0:	3758      	adds	r7, #88	; 0x58
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}
	...

080065f8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b0a6      	sub	sp, #152	; 0x98
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006606:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	69db      	ldr	r3, [r3, #28]
 8006610:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	689b      	ldr	r3, [r3, #8]
 8006624:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800662e:	2b22      	cmp	r3, #34	; 0x22
 8006630:	f040 814d 	bne.w	80068ce <UART_RxISR_8BIT_FIFOEN+0x2d6>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800663a:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800663e:	e0f4      	b.n	800682a <UART_RxISR_8BIT_FIFOEN+0x232>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006646:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800664a:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800664e:	b2d9      	uxtb	r1, r3
 8006650:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8006654:	b2da      	uxtb	r2, r3
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800665a:	400a      	ands	r2, r1
 800665c:	b2d2      	uxtb	r2, r2
 800665e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006664:	1c5a      	adds	r2, r3, #1
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006670:	b29b      	uxth	r3, r3
 8006672:	3b01      	subs	r3, #1
 8006674:	b29a      	uxth	r2, r3
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	69db      	ldr	r3, [r3, #28]
 8006682:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006686:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800668a:	f003 0307 	and.w	r3, r3, #7
 800668e:	2b00      	cmp	r3, #0
 8006690:	d053      	beq.n	800673a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006692:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006696:	f003 0301 	and.w	r3, r3, #1
 800669a:	2b00      	cmp	r3, #0
 800669c:	d011      	beq.n	80066c2 <UART_RxISR_8BIT_FIFOEN+0xca>
 800669e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80066a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d00b      	beq.n	80066c2 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	2201      	movs	r2, #1
 80066b0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80066b8:	f043 0201 	orr.w	r2, r3, #1
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80066c2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80066c6:	f003 0302 	and.w	r3, r3, #2
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d011      	beq.n	80066f2 <UART_RxISR_8BIT_FIFOEN+0xfa>
 80066ce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80066d2:	f003 0301 	and.w	r3, r3, #1
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d00b      	beq.n	80066f2 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	2202      	movs	r2, #2
 80066e0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80066e8:	f043 0204 	orr.w	r2, r3, #4
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80066f2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80066f6:	f003 0304 	and.w	r3, r3, #4
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d011      	beq.n	8006722 <UART_RxISR_8BIT_FIFOEN+0x12a>
 80066fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006702:	f003 0301 	and.w	r3, r3, #1
 8006706:	2b00      	cmp	r3, #0
 8006708:	d00b      	beq.n	8006722 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	2204      	movs	r2, #4
 8006710:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006718:	f043 0202 	orr.w	r2, r3, #2
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006728:	2b00      	cmp	r3, #0
 800672a:	d006      	beq.n	800673a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	f7fe fbf9 	bl	8004f24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2200      	movs	r2, #0
 8006736:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006740:	b29b      	uxth	r3, r3
 8006742:	2b00      	cmp	r3, #0
 8006744:	d171      	bne.n	800682a <UART_RxISR_8BIT_FIFOEN+0x232>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800674c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800674e:	e853 3f00 	ldrex	r3, [r3]
 8006752:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8006754:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006756:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800675a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	461a      	mov	r2, r3
 8006764:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006768:	66bb      	str	r3, [r7, #104]	; 0x68
 800676a:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800676c:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800676e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006770:	e841 2300 	strex	r3, r2, [r1]
 8006774:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8006776:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006778:	2b00      	cmp	r3, #0
 800677a:	d1e4      	bne.n	8006746 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	3308      	adds	r3, #8
 8006782:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006784:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006786:	e853 3f00 	ldrex	r3, [r3]
 800678a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800678c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800678e:	4b56      	ldr	r3, [pc, #344]	; (80068e8 <UART_RxISR_8BIT_FIFOEN+0x2f0>)
 8006790:	4013      	ands	r3, r2
 8006792:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	3308      	adds	r3, #8
 800679a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800679c:	657a      	str	r2, [r7, #84]	; 0x54
 800679e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067a0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80067a2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80067a4:	e841 2300 	strex	r3, r2, [r1]
 80067a8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80067aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d1e5      	bne.n	800677c <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2220      	movs	r2, #32
 80067b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2200      	movs	r2, #0
 80067bc:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067c2:	2b01      	cmp	r3, #1
 80067c4:	d12e      	bne.n	8006824 <UART_RxISR_8BIT_FIFOEN+0x22c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2200      	movs	r2, #0
 80067ca:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067d4:	e853 3f00 	ldrex	r3, [r3]
 80067d8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80067da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067dc:	f023 0310 	bic.w	r3, r3, #16
 80067e0:	67bb      	str	r3, [r7, #120]	; 0x78
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	461a      	mov	r2, r3
 80067e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80067ea:	643b      	str	r3, [r7, #64]	; 0x40
 80067ec:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ee:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80067f0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80067f2:	e841 2300 	strex	r3, r2, [r1]
 80067f6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80067f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d1e6      	bne.n	80067cc <UART_RxISR_8BIT_FIFOEN+0x1d4>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	69db      	ldr	r3, [r3, #28]
 8006804:	f003 0310 	and.w	r3, r3, #16
 8006808:	2b10      	cmp	r3, #16
 800680a:	d103      	bne.n	8006814 <UART_RxISR_8BIT_FIFOEN+0x21c>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	2210      	movs	r2, #16
 8006812:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800681a:	4619      	mov	r1, r3
 800681c:	6878      	ldr	r0, [r7, #4]
 800681e:	f7fe fb8b 	bl	8004f38 <HAL_UARTEx_RxEventCallback>
 8006822:	e002      	b.n	800682a <UART_RxISR_8BIT_FIFOEN+0x232>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8006824:	6878      	ldr	r0, [r7, #4]
 8006826:	f7fa f8ef 	bl	8000a08 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800682a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800682e:	2b00      	cmp	r3, #0
 8006830:	d006      	beq.n	8006840 <UART_RxISR_8BIT_FIFOEN+0x248>
 8006832:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006836:	f003 0320 	and.w	r3, r3, #32
 800683a:	2b00      	cmp	r3, #0
 800683c:	f47f af00 	bne.w	8006640 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006846:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800684a:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800684e:	2b00      	cmp	r3, #0
 8006850:	d045      	beq.n	80068de <UART_RxISR_8BIT_FIFOEN+0x2e6>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006858:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800685c:	429a      	cmp	r2, r3
 800685e:	d23e      	bcs.n	80068de <UART_RxISR_8BIT_FIFOEN+0x2e6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	3308      	adds	r3, #8
 8006866:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006868:	6a3b      	ldr	r3, [r7, #32]
 800686a:	e853 3f00 	ldrex	r3, [r3]
 800686e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006870:	69fb      	ldr	r3, [r7, #28]
 8006872:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006876:	673b      	str	r3, [r7, #112]	; 0x70
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	3308      	adds	r3, #8
 800687e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8006880:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006882:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006884:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006886:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006888:	e841 2300 	strex	r3, r2, [r1]
 800688c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800688e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006890:	2b00      	cmp	r3, #0
 8006892:	d1e5      	bne.n	8006860 <UART_RxISR_8BIT_FIFOEN+0x268>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	4a15      	ldr	r2, [pc, #84]	; (80068ec <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8006898:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	e853 3f00 	ldrex	r3, [r3]
 80068a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	f043 0320 	orr.w	r3, r3, #32
 80068ae:	66fb      	str	r3, [r7, #108]	; 0x6c
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	461a      	mov	r2, r3
 80068b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068b8:	61bb      	str	r3, [r7, #24]
 80068ba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068bc:	6979      	ldr	r1, [r7, #20]
 80068be:	69ba      	ldr	r2, [r7, #24]
 80068c0:	e841 2300 	strex	r3, r2, [r1]
 80068c4:	613b      	str	r3, [r7, #16]
   return(result);
 80068c6:	693b      	ldr	r3, [r7, #16]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d1e6      	bne.n	800689a <UART_RxISR_8BIT_FIFOEN+0x2a2>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80068cc:	e007      	b.n	80068de <UART_RxISR_8BIT_FIFOEN+0x2e6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	699a      	ldr	r2, [r3, #24]
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f042 0208 	orr.w	r2, r2, #8
 80068dc:	619a      	str	r2, [r3, #24]
}
 80068de:	bf00      	nop
 80068e0:	3798      	adds	r7, #152	; 0x98
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd80      	pop	{r7, pc}
 80068e6:	bf00      	nop
 80068e8:	effffffe 	.word	0xeffffffe
 80068ec:	08006337 	.word	0x08006337

080068f0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b0a8      	sub	sp, #160	; 0xa0
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80068fe:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	69db      	ldr	r3, [r3, #28]
 8006908:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	689b      	ldr	r3, [r3, #8]
 800691c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006926:	2b22      	cmp	r3, #34	; 0x22
 8006928:	f040 8151 	bne.w	8006bce <UART_RxISR_16BIT_FIFOEN+0x2de>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006932:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006936:	e0f8      	b.n	8006b2a <UART_RxISR_16BIT_FIFOEN+0x23a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800693e:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006946:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800694a:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800694e:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8006952:	4013      	ands	r3, r2
 8006954:	b29a      	uxth	r2, r3
 8006956:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800695a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006960:	1c9a      	adds	r2, r3, #2
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800696c:	b29b      	uxth	r3, r3
 800696e:	3b01      	subs	r3, #1
 8006970:	b29a      	uxth	r2, r3
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	69db      	ldr	r3, [r3, #28]
 800697e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006982:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006986:	f003 0307 	and.w	r3, r3, #7
 800698a:	2b00      	cmp	r3, #0
 800698c:	d053      	beq.n	8006a36 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800698e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006992:	f003 0301 	and.w	r3, r3, #1
 8006996:	2b00      	cmp	r3, #0
 8006998:	d011      	beq.n	80069be <UART_RxISR_16BIT_FIFOEN+0xce>
 800699a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800699e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d00b      	beq.n	80069be <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	2201      	movs	r2, #1
 80069ac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80069b4:	f043 0201 	orr.w	r2, r3, #1
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80069be:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80069c2:	f003 0302 	and.w	r3, r3, #2
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d011      	beq.n	80069ee <UART_RxISR_16BIT_FIFOEN+0xfe>
 80069ca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80069ce:	f003 0301 	and.w	r3, r3, #1
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d00b      	beq.n	80069ee <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	2202      	movs	r2, #2
 80069dc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80069e4:	f043 0204 	orr.w	r2, r3, #4
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80069ee:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80069f2:	f003 0304 	and.w	r3, r3, #4
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d011      	beq.n	8006a1e <UART_RxISR_16BIT_FIFOEN+0x12e>
 80069fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80069fe:	f003 0301 	and.w	r3, r3, #1
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d00b      	beq.n	8006a1e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	2204      	movs	r2, #4
 8006a0c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a14:	f043 0202 	orr.w	r2, r3, #2
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d006      	beq.n	8006a36 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	f7fe fa7b 	bl	8004f24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2200      	movs	r2, #0
 8006a32:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006a3c:	b29b      	uxth	r3, r3
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d173      	bne.n	8006b2a <UART_RxISR_16BIT_FIFOEN+0x23a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a48:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a4a:	e853 3f00 	ldrex	r3, [r3]
 8006a4e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006a50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a52:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a56:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	461a      	mov	r2, r3
 8006a60:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006a64:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006a66:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a68:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006a6a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006a6c:	e841 2300 	strex	r3, r2, [r1]
 8006a70:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006a72:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d1e4      	bne.n	8006a42 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	3308      	adds	r3, #8
 8006a7e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a82:	e853 3f00 	ldrex	r3, [r3]
 8006a86:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006a88:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a8a:	4b57      	ldr	r3, [pc, #348]	; (8006be8 <UART_RxISR_16BIT_FIFOEN+0x2f8>)
 8006a8c:	4013      	ands	r3, r2
 8006a8e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	3308      	adds	r3, #8
 8006a98:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006a9c:	65ba      	str	r2, [r7, #88]	; 0x58
 8006a9e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aa0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006aa2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006aa4:	e841 2300 	strex	r3, r2, [r1]
 8006aa8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006aaa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d1e3      	bne.n	8006a78 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2220      	movs	r2, #32
 8006ab4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2200      	movs	r2, #0
 8006abc:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ac2:	2b01      	cmp	r3, #1
 8006ac4:	d12e      	bne.n	8006b24 <UART_RxISR_16BIT_FIFOEN+0x234>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2200      	movs	r2, #0
 8006aca:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ad4:	e853 3f00 	ldrex	r3, [r3]
 8006ad8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006ada:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006adc:	f023 0310 	bic.w	r3, r3, #16
 8006ae0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	461a      	mov	r2, r3
 8006ae8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006aea:	647b      	str	r3, [r7, #68]	; 0x44
 8006aec:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aee:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006af0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006af2:	e841 2300 	strex	r3, r2, [r1]
 8006af6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006af8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d1e6      	bne.n	8006acc <UART_RxISR_16BIT_FIFOEN+0x1dc>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	69db      	ldr	r3, [r3, #28]
 8006b04:	f003 0310 	and.w	r3, r3, #16
 8006b08:	2b10      	cmp	r3, #16
 8006b0a:	d103      	bne.n	8006b14 <UART_RxISR_16BIT_FIFOEN+0x224>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	2210      	movs	r2, #16
 8006b12:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006b1a:	4619      	mov	r1, r3
 8006b1c:	6878      	ldr	r0, [r7, #4]
 8006b1e:	f7fe fa0b 	bl	8004f38 <HAL_UARTEx_RxEventCallback>
 8006b22:	e002      	b.n	8006b2a <UART_RxISR_16BIT_FIFOEN+0x23a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8006b24:	6878      	ldr	r0, [r7, #4]
 8006b26:	f7f9 ff6f 	bl	8000a08 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006b2a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d006      	beq.n	8006b40 <UART_RxISR_16BIT_FIFOEN+0x250>
 8006b32:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006b36:	f003 0320 	and.w	r3, r3, #32
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	f47f aefc 	bne.w	8006938 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006b46:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006b4a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d045      	beq.n	8006bde <UART_RxISR_16BIT_FIFOEN+0x2ee>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006b58:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8006b5c:	429a      	cmp	r2, r3
 8006b5e:	d23e      	bcs.n	8006bde <UART_RxISR_16BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	3308      	adds	r3, #8
 8006b66:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b6a:	e853 3f00 	ldrex	r3, [r3]
 8006b6e:	623b      	str	r3, [r7, #32]
   return(result);
 8006b70:	6a3b      	ldr	r3, [r7, #32]
 8006b72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b76:	677b      	str	r3, [r7, #116]	; 0x74
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	3308      	adds	r3, #8
 8006b7e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8006b80:	633a      	str	r2, [r7, #48]	; 0x30
 8006b82:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b84:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006b86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b88:	e841 2300 	strex	r3, r2, [r1]
 8006b8c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d1e5      	bne.n	8006b60 <UART_RxISR_16BIT_FIFOEN+0x270>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	4a15      	ldr	r2, [pc, #84]	; (8006bec <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8006b98:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ba0:	693b      	ldr	r3, [r7, #16]
 8006ba2:	e853 3f00 	ldrex	r3, [r3]
 8006ba6:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	f043 0320 	orr.w	r3, r3, #32
 8006bae:	673b      	str	r3, [r7, #112]	; 0x70
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	461a      	mov	r2, r3
 8006bb6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006bb8:	61fb      	str	r3, [r7, #28]
 8006bba:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bbc:	69b9      	ldr	r1, [r7, #24]
 8006bbe:	69fa      	ldr	r2, [r7, #28]
 8006bc0:	e841 2300 	strex	r3, r2, [r1]
 8006bc4:	617b      	str	r3, [r7, #20]
   return(result);
 8006bc6:	697b      	ldr	r3, [r7, #20]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d1e6      	bne.n	8006b9a <UART_RxISR_16BIT_FIFOEN+0x2aa>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006bcc:	e007      	b.n	8006bde <UART_RxISR_16BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	699a      	ldr	r2, [r3, #24]
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f042 0208 	orr.w	r2, r2, #8
 8006bdc:	619a      	str	r2, [r3, #24]
}
 8006bde:	bf00      	nop
 8006be0:	37a0      	adds	r7, #160	; 0xa0
 8006be2:	46bd      	mov	sp, r7
 8006be4:	bd80      	pop	{r7, pc}
 8006be6:	bf00      	nop
 8006be8:	effffffe 	.word	0xeffffffe
 8006bec:	08006497 	.word	0x08006497

08006bf0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	b083      	sub	sp, #12
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006bf8:	bf00      	nop
 8006bfa:	370c      	adds	r7, #12
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c02:	4770      	bx	lr

08006c04 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006c04:	b480      	push	{r7}
 8006c06:	b083      	sub	sp, #12
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006c0c:	bf00      	nop
 8006c0e:	370c      	adds	r7, #12
 8006c10:	46bd      	mov	sp, r7
 8006c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c16:	4770      	bx	lr

08006c18 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b083      	sub	sp, #12
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006c20:	bf00      	nop
 8006c22:	370c      	adds	r7, #12
 8006c24:	46bd      	mov	sp, r7
 8006c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2a:	4770      	bx	lr

08006c2c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006c2c:	b480      	push	{r7}
 8006c2e:	b085      	sub	sp, #20
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006c3a:	2b01      	cmp	r3, #1
 8006c3c:	d101      	bne.n	8006c42 <HAL_UARTEx_DisableFifoMode+0x16>
 8006c3e:	2302      	movs	r3, #2
 8006c40:	e027      	b.n	8006c92 <HAL_UARTEx_DisableFifoMode+0x66>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2201      	movs	r2, #1
 8006c46:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2224      	movs	r2, #36	; 0x24
 8006c4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	681a      	ldr	r2, [r3, #0]
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f022 0201 	bic.w	r2, r2, #1
 8006c68:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006c70:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2200      	movs	r2, #0
 8006c76:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	68fa      	ldr	r2, [r7, #12]
 8006c7e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2220      	movs	r2, #32
 8006c84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006c90:	2300      	movs	r3, #0
}
 8006c92:	4618      	mov	r0, r3
 8006c94:	3714      	adds	r7, #20
 8006c96:	46bd      	mov	sp, r7
 8006c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9c:	4770      	bx	lr

08006c9e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006c9e:	b580      	push	{r7, lr}
 8006ca0:	b084      	sub	sp, #16
 8006ca2:	af00      	add	r7, sp, #0
 8006ca4:	6078      	str	r0, [r7, #4]
 8006ca6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006cae:	2b01      	cmp	r3, #1
 8006cb0:	d101      	bne.n	8006cb6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006cb2:	2302      	movs	r3, #2
 8006cb4:	e02d      	b.n	8006d12 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2201      	movs	r2, #1
 8006cba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2224      	movs	r2, #36	; 0x24
 8006cc2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	681a      	ldr	r2, [r3, #0]
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f022 0201 	bic.w	r2, r2, #1
 8006cdc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	689b      	ldr	r3, [r3, #8]
 8006ce4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	683a      	ldr	r2, [r7, #0]
 8006cee:	430a      	orrs	r2, r1
 8006cf0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	f000 f850 	bl	8006d98 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	68fa      	ldr	r2, [r7, #12]
 8006cfe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2220      	movs	r2, #32
 8006d04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006d10:	2300      	movs	r3, #0
}
 8006d12:	4618      	mov	r0, r3
 8006d14:	3710      	adds	r7, #16
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bd80      	pop	{r7, pc}

08006d1a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006d1a:	b580      	push	{r7, lr}
 8006d1c:	b084      	sub	sp, #16
 8006d1e:	af00      	add	r7, sp, #0
 8006d20:	6078      	str	r0, [r7, #4]
 8006d22:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006d2a:	2b01      	cmp	r3, #1
 8006d2c:	d101      	bne.n	8006d32 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006d2e:	2302      	movs	r3, #2
 8006d30:	e02d      	b.n	8006d8e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2201      	movs	r2, #1
 8006d36:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2224      	movs	r2, #36	; 0x24
 8006d3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	681a      	ldr	r2, [r3, #0]
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f022 0201 	bic.w	r2, r2, #1
 8006d58:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	689b      	ldr	r3, [r3, #8]
 8006d60:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	683a      	ldr	r2, [r7, #0]
 8006d6a:	430a      	orrs	r2, r1
 8006d6c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	f000 f812 	bl	8006d98 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	68fa      	ldr	r2, [r7, #12]
 8006d7a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2220      	movs	r2, #32
 8006d80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2200      	movs	r2, #0
 8006d88:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006d8c:	2300      	movs	r3, #0
}
 8006d8e:	4618      	mov	r0, r3
 8006d90:	3710      	adds	r7, #16
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bd80      	pop	{r7, pc}
	...

08006d98 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006d98:	b480      	push	{r7}
 8006d9a:	b085      	sub	sp, #20
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d108      	bne.n	8006dba <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2201      	movs	r2, #1
 8006dac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2201      	movs	r2, #1
 8006db4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006db8:	e031      	b.n	8006e1e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006dba:	2310      	movs	r3, #16
 8006dbc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006dbe:	2310      	movs	r3, #16
 8006dc0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	689b      	ldr	r3, [r3, #8]
 8006dc8:	0e5b      	lsrs	r3, r3, #25
 8006dca:	b2db      	uxtb	r3, r3
 8006dcc:	f003 0307 	and.w	r3, r3, #7
 8006dd0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	689b      	ldr	r3, [r3, #8]
 8006dd8:	0f5b      	lsrs	r3, r3, #29
 8006dda:	b2db      	uxtb	r3, r3
 8006ddc:	f003 0307 	and.w	r3, r3, #7
 8006de0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006de2:	7bbb      	ldrb	r3, [r7, #14]
 8006de4:	7b3a      	ldrb	r2, [r7, #12]
 8006de6:	4911      	ldr	r1, [pc, #68]	; (8006e2c <UARTEx_SetNbDataToProcess+0x94>)
 8006de8:	5c8a      	ldrb	r2, [r1, r2]
 8006dea:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006dee:	7b3a      	ldrb	r2, [r7, #12]
 8006df0:	490f      	ldr	r1, [pc, #60]	; (8006e30 <UARTEx_SetNbDataToProcess+0x98>)
 8006df2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006df4:	fb93 f3f2 	sdiv	r3, r3, r2
 8006df8:	b29a      	uxth	r2, r3
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006e00:	7bfb      	ldrb	r3, [r7, #15]
 8006e02:	7b7a      	ldrb	r2, [r7, #13]
 8006e04:	4909      	ldr	r1, [pc, #36]	; (8006e2c <UARTEx_SetNbDataToProcess+0x94>)
 8006e06:	5c8a      	ldrb	r2, [r1, r2]
 8006e08:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006e0c:	7b7a      	ldrb	r2, [r7, #13]
 8006e0e:	4908      	ldr	r1, [pc, #32]	; (8006e30 <UARTEx_SetNbDataToProcess+0x98>)
 8006e10:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006e12:	fb93 f3f2 	sdiv	r3, r3, r2
 8006e16:	b29a      	uxth	r2, r3
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006e1e:	bf00      	nop
 8006e20:	3714      	adds	r7, #20
 8006e22:	46bd      	mov	sp, r7
 8006e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e28:	4770      	bx	lr
 8006e2a:	bf00      	nop
 8006e2c:	08006ee4 	.word	0x08006ee4
 8006e30:	08006eec 	.word	0x08006eec

08006e34 <__libc_init_array>:
 8006e34:	b570      	push	{r4, r5, r6, lr}
 8006e36:	4d0d      	ldr	r5, [pc, #52]	; (8006e6c <__libc_init_array+0x38>)
 8006e38:	4c0d      	ldr	r4, [pc, #52]	; (8006e70 <__libc_init_array+0x3c>)
 8006e3a:	1b64      	subs	r4, r4, r5
 8006e3c:	10a4      	asrs	r4, r4, #2
 8006e3e:	2600      	movs	r6, #0
 8006e40:	42a6      	cmp	r6, r4
 8006e42:	d109      	bne.n	8006e58 <__libc_init_array+0x24>
 8006e44:	4d0b      	ldr	r5, [pc, #44]	; (8006e74 <__libc_init_array+0x40>)
 8006e46:	4c0c      	ldr	r4, [pc, #48]	; (8006e78 <__libc_init_array+0x44>)
 8006e48:	f000 f820 	bl	8006e8c <_init>
 8006e4c:	1b64      	subs	r4, r4, r5
 8006e4e:	10a4      	asrs	r4, r4, #2
 8006e50:	2600      	movs	r6, #0
 8006e52:	42a6      	cmp	r6, r4
 8006e54:	d105      	bne.n	8006e62 <__libc_init_array+0x2e>
 8006e56:	bd70      	pop	{r4, r5, r6, pc}
 8006e58:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e5c:	4798      	blx	r3
 8006e5e:	3601      	adds	r6, #1
 8006e60:	e7ee      	b.n	8006e40 <__libc_init_array+0xc>
 8006e62:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e66:	4798      	blx	r3
 8006e68:	3601      	adds	r6, #1
 8006e6a:	e7f2      	b.n	8006e52 <__libc_init_array+0x1e>
 8006e6c:	08006efc 	.word	0x08006efc
 8006e70:	08006efc 	.word	0x08006efc
 8006e74:	08006efc 	.word	0x08006efc
 8006e78:	08006f00 	.word	0x08006f00

08006e7c <memset>:
 8006e7c:	4402      	add	r2, r0
 8006e7e:	4603      	mov	r3, r0
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d100      	bne.n	8006e86 <memset+0xa>
 8006e84:	4770      	bx	lr
 8006e86:	f803 1b01 	strb.w	r1, [r3], #1
 8006e8a:	e7f9      	b.n	8006e80 <memset+0x4>

08006e8c <_init>:
 8006e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e8e:	bf00      	nop
 8006e90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e92:	bc08      	pop	{r3}
 8006e94:	469e      	mov	lr, r3
 8006e96:	4770      	bx	lr

08006e98 <_fini>:
 8006e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e9a:	bf00      	nop
 8006e9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e9e:	bc08      	pop	{r3}
 8006ea0:	469e      	mov	lr, r3
 8006ea2:	4770      	bx	lr
